%% Generated by the Erlang ASN.1 BER-compiler version, utilizing bit-syntax:1.7
%% Purpose: encoder and decoder to the types in mod MCS-PROTOCOL

-module('mcsp_per').
-include("mcsp.hrl").
-define('RT_PER',asn1rt_per_bin_rt2ct).
-asn1_info([{vsn,'1.7'},
            {module,'MCS-PROTOCOL'},
            {options,[per_bin,optimize,nif,{i,[46]}]}]).

-export([encoding_rule/0]).
-export([
'enc_ChannelId'/1,
'enc_StaticChannelId'/1,
'enc_DynamicChannelId'/1,
'enc_UserId'/1,
'enc_PrivateChannelId'/1,
'enc_AssignedChannelId'/1,
'enc_TokenId'/1,
'enc_TokenStatus'/1,
'enc_DataPriority'/1,
'enc_Segmentation'/1,
'enc_DomainParameters'/1,
'enc_Connect-Initial'/1,
'enc_Connect-Response'/1,
'enc_Connect-Additional'/1,
'enc_Connect-Result'/1,
'enc_PlumbDomainIndication'/1,
'enc_ErectDomainRequest'/1,
'enc_ChannelAttributes'/1,
'enc_MergeChannelsRequest'/1,
'enc_MergeChannelsConfirm'/1,
'enc_PurgeChannelsIndication'/1,
'enc_TokenAttributes'/1,
'enc_MergeTokensRequest'/1,
'enc_MergeTokensConfirm'/1,
'enc_PurgeTokensIndication'/1,
'enc_DisconnectProviderUltimatum'/1,
'enc_RejectMCSPDUUltimatum'/1,
'enc_AttachUserRequest'/1,
'enc_AttachUserConfirm'/1,
'enc_DetachUserRequest'/1,
'enc_DetachUserIndication'/1,
'enc_ChannelJoinRequest'/1,
'enc_ChannelJoinConfirm'/1,
'enc_ChannelLeaveRequest'/1,
'enc_ChannelConveneRequest'/1,
'enc_ChannelConveneConfirm'/1,
'enc_ChannelDisbandRequest'/1,
'enc_ChannelDisbandIndication'/1,
'enc_ChannelAdmitRequest'/1,
'enc_ChannelAdmitIndication'/1,
'enc_ChannelExpelRequest'/1,
'enc_ChannelExpelIndication'/1,
'enc_SendDataRequest'/1,
'enc_SendDataIndication'/1,
'enc_UniformSendDataRequest'/1,
'enc_UniformSendDataIndication'/1,
'enc_TokenGrabRequest'/1,
'enc_TokenGrabConfirm'/1,
'enc_TokenInhibitRequest'/1,
'enc_TokenInhibitConfirm'/1,
'enc_TokenGiveRequest'/1,
'enc_TokenGiveIndication'/1,
'enc_TokenGiveResponse'/1,
'enc_TokenGiveConfirm'/1,
'enc_TokenPleaseRequest'/1,
'enc_TokenPleaseIndication'/1,
'enc_TokenReleaseRequest'/1,
'enc_TokenReleaseConfirm'/1,
'enc_TokenTestRequest'/1,
'enc_TokenTestConfirm'/1,
'enc_Reason'/1,
'enc_Result'/1,
'enc_Diagnostic'/1,
'enc_ConnectMCSPDU'/1,
'enc_DomainMCSPDU'/1
]).

-export([
'dec_ChannelId'/2,
'dec_StaticChannelId'/2,
'dec_DynamicChannelId'/2,
'dec_UserId'/2,
'dec_PrivateChannelId'/2,
'dec_AssignedChannelId'/2,
'dec_TokenId'/2,
'dec_TokenStatus'/2,
'dec_DataPriority'/2,
'dec_Segmentation'/2,
'dec_DomainParameters'/2,
'dec_Connect-Initial'/2,
'dec_Connect-Response'/2,
'dec_Connect-Additional'/2,
'dec_Connect-Result'/2,
'dec_PlumbDomainIndication'/2,
'dec_ErectDomainRequest'/2,
'dec_ChannelAttributes'/2,
'dec_MergeChannelsRequest'/2,
'dec_MergeChannelsConfirm'/2,
'dec_PurgeChannelsIndication'/2,
'dec_TokenAttributes'/2,
'dec_MergeTokensRequest'/2,
'dec_MergeTokensConfirm'/2,
'dec_PurgeTokensIndication'/2,
'dec_DisconnectProviderUltimatum'/2,
'dec_RejectMCSPDUUltimatum'/2,
'dec_AttachUserRequest'/2,
'dec_AttachUserConfirm'/2,
'dec_DetachUserRequest'/2,
'dec_DetachUserIndication'/2,
'dec_ChannelJoinRequest'/2,
'dec_ChannelJoinConfirm'/2,
'dec_ChannelLeaveRequest'/2,
'dec_ChannelConveneRequest'/2,
'dec_ChannelConveneConfirm'/2,
'dec_ChannelDisbandRequest'/2,
'dec_ChannelDisbandIndication'/2,
'dec_ChannelAdmitRequest'/2,
'dec_ChannelAdmitIndication'/2,
'dec_ChannelExpelRequest'/2,
'dec_ChannelExpelIndication'/2,
'dec_SendDataRequest'/2,
'dec_SendDataIndication'/2,
'dec_UniformSendDataRequest'/2,
'dec_UniformSendDataIndication'/2,
'dec_TokenGrabRequest'/2,
'dec_TokenGrabConfirm'/2,
'dec_TokenInhibitRequest'/2,
'dec_TokenInhibitConfirm'/2,
'dec_TokenGiveRequest'/2,
'dec_TokenGiveIndication'/2,
'dec_TokenGiveResponse'/2,
'dec_TokenGiveConfirm'/2,
'dec_TokenPleaseRequest'/2,
'dec_TokenPleaseIndication'/2,
'dec_TokenReleaseRequest'/2,
'dec_TokenReleaseConfirm'/2,
'dec_TokenTestRequest'/2,
'dec_TokenTestConfirm'/2,
'dec_Reason'/2,
'dec_Result'/2,
'dec_Diagnostic'/2,
'dec_ConnectMCSPDU'/2,
'dec_DomainMCSPDU'/2
]).

-export([info/0]).


-export([encode/2,decode/2,encode_disp/2,decode_disp/2]).

encoding_rule() ->
   per_bin.

encode(Type,Data) ->
case catch ?RT_PER:complete(encode_disp(Type,Data)) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {Bytes,_Len} ->
    {ok,Bytes};
  Bytes ->
    {ok,Bytes}
end.

decode(Type,Data) ->
case catch decode_disp(Type,Data) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {X,_Rest} ->
    {ok,X};
  {X,_Rest,_Len} ->
    {ok,X}
end.

encode_disp('ChannelId',Data) -> 'enc_ChannelId'(Data);
encode_disp('StaticChannelId',Data) -> 'enc_StaticChannelId'(Data);
encode_disp('DynamicChannelId',Data) -> 'enc_DynamicChannelId'(Data);
encode_disp('UserId',Data) -> 'enc_UserId'(Data);
encode_disp('PrivateChannelId',Data) -> 'enc_PrivateChannelId'(Data);
encode_disp('AssignedChannelId',Data) -> 'enc_AssignedChannelId'(Data);
encode_disp('TokenId',Data) -> 'enc_TokenId'(Data);
encode_disp('TokenStatus',Data) -> 'enc_TokenStatus'(Data);
encode_disp('DataPriority',Data) -> 'enc_DataPriority'(Data);
encode_disp('Segmentation',Data) -> 'enc_Segmentation'(Data);
encode_disp('DomainParameters',Data) -> 'enc_DomainParameters'(Data);
encode_disp('Connect-Initial',Data) -> 'enc_Connect-Initial'(Data);
encode_disp('Connect-Response',Data) -> 'enc_Connect-Response'(Data);
encode_disp('Connect-Additional',Data) -> 'enc_Connect-Additional'(Data);
encode_disp('Connect-Result',Data) -> 'enc_Connect-Result'(Data);
encode_disp('PlumbDomainIndication',Data) -> 'enc_PlumbDomainIndication'(Data);
encode_disp('ErectDomainRequest',Data) -> 'enc_ErectDomainRequest'(Data);
encode_disp('ChannelAttributes',Data) -> 'enc_ChannelAttributes'(Data);
encode_disp('MergeChannelsRequest',Data) -> 'enc_MergeChannelsRequest'(Data);
encode_disp('MergeChannelsConfirm',Data) -> 'enc_MergeChannelsConfirm'(Data);
encode_disp('PurgeChannelsIndication',Data) -> 'enc_PurgeChannelsIndication'(Data);
encode_disp('TokenAttributes',Data) -> 'enc_TokenAttributes'(Data);
encode_disp('MergeTokensRequest',Data) -> 'enc_MergeTokensRequest'(Data);
encode_disp('MergeTokensConfirm',Data) -> 'enc_MergeTokensConfirm'(Data);
encode_disp('PurgeTokensIndication',Data) -> 'enc_PurgeTokensIndication'(Data);
encode_disp('DisconnectProviderUltimatum',Data) -> 'enc_DisconnectProviderUltimatum'(Data);
encode_disp('RejectMCSPDUUltimatum',Data) -> 'enc_RejectMCSPDUUltimatum'(Data);
encode_disp('AttachUserRequest',Data) -> 'enc_AttachUserRequest'(Data);
encode_disp('AttachUserConfirm',Data) -> 'enc_AttachUserConfirm'(Data);
encode_disp('DetachUserRequest',Data) -> 'enc_DetachUserRequest'(Data);
encode_disp('DetachUserIndication',Data) -> 'enc_DetachUserIndication'(Data);
encode_disp('ChannelJoinRequest',Data) -> 'enc_ChannelJoinRequest'(Data);
encode_disp('ChannelJoinConfirm',Data) -> 'enc_ChannelJoinConfirm'(Data);
encode_disp('ChannelLeaveRequest',Data) -> 'enc_ChannelLeaveRequest'(Data);
encode_disp('ChannelConveneRequest',Data) -> 'enc_ChannelConveneRequest'(Data);
encode_disp('ChannelConveneConfirm',Data) -> 'enc_ChannelConveneConfirm'(Data);
encode_disp('ChannelDisbandRequest',Data) -> 'enc_ChannelDisbandRequest'(Data);
encode_disp('ChannelDisbandIndication',Data) -> 'enc_ChannelDisbandIndication'(Data);
encode_disp('ChannelAdmitRequest',Data) -> 'enc_ChannelAdmitRequest'(Data);
encode_disp('ChannelAdmitIndication',Data) -> 'enc_ChannelAdmitIndication'(Data);
encode_disp('ChannelExpelRequest',Data) -> 'enc_ChannelExpelRequest'(Data);
encode_disp('ChannelExpelIndication',Data) -> 'enc_ChannelExpelIndication'(Data);
encode_disp('SendDataRequest',Data) -> 'enc_SendDataRequest'(Data);
encode_disp('SendDataIndication',Data) -> 'enc_SendDataIndication'(Data);
encode_disp('UniformSendDataRequest',Data) -> 'enc_UniformSendDataRequest'(Data);
encode_disp('UniformSendDataIndication',Data) -> 'enc_UniformSendDataIndication'(Data);
encode_disp('TokenGrabRequest',Data) -> 'enc_TokenGrabRequest'(Data);
encode_disp('TokenGrabConfirm',Data) -> 'enc_TokenGrabConfirm'(Data);
encode_disp('TokenInhibitRequest',Data) -> 'enc_TokenInhibitRequest'(Data);
encode_disp('TokenInhibitConfirm',Data) -> 'enc_TokenInhibitConfirm'(Data);
encode_disp('TokenGiveRequest',Data) -> 'enc_TokenGiveRequest'(Data);
encode_disp('TokenGiveIndication',Data) -> 'enc_TokenGiveIndication'(Data);
encode_disp('TokenGiveResponse',Data) -> 'enc_TokenGiveResponse'(Data);
encode_disp('TokenGiveConfirm',Data) -> 'enc_TokenGiveConfirm'(Data);
encode_disp('TokenPleaseRequest',Data) -> 'enc_TokenPleaseRequest'(Data);
encode_disp('TokenPleaseIndication',Data) -> 'enc_TokenPleaseIndication'(Data);
encode_disp('TokenReleaseRequest',Data) -> 'enc_TokenReleaseRequest'(Data);
encode_disp('TokenReleaseConfirm',Data) -> 'enc_TokenReleaseConfirm'(Data);
encode_disp('TokenTestRequest',Data) -> 'enc_TokenTestRequest'(Data);
encode_disp('TokenTestConfirm',Data) -> 'enc_TokenTestConfirm'(Data);
encode_disp('Reason',Data) -> 'enc_Reason'(Data);
encode_disp('Result',Data) -> 'enc_Result'(Data);
encode_disp('Diagnostic',Data) -> 'enc_Diagnostic'(Data);
encode_disp('ConnectMCSPDU',Data) -> 'enc_ConnectMCSPDU'(Data);
encode_disp('DomainMCSPDU',Data) -> 'enc_DomainMCSPDU'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('ChannelId',Data) -> 'dec_ChannelId'(Data,mandatory);
decode_disp('StaticChannelId',Data) -> 'dec_StaticChannelId'(Data,mandatory);
decode_disp('DynamicChannelId',Data) -> 'dec_DynamicChannelId'(Data,mandatory);
decode_disp('UserId',Data) -> 'dec_UserId'(Data,mandatory);
decode_disp('PrivateChannelId',Data) -> 'dec_PrivateChannelId'(Data,mandatory);
decode_disp('AssignedChannelId',Data) -> 'dec_AssignedChannelId'(Data,mandatory);
decode_disp('TokenId',Data) -> 'dec_TokenId'(Data,mandatory);
decode_disp('TokenStatus',Data) -> 'dec_TokenStatus'(Data,mandatory);
decode_disp('DataPriority',Data) -> 'dec_DataPriority'(Data,mandatory);
decode_disp('Segmentation',Data) -> 'dec_Segmentation'(Data,mandatory);
decode_disp('DomainParameters',Data) -> 'dec_DomainParameters'(Data,mandatory);
decode_disp('Connect-Initial',Data) -> 'dec_Connect-Initial'(Data,mandatory);
decode_disp('Connect-Response',Data) -> 'dec_Connect-Response'(Data,mandatory);
decode_disp('Connect-Additional',Data) -> 'dec_Connect-Additional'(Data,mandatory);
decode_disp('Connect-Result',Data) -> 'dec_Connect-Result'(Data,mandatory);
decode_disp('PlumbDomainIndication',Data) -> 'dec_PlumbDomainIndication'(Data,mandatory);
decode_disp('ErectDomainRequest',Data) -> 'dec_ErectDomainRequest'(Data,mandatory);
decode_disp('ChannelAttributes',Data) -> 'dec_ChannelAttributes'(Data,mandatory);
decode_disp('MergeChannelsRequest',Data) -> 'dec_MergeChannelsRequest'(Data,mandatory);
decode_disp('MergeChannelsConfirm',Data) -> 'dec_MergeChannelsConfirm'(Data,mandatory);
decode_disp('PurgeChannelsIndication',Data) -> 'dec_PurgeChannelsIndication'(Data,mandatory);
decode_disp('TokenAttributes',Data) -> 'dec_TokenAttributes'(Data,mandatory);
decode_disp('MergeTokensRequest',Data) -> 'dec_MergeTokensRequest'(Data,mandatory);
decode_disp('MergeTokensConfirm',Data) -> 'dec_MergeTokensConfirm'(Data,mandatory);
decode_disp('PurgeTokensIndication',Data) -> 'dec_PurgeTokensIndication'(Data,mandatory);
decode_disp('DisconnectProviderUltimatum',Data) -> 'dec_DisconnectProviderUltimatum'(Data,mandatory);
decode_disp('RejectMCSPDUUltimatum',Data) -> 'dec_RejectMCSPDUUltimatum'(Data,mandatory);
decode_disp('AttachUserRequest',Data) -> 'dec_AttachUserRequest'(Data,mandatory);
decode_disp('AttachUserConfirm',Data) -> 'dec_AttachUserConfirm'(Data,mandatory);
decode_disp('DetachUserRequest',Data) -> 'dec_DetachUserRequest'(Data,mandatory);
decode_disp('DetachUserIndication',Data) -> 'dec_DetachUserIndication'(Data,mandatory);
decode_disp('ChannelJoinRequest',Data) -> 'dec_ChannelJoinRequest'(Data,mandatory);
decode_disp('ChannelJoinConfirm',Data) -> 'dec_ChannelJoinConfirm'(Data,mandatory);
decode_disp('ChannelLeaveRequest',Data) -> 'dec_ChannelLeaveRequest'(Data,mandatory);
decode_disp('ChannelConveneRequest',Data) -> 'dec_ChannelConveneRequest'(Data,mandatory);
decode_disp('ChannelConveneConfirm',Data) -> 'dec_ChannelConveneConfirm'(Data,mandatory);
decode_disp('ChannelDisbandRequest',Data) -> 'dec_ChannelDisbandRequest'(Data,mandatory);
decode_disp('ChannelDisbandIndication',Data) -> 'dec_ChannelDisbandIndication'(Data,mandatory);
decode_disp('ChannelAdmitRequest',Data) -> 'dec_ChannelAdmitRequest'(Data,mandatory);
decode_disp('ChannelAdmitIndication',Data) -> 'dec_ChannelAdmitIndication'(Data,mandatory);
decode_disp('ChannelExpelRequest',Data) -> 'dec_ChannelExpelRequest'(Data,mandatory);
decode_disp('ChannelExpelIndication',Data) -> 'dec_ChannelExpelIndication'(Data,mandatory);
decode_disp('SendDataRequest',Data) -> 'dec_SendDataRequest'(Data,mandatory);
decode_disp('SendDataIndication',Data) -> 'dec_SendDataIndication'(Data,mandatory);
decode_disp('UniformSendDataRequest',Data) -> 'dec_UniformSendDataRequest'(Data,mandatory);
decode_disp('UniformSendDataIndication',Data) -> 'dec_UniformSendDataIndication'(Data,mandatory);
decode_disp('TokenGrabRequest',Data) -> 'dec_TokenGrabRequest'(Data,mandatory);
decode_disp('TokenGrabConfirm',Data) -> 'dec_TokenGrabConfirm'(Data,mandatory);
decode_disp('TokenInhibitRequest',Data) -> 'dec_TokenInhibitRequest'(Data,mandatory);
decode_disp('TokenInhibitConfirm',Data) -> 'dec_TokenInhibitConfirm'(Data,mandatory);
decode_disp('TokenGiveRequest',Data) -> 'dec_TokenGiveRequest'(Data,mandatory);
decode_disp('TokenGiveIndication',Data) -> 'dec_TokenGiveIndication'(Data,mandatory);
decode_disp('TokenGiveResponse',Data) -> 'dec_TokenGiveResponse'(Data,mandatory);
decode_disp('TokenGiveConfirm',Data) -> 'dec_TokenGiveConfirm'(Data,mandatory);
decode_disp('TokenPleaseRequest',Data) -> 'dec_TokenPleaseRequest'(Data,mandatory);
decode_disp('TokenPleaseIndication',Data) -> 'dec_TokenPleaseIndication'(Data,mandatory);
decode_disp('TokenReleaseRequest',Data) -> 'dec_TokenReleaseRequest'(Data,mandatory);
decode_disp('TokenReleaseConfirm',Data) -> 'dec_TokenReleaseConfirm'(Data,mandatory);
decode_disp('TokenTestRequest',Data) -> 'dec_TokenTestRequest'(Data,mandatory);
decode_disp('TokenTestConfirm',Data) -> 'dec_TokenTestConfirm'(Data,mandatory);
decode_disp('Reason',Data) -> 'dec_Reason'(Data,mandatory);
decode_disp('Result',Data) -> 'dec_Result'(Data,mandatory);
decode_disp('Diagnostic',Data) -> 'dec_Diagnostic'(Data,mandatory);
decode_disp('ConnectMCSPDU',Data) -> 'dec_ConnectMCSPDU'(Data,mandatory);
decode_disp('DomainMCSPDU',Data) -> 'dec_DomainMCSPDU'(Data,mandatory);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).





info() ->
   case ?MODULE:module_info() of
      MI when is_list(MI) ->
         case lists:keysearch(attributes,1,MI) of
            {value,{_,Attributes}} when is_list(Attributes) ->
               case lists:keysearch(asn1_info,1,Attributes) of
                  {value,{_,Info}} when is_list(Info) ->
                     Info;
                  _ ->
                     []
               end;
            _ ->
               []
         end
   end.

'enc_ChannelId'({'ChannelId',Val}) ->
'enc_ChannelId'(Val);

'enc_ChannelId'(Val) ->
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case Val of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
.


'dec_ChannelId'(Bytes,_) ->
  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end.


'enc_StaticChannelId'({'StaticChannelId',Val}) ->
'enc_StaticChannelId'(Val);

'enc_StaticChannelId'(Val) ->
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case Val of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
.


'dec_StaticChannelId'(Bytes,_) ->
  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end.


'enc_DynamicChannelId'({'DynamicChannelId',Val}) ->
'enc_DynamicChannelId'(Val);

'enc_DynamicChannelId'(Val) ->
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case Val of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
.


'dec_DynamicChannelId'(Bytes,_) ->
  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end.


'enc_UserId'({'UserId',Val}) ->
'enc_UserId'(Val);

'enc_UserId'(Val) ->
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case Val of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
.


'dec_UserId'(Bytes,_) ->
  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end.


'enc_PrivateChannelId'({'PrivateChannelId',Val}) ->
'enc_PrivateChannelId'(Val);

'enc_PrivateChannelId'(Val) ->
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case Val of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
.


'dec_PrivateChannelId'(Bytes,_) ->
  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end.


'enc_AssignedChannelId'({'AssignedChannelId',Val}) ->
'enc_AssignedChannelId'(Val);

'enc_AssignedChannelId'(Val) ->
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case Val of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
.


'dec_AssignedChannelId'(Bytes,_) ->
  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end.


'enc_TokenId'({'TokenId',Val}) ->
'enc_TokenId'(Val);

'enc_TokenId'(Val) ->
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
 case Val of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=1 ->
      [20,2,<<(Tmpval1- 1):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
.


'dec_TokenId'(Bytes,_) ->
  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1,Tmpremain1}
  end.


'enc_TokenStatus'({'TokenStatus',Val}) ->
'enc_TokenStatus'(Val);

'enc_TokenStatus'(Val) ->
 case (case Val of notInUse->0;selfGrabbed->1;otherGrabbed->2;selfInhibited->3;otherInhibited->4;selfRecipient->5;selfGiving->6;otherGiving->7;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end) of
    Tmpval2 when Tmpval2=<7,Tmpval2>=0 ->
      [10,3,Tmpval2- 0];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end
.


'dec_TokenStatus'(Bytes,_) ->
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes,3),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{notInUse,Tmpremain1};1->{selfGrabbed,Tmpremain1};2->{otherGrabbed,Tmpremain1};3->{selfInhibited,Tmpremain1};4->{otherInhibited,Tmpremain1};5->{selfRecipient,Tmpremain1};6->{selfGiving,Tmpremain1};7->{otherGiving,Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,[notInUse,selfGrabbed,otherGrabbed,selfInhibited,otherInhibited,selfRecipient,selfGiving,otherGiving]}}}}) end
.


'enc_DataPriority'({'DataPriority',Val}) ->
'enc_DataPriority'(Val);

'enc_DataPriority'(Val) ->
 case (case Val of top->0;high->1;medium->2;low->3;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end) of
    Tmpval2 when Tmpval2=<3,Tmpval2>=0 ->
      [10,2,Tmpval2- 0];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end
.


'dec_DataPriority'(Bytes,_) ->
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes,2),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{top,Tmpremain1};1->{high,Tmpremain1};2->{medium,Tmpremain1};3->{low,Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,[top,high,medium,low]}}}}) end
.


'enc_Segmentation'({'Segmentation',Val}) ->
'enc_Segmentation'(Val);

'enc_Segmentation'(Val) ->
?RT_PER:encode_bit_string(2,Val,[{'begin',0},{'end',1}]).


'dec_Segmentation'(Bytes,_) ->
?RT_PER:decode_bit_string(Bytes,[{'SizeConstraint',2}],[{'begin',0},{'end',1}]).

'enc_DomainParameters'(Val) ->
Val1 = ?RT_PER:list_to_record('DomainParameters', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,'MAX'}}]
  ?RT_PER:encode_integer([{'ValueRange',{0,'MAX'}}],element(2,Val1)),

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,'MAX'}}]
  ?RT_PER:encode_integer([{'ValueRange',{0,'MAX'}}],element(3,Val1)),

%% attribute number 3 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,'MAX'}}]
  ?RT_PER:encode_integer([{'ValueRange',{0,'MAX'}}],element(4,Val1)),

%% attribute number 4 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,'MAX'}}]
  ?RT_PER:encode_integer([{'ValueRange',{0,'MAX'}}],element(5,Val1)),

%% attribute number 5 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,'MAX'}}]
  ?RT_PER:encode_integer([{'ValueRange',{0,'MAX'}}],element(6,Val1)),

%% attribute number 6 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,'MAX'}}]
  ?RT_PER:encode_integer([{'ValueRange',{0,'MAX'}}],element(7,Val1)),

%% attribute number 7 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,'MAX'}}]
  ?RT_PER:encode_integer([{'ValueRange',{0,'MAX'}}],element(8,Val1)),

%% attribute number 8 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,'MAX'}}]
  ?RT_PER:encode_integer([{'ValueRange',{0,'MAX'}}],element(9,Val1))].


'dec_DomainParameters'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = ?RT_PER:decode_semi_constrained_number(Bytes,0),

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = ?RT_PER:decode_semi_constrained_number(Bytes1,0),

%% attribute number 3 with type INTEGER
{Term3,Bytes3} = ?RT_PER:decode_semi_constrained_number(Bytes2,0),

%% attribute number 4 with type INTEGER
{Term4,Bytes4} = ?RT_PER:decode_semi_constrained_number(Bytes3,0),

%% attribute number 5 with type INTEGER
{Term5,Bytes5} = ?RT_PER:decode_semi_constrained_number(Bytes4,0),

%% attribute number 6 with type INTEGER
{Term6,Bytes6} = ?RT_PER:decode_semi_constrained_number(Bytes5,0),

%% attribute number 7 with type INTEGER
{Term7,Bytes7} = ?RT_PER:decode_semi_constrained_number(Bytes6,0),

%% attribute number 8 with type INTEGER
{Term8,Bytes8} = ?RT_PER:decode_semi_constrained_number(Bytes7,0),
{{'DomainParameters',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes8}.

'enc_Connect-Initial'(Val) ->
Val1 = ?RT_PER:list_to_record('Connect-Initial', Val),
[

%% attribute number 1 with type OCTET STRING
  ?RT_PER:encode_octet_string(no,false,element(2,Val1))
,

%% attribute number 2 with type OCTET STRING
  ?RT_PER:encode_octet_string(no,false,element(3,Val1))
,

%% attribute number 3 with type BOOLEAN
case element(4,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(4,Val1)}}})
end,

%% attribute number 4 with type Externaltypereference63MCS-PROTOCOLDomainParameters
'enc_DomainParameters'(element(5,Val1)),

%% attribute number 5 with type Externaltypereference64MCS-PROTOCOLDomainParameters
'enc_DomainParameters'(element(6,Val1)),

%% attribute number 6 with type Externaltypereference65MCS-PROTOCOLDomainParameters
'enc_DomainParameters'(element(7,Val1)),

%% attribute number 7 with type OCTET STRING
  ?RT_PER:encode_octet_string(no,false,element(8,Val1))
].


'dec_Connect-Initial'(Bytes,_) ->

%% attribute number 1 with type OCTET STRING
{Term1,Bytes1} =   ?RT_PER:decode_octet_string(Bytes,no,false)
,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes2} =   ?RT_PER:decode_octet_string(Bytes1,no,false)
,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes3} = ?RT_PER:decode_boolean(Bytes2),

%%  attribute number 4 with type DomainParameters
{Term4,Bytes4} = 'dec_DomainParameters'(Bytes3,telltype),

%%  attribute number 5 with type DomainParameters
{Term5,Bytes5} = 'dec_DomainParameters'(Bytes4,telltype),

%%  attribute number 6 with type DomainParameters
{Term6,Bytes6} = 'dec_DomainParameters'(Bytes5,telltype),

%% attribute number 7 with type OCTET STRING
{Term7,Bytes7} =   ?RT_PER:decode_octet_string(Bytes6,no,false)
,
{{'Connect-Initial',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes7}.

'enc_Connect-Response'(Val) ->
Val1 = ?RT_PER:list_to_record('Connect-Response', Val),
[

%% attribute number 1 with type ENUMERATED
  begin
  Tmpval2=(case element(2,Val1) of 'rt-successful'->0;'rt-domain-merging'->1;'rt-domain-not-hierarchical'->2;'rt-no-such-channel'->3;'rt-no-such-domain'->4;'rt-no-such-user'->5;'rt-not-admitted'->6;'rt-other-user-id'->7;'rt-parameters-unacceptable'->8;'rt-token-not-available'->9;'rt-token-not-possessed'->10;'rt-too-many-channels'->11;'rt-too-many-tokens'->12;'rt-too-many-users'->13;'rt-unspecified-failure'->14;'rt-user-rejected'->15;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end),
  case Tmpval2 of
    Tmpval3 when Tmpval3=<15,Tmpval3>=0 ->
      [10,4,Tmpval3- 0];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,'MAX'}}]
  ?RT_PER:encode_integer([{'ValueRange',{0,'MAX'}}],element(3,Val1)),

%% attribute number 3 with type Externaltypereference75MCS-PROTOCOLDomainParameters
'enc_DomainParameters'(element(4,Val1)),

%% attribute number 4 with type OCTET STRING
  ?RT_PER:encode_octet_string(no,false,element(5,Val1))
].


'dec_Connect-Response'(Bytes,_) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes,4),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{'rt-successful',Tmpremain1};1->{'rt-domain-merging',Tmpremain1};2->{'rt-domain-not-hierarchical',Tmpremain1};3->{'rt-no-such-channel',Tmpremain1};4->{'rt-no-such-domain',Tmpremain1};5->{'rt-no-such-user',Tmpremain1};6->{'rt-not-admitted',Tmpremain1};7->{'rt-other-user-id',Tmpremain1};8->{'rt-parameters-unacceptable',Tmpremain1};9->{'rt-token-not-available',Tmpremain1};10->{'rt-token-not-possessed',Tmpremain1};11->{'rt-too-many-channels',Tmpremain1};12->{'rt-too-many-tokens',Tmpremain1};13->{'rt-too-many-users',Tmpremain1};14->{'rt-unspecified-failure',Tmpremain1};15->{'rt-user-rejected',Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,['rt-successful','rt-domain-merging','rt-domain-not-hierarchical','rt-no-such-channel','rt-no-such-domain','rt-no-such-user','rt-not-admitted','rt-other-user-id','rt-parameters-unacceptable','rt-token-not-available','rt-token-not-possessed','rt-too-many-channels','rt-too-many-tokens','rt-too-many-users','rt-unspecified-failure','rt-user-rejected']}}}}) end
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = ?RT_PER:decode_semi_constrained_number(Bytes1,0),

%%  attribute number 3 with type DomainParameters
{Term3,Bytes3} = 'dec_DomainParameters'(Bytes2,telltype),

%% attribute number 4 with type OCTET STRING
{Term4,Bytes4} =   ?RT_PER:decode_octet_string(Bytes3,no,false)
,
{{'Connect-Response',Term1,Term2,Term3,Term4},Bytes4}.

'enc_Connect-Additional'(Val) ->
Val1 = ?RT_PER:list_to_record('Connect-Additional', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,'MAX'}}]
  ?RT_PER:encode_integer([{'ValueRange',{0,'MAX'}}],element(2,Val1)),

%% attribute number 2 with type ENUMERATED
  begin
  Tmpval2=(case element(3,Val1) of top->0;high->1;medium->2;low->3;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end),
  case Tmpval2 of
    Tmpval3 when Tmpval3=<3,Tmpval3>=0 ->
      [10,2,Tmpval3- 0];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end].


'dec_Connect-Additional'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = ?RT_PER:decode_semi_constrained_number(Bytes,0),

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} =   begin
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes1,2),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{top,Tmpremain1};1->{high,Tmpremain1};2->{medium,Tmpremain1};3->{low,Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,[top,high,medium,low]}}}}) end
  end,
{{'Connect-Additional',Term1,Term2},Bytes2}.

'enc_Connect-Result'(Val) ->
Val1 = ?RT_PER:list_to_record('Connect-Result', Val),
[

%% attribute number 1 with type ENUMERATED
  begin
  Tmpval2=(case element(2,Val1) of 'rt-successful'->0;'rt-domain-merging'->1;'rt-domain-not-hierarchical'->2;'rt-no-such-channel'->3;'rt-no-such-domain'->4;'rt-no-such-user'->5;'rt-not-admitted'->6;'rt-other-user-id'->7;'rt-parameters-unacceptable'->8;'rt-token-not-available'->9;'rt-token-not-possessed'->10;'rt-too-many-channels'->11;'rt-too-many-tokens'->12;'rt-too-many-users'->13;'rt-unspecified-failure'->14;'rt-user-rejected'->15;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end),
  case Tmpval2 of
    Tmpval3 when Tmpval3=<15,Tmpval3>=0 ->
      [10,4,Tmpval3- 0];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end].


'dec_Connect-Result'(Bytes,_) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes,4),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{'rt-successful',Tmpremain1};1->{'rt-domain-merging',Tmpremain1};2->{'rt-domain-not-hierarchical',Tmpremain1};3->{'rt-no-such-channel',Tmpremain1};4->{'rt-no-such-domain',Tmpremain1};5->{'rt-no-such-user',Tmpremain1};6->{'rt-not-admitted',Tmpremain1};7->{'rt-other-user-id',Tmpremain1};8->{'rt-parameters-unacceptable',Tmpremain1};9->{'rt-token-not-available',Tmpremain1};10->{'rt-token-not-possessed',Tmpremain1};11->{'rt-too-many-channels',Tmpremain1};12->{'rt-too-many-tokens',Tmpremain1};13->{'rt-too-many-users',Tmpremain1};14->{'rt-unspecified-failure',Tmpremain1};15->{'rt-user-rejected',Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,['rt-successful','rt-domain-merging','rt-domain-not-hierarchical','rt-no-such-channel','rt-no-such-domain','rt-no-such-user','rt-not-admitted','rt-other-user-id','rt-parameters-unacceptable','rt-token-not-available','rt-token-not-possessed','rt-too-many-channels','rt-too-many-tokens','rt-too-many-users','rt-unspecified-failure','rt-user-rejected']}}}}) end
  end,
{{'Connect-Result',Term1},Bytes1}.

'enc_PlumbDomainIndication'(Val) ->
Val1 = ?RT_PER:list_to_record('PlumbDomainIndication', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,'MAX'}}]
  ?RT_PER:encode_integer([{'ValueRange',{0,'MAX'}}],element(2,Val1))].


'dec_PlumbDomainIndication'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = ?RT_PER:decode_semi_constrained_number(Bytes,0),
{{'PlumbDomainIndication',Term1},Bytes1}.

'enc_ErectDomainRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('ErectDomainRequest', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,'MAX'}}]
  ?RT_PER:encode_integer([{'ValueRange',{0,'MAX'}}],element(2,Val1)),

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,'MAX'}}]
  ?RT_PER:encode_integer([{'ValueRange',{0,'MAX'}}],element(3,Val1))].


'dec_ErectDomainRequest'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = ?RT_PER:decode_semi_constrained_number(Bytes,0),

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = ?RT_PER:decode_semi_constrained_number(Bytes1,0),
{{'ErectDomainRequest',Term1,Term2},Bytes2}.


'enc_ChannelAttributes'({'ChannelAttributes',Val}) ->
'enc_ChannelAttributes'(Val);

'enc_ChannelAttributes'(Val) ->
[
?RT_PER:set_choice(element(1,Val),[static,userId,private,assigned], 4),
case element(1,Val) of
static ->
'enc_ChannelAttributes_static'(element(2,Val));
userId ->
'enc_ChannelAttributes_userId'(element(2,Val));
private ->
'enc_ChannelAttributes_private'(element(2,Val));
assigned ->
'enc_ChannelAttributes_assigned'(element(2,Val))
end
].
'enc_ChannelAttributes_static'(Val) ->
Val1 = ?RT_PER:list_to_record('ChannelAttributes_static', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end].

'dec_ChannelAttributes_static'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,
{{'ChannelAttributes_static',Term1},Bytes1}.

'enc_ChannelAttributes_userId'(Val) ->
Val1 = ?RT_PER:list_to_record('ChannelAttributes_userId', Val),
[

%% attribute number 1 with type BOOLEAN
case element(2,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(2,Val1)}}})
end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(3,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end].

'dec_ChannelAttributes_userId'(Bytes,_) ->

%% attribute number 1 with type BOOLEAN
{Term1,Bytes1} = ?RT_PER:decode_boolean(Bytes),

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm1+0,Tmpremain1}
  end,
{{'ChannelAttributes_userId',Term1,Term2},Bytes2}.

'enc_ChannelAttributes_private'(Val) ->
Val1 = ?RT_PER:list_to_record('ChannelAttributes_private', Val),
[

%% attribute number 1 with type BOOLEAN
case element(2,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(2,Val1)}}})
end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(3,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 3 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval3=element(4,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=0 ->
      [20,2,<<(Tmpval4- 0):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end,

%% attribute number 4 with type SET OF
'enc_ChannelAttributes_private_admitted'(element(5,Val1))].

'enc_ChannelAttributes_private_admitted'({'ChannelAttributes_private_admitted',Val}) ->
'enc_ChannelAttributes_private_admitted'(Val);

'enc_ChannelAttributes_private_admitted'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_ChannelAttributes_private_admitted_components'(Val, [])
].
'enc_ChannelAttributes_private_admitted_components'([], Acc) -> lists:reverse(Acc);

'enc_ChannelAttributes_private_admitted_components'([H|T], Acc) ->
'enc_ChannelAttributes_private_admitted_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_ChannelAttributes_private_admitted'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_ChannelAttributes_private_admitted_components'(Num, Bytes1, telltype, []).
'dec_ChannelAttributes_private_admitted_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ChannelAttributes_private_admitted_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,
   'dec_ChannelAttributes_private_admitted_components'(Num-1, Remain, telltype, [Term|Acc]).

'dec_ChannelAttributes_private'(Bytes,_) ->

%% attribute number 1 with type BOOLEAN
{Term1,Bytes1} = ?RT_PER:decode_boolean(Bytes),

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm2+0,Tmpremain2}
  end,

%% attribute number 4 with type SET OF
{Term4,Bytes4} = 'dec_ChannelAttributes_private_admitted'(Bytes3, telltype),
{{'ChannelAttributes_private',Term1,Term2,Term3,Term4},Bytes4}.

'enc_ChannelAttributes_assigned'(Val) ->
Val1 = ?RT_PER:list_to_record('ChannelAttributes_assigned', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end].

'dec_ChannelAttributes_assigned'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,
{{'ChannelAttributes_assigned',Term1},Bytes1}.



'dec_ChannelAttributes'(Bytes,_) ->
{Choice,Bytes1} = ?RT_PER:getchoice(Bytes,4, 0),
{Cname,{Val,NewBytes}} = case Choice of
0 -> {static,
'dec_ChannelAttributes_static'(Bytes1, telltype)};
1 -> {userId,
'dec_ChannelAttributes_userId'(Bytes1, telltype)};
2 -> {private,
'dec_ChannelAttributes_private'(Bytes1, telltype)};
3 -> {assigned,
'dec_ChannelAttributes_assigned'(Bytes1, telltype)}
end,

{{Cname,Val},NewBytes}.
'enc_MergeChannelsRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('MergeChannelsRequest', Val),
[

%% attribute number 1 with type SET OF
'enc_MergeChannelsRequest_mergeChannels'(element(2,Val1)),

%% attribute number 2 with type SET OF
'enc_MergeChannelsRequest_purgeChannelIds'(element(3,Val1))].

'enc_MergeChannelsRequest_mergeChannels'({'MergeChannelsRequest_mergeChannels',Val}) ->
'enc_MergeChannelsRequest_mergeChannels'(Val);

'enc_MergeChannelsRequest_mergeChannels'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_MergeChannelsRequest_mergeChannels_components'(Val, [])
].
'enc_MergeChannelsRequest_mergeChannels_components'([], Acc) -> lists:reverse(Acc);

'enc_MergeChannelsRequest_mergeChannels_components'([H|T], Acc) ->
'enc_MergeChannelsRequest_mergeChannels_components'(T, ['enc_ChannelAttributes'(H)

 | Acc]).

'dec_MergeChannelsRequest_mergeChannels'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_MergeChannelsRequest_mergeChannels_components'(Num, Bytes1, telltype, []).
'dec_MergeChannelsRequest_mergeChannels_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_MergeChannelsRequest_mergeChannels_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_ChannelAttributes'(Bytes,telltype),
   'dec_MergeChannelsRequest_mergeChannels_components'(Num-1, Remain, telltype, [Term|Acc]).

'enc_MergeChannelsRequest_purgeChannelIds'({'MergeChannelsRequest_purgeChannelIds',Val}) ->
'enc_MergeChannelsRequest_purgeChannelIds'(Val);

'enc_MergeChannelsRequest_purgeChannelIds'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_MergeChannelsRequest_purgeChannelIds_components'(Val, [])
].
'enc_MergeChannelsRequest_purgeChannelIds_components'([], Acc) -> lists:reverse(Acc);

'enc_MergeChannelsRequest_purgeChannelIds_components'([H|T], Acc) ->
'enc_MergeChannelsRequest_purgeChannelIds_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_MergeChannelsRequest_purgeChannelIds'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_MergeChannelsRequest_purgeChannelIds_components'(Num, Bytes1, telltype, []).
'dec_MergeChannelsRequest_purgeChannelIds_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_MergeChannelsRequest_purgeChannelIds_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,
   'dec_MergeChannelsRequest_purgeChannelIds_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_MergeChannelsRequest'(Bytes,_) ->

%% attribute number 1 with type SET OF
{Term1,Bytes1} = 'dec_MergeChannelsRequest_mergeChannels'(Bytes, telltype),

%% attribute number 2 with type SET OF
{Term2,Bytes2} = 'dec_MergeChannelsRequest_purgeChannelIds'(Bytes1, telltype),
{{'MergeChannelsRequest',Term1,Term2},Bytes2}.

'enc_MergeChannelsConfirm'(Val) ->
Val1 = ?RT_PER:list_to_record('MergeChannelsConfirm', Val),
[

%% attribute number 1 with type SET OF
'enc_MergeChannelsConfirm_mergeChannels'(element(2,Val1)),

%% attribute number 2 with type SET OF
'enc_MergeChannelsConfirm_purgeChannelIds'(element(3,Val1))].

'enc_MergeChannelsConfirm_mergeChannels'({'MergeChannelsConfirm_mergeChannels',Val}) ->
'enc_MergeChannelsConfirm_mergeChannels'(Val);

'enc_MergeChannelsConfirm_mergeChannels'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_MergeChannelsConfirm_mergeChannels_components'(Val, [])
].
'enc_MergeChannelsConfirm_mergeChannels_components'([], Acc) -> lists:reverse(Acc);

'enc_MergeChannelsConfirm_mergeChannels_components'([H|T], Acc) ->
'enc_MergeChannelsConfirm_mergeChannels_components'(T, ['enc_ChannelAttributes'(H)

 | Acc]).

'dec_MergeChannelsConfirm_mergeChannels'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_MergeChannelsConfirm_mergeChannels_components'(Num, Bytes1, telltype, []).
'dec_MergeChannelsConfirm_mergeChannels_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_MergeChannelsConfirm_mergeChannels_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_ChannelAttributes'(Bytes,telltype),
   'dec_MergeChannelsConfirm_mergeChannels_components'(Num-1, Remain, telltype, [Term|Acc]).

'enc_MergeChannelsConfirm_purgeChannelIds'({'MergeChannelsConfirm_purgeChannelIds',Val}) ->
'enc_MergeChannelsConfirm_purgeChannelIds'(Val);

'enc_MergeChannelsConfirm_purgeChannelIds'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_MergeChannelsConfirm_purgeChannelIds_components'(Val, [])
].
'enc_MergeChannelsConfirm_purgeChannelIds_components'([], Acc) -> lists:reverse(Acc);

'enc_MergeChannelsConfirm_purgeChannelIds_components'([H|T], Acc) ->
'enc_MergeChannelsConfirm_purgeChannelIds_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_MergeChannelsConfirm_purgeChannelIds'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_MergeChannelsConfirm_purgeChannelIds_components'(Num, Bytes1, telltype, []).
'dec_MergeChannelsConfirm_purgeChannelIds_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_MergeChannelsConfirm_purgeChannelIds_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,
   'dec_MergeChannelsConfirm_purgeChannelIds_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_MergeChannelsConfirm'(Bytes,_) ->

%% attribute number 1 with type SET OF
{Term1,Bytes1} = 'dec_MergeChannelsConfirm_mergeChannels'(Bytes, telltype),

%% attribute number 2 with type SET OF
{Term2,Bytes2} = 'dec_MergeChannelsConfirm_purgeChannelIds'(Bytes1, telltype),
{{'MergeChannelsConfirm',Term1,Term2},Bytes2}.

'enc_PurgeChannelsIndication'(Val) ->
Val1 = ?RT_PER:list_to_record('PurgeChannelsIndication', Val),
[

%% attribute number 1 with type SET OF
'enc_PurgeChannelsIndication_detachUserIds'(element(2,Val1)),

%% attribute number 2 with type SET OF
'enc_PurgeChannelsIndication_purgeChannelIds'(element(3,Val1))].

'enc_PurgeChannelsIndication_detachUserIds'({'PurgeChannelsIndication_detachUserIds',Val}) ->
'enc_PurgeChannelsIndication_detachUserIds'(Val);

'enc_PurgeChannelsIndication_detachUserIds'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_PurgeChannelsIndication_detachUserIds_components'(Val, [])
].
'enc_PurgeChannelsIndication_detachUserIds_components'([], Acc) -> lists:reverse(Acc);

'enc_PurgeChannelsIndication_detachUserIds_components'([H|T], Acc) ->
'enc_PurgeChannelsIndication_detachUserIds_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_PurgeChannelsIndication_detachUserIds'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_PurgeChannelsIndication_detachUserIds_components'(Num, Bytes1, telltype, []).
'dec_PurgeChannelsIndication_detachUserIds_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_PurgeChannelsIndication_detachUserIds_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,
   'dec_PurgeChannelsIndication_detachUserIds_components'(Num-1, Remain, telltype, [Term|Acc]).

'enc_PurgeChannelsIndication_purgeChannelIds'({'PurgeChannelsIndication_purgeChannelIds',Val}) ->
'enc_PurgeChannelsIndication_purgeChannelIds'(Val);

'enc_PurgeChannelsIndication_purgeChannelIds'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_PurgeChannelsIndication_purgeChannelIds_components'(Val, [])
].
'enc_PurgeChannelsIndication_purgeChannelIds_components'([], Acc) -> lists:reverse(Acc);

'enc_PurgeChannelsIndication_purgeChannelIds_components'([H|T], Acc) ->
'enc_PurgeChannelsIndication_purgeChannelIds_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_PurgeChannelsIndication_purgeChannelIds'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_PurgeChannelsIndication_purgeChannelIds_components'(Num, Bytes1, telltype, []).
'dec_PurgeChannelsIndication_purgeChannelIds_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_PurgeChannelsIndication_purgeChannelIds_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,
   'dec_PurgeChannelsIndication_purgeChannelIds_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_PurgeChannelsIndication'(Bytes,_) ->

%% attribute number 1 with type SET OF
{Term1,Bytes1} = 'dec_PurgeChannelsIndication_detachUserIds'(Bytes, telltype),

%% attribute number 2 with type SET OF
{Term2,Bytes2} = 'dec_PurgeChannelsIndication_purgeChannelIds'(Bytes1, telltype),
{{'PurgeChannelsIndication',Term1,Term2},Bytes2}.


'enc_TokenAttributes'({'TokenAttributes',Val}) ->
'enc_TokenAttributes'(Val);

'enc_TokenAttributes'(Val) ->
[
?RT_PER:set_choice(element(1,Val),[grabbed,inhibited,giving,ungivable,given], 5),
case element(1,Val) of
grabbed ->
'enc_TokenAttributes_grabbed'(element(2,Val));
inhibited ->
'enc_TokenAttributes_inhibited'(element(2,Val));
giving ->
'enc_TokenAttributes_giving'(element(2,Val));
ungivable ->
'enc_TokenAttributes_ungivable'(element(2,Val));
given ->
'enc_TokenAttributes_given'(element(2,Val))
end
].
'enc_TokenAttributes_grabbed'(Val) ->
Val1 = ?RT_PER:list_to_record('TokenAttributes_grabbed', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=1 ->
      [20,2,<<(Tmpval2- 1):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=0 ->
      [20,2,<<(Tmpval4- 0):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end].

'dec_TokenAttributes_grabbed'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+0,Tmpremain2}
  end,
{{'TokenAttributes_grabbed',Term1,Term2},Bytes2}.

'enc_TokenAttributes_inhibited'(Val) ->
Val1 = ?RT_PER:list_to_record('TokenAttributes_inhibited', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=1 ->
      [20,2,<<(Tmpval2- 1):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type SET OF
'enc_TokenAttributes_inhibited_inhibitors'(element(3,Val1))].

'enc_TokenAttributes_inhibited_inhibitors'({'TokenAttributes_inhibited_inhibitors',Val}) ->
'enc_TokenAttributes_inhibited_inhibitors'(Val);

'enc_TokenAttributes_inhibited_inhibitors'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_TokenAttributes_inhibited_inhibitors_components'(Val, [])
].
'enc_TokenAttributes_inhibited_inhibitors_components'([], Acc) -> lists:reverse(Acc);

'enc_TokenAttributes_inhibited_inhibitors_components'([H|T], Acc) ->
'enc_TokenAttributes_inhibited_inhibitors_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_TokenAttributes_inhibited_inhibitors'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_TokenAttributes_inhibited_inhibitors_components'(Num, Bytes1, telltype, []).
'dec_TokenAttributes_inhibited_inhibitors_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_TokenAttributes_inhibited_inhibitors_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,
   'dec_TokenAttributes_inhibited_inhibitors_components'(Num-1, Remain, telltype, [Term|Acc]).

'dec_TokenAttributes_inhibited'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1,Tmpremain1}
  end,

%% attribute number 2 with type SET OF
{Term2,Bytes2} = 'dec_TokenAttributes_inhibited_inhibitors'(Bytes1, telltype),
{{'TokenAttributes_inhibited',Term1,Term2},Bytes2}.

'enc_TokenAttributes_giving'(Val) ->
Val1 = ?RT_PER:list_to_record('TokenAttributes_giving', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=1 ->
      [20,2,<<(Tmpval2- 1):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=0 ->
      [20,2,<<(Tmpval4- 0):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end,

%% attribute number 3 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval5=element(4,Val1),
  case Tmpval5 of
    Tmpval6 when Tmpval6=<65535,Tmpval6>=0 ->
      [20,2,<<(Tmpval6- 0):16>>];
    Tmpval6 ->
      exit({error,{value_out_of_bounds,Tmpval6}})
  end

  end].

'dec_TokenAttributes_giving'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+0,Tmpremain2}
  end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} =   begin
    {Tmpterm3,Tmpremain3}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm3+0,Tmpremain3}
  end,
{{'TokenAttributes_giving',Term1,Term2,Term3},Bytes3}.

'enc_TokenAttributes_ungivable'(Val) ->
Val1 = ?RT_PER:list_to_record('TokenAttributes_ungivable', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=1 ->
      [20,2,<<(Tmpval2- 1):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=0 ->
      [20,2,<<(Tmpval4- 0):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end].

'dec_TokenAttributes_ungivable'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+0,Tmpremain2}
  end,
{{'TokenAttributes_ungivable',Term1,Term2},Bytes2}.

'enc_TokenAttributes_given'(Val) ->
Val1 = ?RT_PER:list_to_record('TokenAttributes_given', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=1 ->
      [20,2,<<(Tmpval2- 1):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=0 ->
      [20,2,<<(Tmpval4- 0):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end].

'dec_TokenAttributes_given'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+0,Tmpremain2}
  end,
{{'TokenAttributes_given',Term1,Term2},Bytes2}.



'dec_TokenAttributes'(Bytes,_) ->
{Choice,Bytes1} = ?RT_PER:getchoice(Bytes,5, 0),
{Cname,{Val,NewBytes}} = case Choice of
0 -> {grabbed,
'dec_TokenAttributes_grabbed'(Bytes1, telltype)};
1 -> {inhibited,
'dec_TokenAttributes_inhibited'(Bytes1, telltype)};
2 -> {giving,
'dec_TokenAttributes_giving'(Bytes1, telltype)};
3 -> {ungivable,
'dec_TokenAttributes_ungivable'(Bytes1, telltype)};
4 -> {given,
'dec_TokenAttributes_given'(Bytes1, telltype)}
end,

{{Cname,Val},NewBytes}.
'enc_MergeTokensRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('MergeTokensRequest', Val),
[

%% attribute number 1 with type SET OF
'enc_MergeTokensRequest_mergeTokens'(element(2,Val1)),

%% attribute number 2 with type SET OF
'enc_MergeTokensRequest_purgeTokenIds'(element(3,Val1))].

'enc_MergeTokensRequest_mergeTokens'({'MergeTokensRequest_mergeTokens',Val}) ->
'enc_MergeTokensRequest_mergeTokens'(Val);

'enc_MergeTokensRequest_mergeTokens'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_MergeTokensRequest_mergeTokens_components'(Val, [])
].
'enc_MergeTokensRequest_mergeTokens_components'([], Acc) -> lists:reverse(Acc);

'enc_MergeTokensRequest_mergeTokens_components'([H|T], Acc) ->
'enc_MergeTokensRequest_mergeTokens_components'(T, ['enc_TokenAttributes'(H)

 | Acc]).

'dec_MergeTokensRequest_mergeTokens'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_MergeTokensRequest_mergeTokens_components'(Num, Bytes1, telltype, []).
'dec_MergeTokensRequest_mergeTokens_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_MergeTokensRequest_mergeTokens_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_TokenAttributes'(Bytes,telltype),
   'dec_MergeTokensRequest_mergeTokens_components'(Num-1, Remain, telltype, [Term|Acc]).

'enc_MergeTokensRequest_purgeTokenIds'({'MergeTokensRequest_purgeTokenIds',Val}) ->
'enc_MergeTokensRequest_purgeTokenIds'(Val);

'enc_MergeTokensRequest_purgeTokenIds'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_MergeTokensRequest_purgeTokenIds_components'(Val, [])
].
'enc_MergeTokensRequest_purgeTokenIds_components'([], Acc) -> lists:reverse(Acc);

'enc_MergeTokensRequest_purgeTokenIds_components'([H|T], Acc) ->
'enc_MergeTokensRequest_purgeTokenIds_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=1 ->
      [20,2,<<(Tmpval1- 1):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_MergeTokensRequest_purgeTokenIds'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_MergeTokensRequest_purgeTokenIds_components'(Num, Bytes1, telltype, []).
'dec_MergeTokensRequest_purgeTokenIds_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_MergeTokensRequest_purgeTokenIds_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1,Tmpremain1}
  end,
   'dec_MergeTokensRequest_purgeTokenIds_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_MergeTokensRequest'(Bytes,_) ->

%% attribute number 1 with type SET OF
{Term1,Bytes1} = 'dec_MergeTokensRequest_mergeTokens'(Bytes, telltype),

%% attribute number 2 with type SET OF
{Term2,Bytes2} = 'dec_MergeTokensRequest_purgeTokenIds'(Bytes1, telltype),
{{'MergeTokensRequest',Term1,Term2},Bytes2}.

'enc_MergeTokensConfirm'(Val) ->
Val1 = ?RT_PER:list_to_record('MergeTokensConfirm', Val),
[

%% attribute number 1 with type SET OF
'enc_MergeTokensConfirm_mergeTokens'(element(2,Val1)),

%% attribute number 2 with type SET OF
'enc_MergeTokensConfirm_purgeTokenIds'(element(3,Val1))].

'enc_MergeTokensConfirm_mergeTokens'({'MergeTokensConfirm_mergeTokens',Val}) ->
'enc_MergeTokensConfirm_mergeTokens'(Val);

'enc_MergeTokensConfirm_mergeTokens'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_MergeTokensConfirm_mergeTokens_components'(Val, [])
].
'enc_MergeTokensConfirm_mergeTokens_components'([], Acc) -> lists:reverse(Acc);

'enc_MergeTokensConfirm_mergeTokens_components'([H|T], Acc) ->
'enc_MergeTokensConfirm_mergeTokens_components'(T, ['enc_TokenAttributes'(H)

 | Acc]).

'dec_MergeTokensConfirm_mergeTokens'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_MergeTokensConfirm_mergeTokens_components'(Num, Bytes1, telltype, []).
'dec_MergeTokensConfirm_mergeTokens_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_MergeTokensConfirm_mergeTokens_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_TokenAttributes'(Bytes,telltype),
   'dec_MergeTokensConfirm_mergeTokens_components'(Num-1, Remain, telltype, [Term|Acc]).

'enc_MergeTokensConfirm_purgeTokenIds'({'MergeTokensConfirm_purgeTokenIds',Val}) ->
'enc_MergeTokensConfirm_purgeTokenIds'(Val);

'enc_MergeTokensConfirm_purgeTokenIds'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_MergeTokensConfirm_purgeTokenIds_components'(Val, [])
].
'enc_MergeTokensConfirm_purgeTokenIds_components'([], Acc) -> lists:reverse(Acc);

'enc_MergeTokensConfirm_purgeTokenIds_components'([H|T], Acc) ->
'enc_MergeTokensConfirm_purgeTokenIds_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=1 ->
      [20,2,<<(Tmpval1- 1):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_MergeTokensConfirm_purgeTokenIds'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_MergeTokensConfirm_purgeTokenIds_components'(Num, Bytes1, telltype, []).
'dec_MergeTokensConfirm_purgeTokenIds_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_MergeTokensConfirm_purgeTokenIds_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1,Tmpremain1}
  end,
   'dec_MergeTokensConfirm_purgeTokenIds_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_MergeTokensConfirm'(Bytes,_) ->

%% attribute number 1 with type SET OF
{Term1,Bytes1} = 'dec_MergeTokensConfirm_mergeTokens'(Bytes, telltype),

%% attribute number 2 with type SET OF
{Term2,Bytes2} = 'dec_MergeTokensConfirm_purgeTokenIds'(Bytes1, telltype),
{{'MergeTokensConfirm',Term1,Term2},Bytes2}.

'enc_PurgeTokensIndication'(Val) ->
Val1 = ?RT_PER:list_to_record('PurgeTokensIndication', Val),
[

%% attribute number 1 with type SET OF
'enc_PurgeTokensIndication_purgeTokenIds'(element(2,Val1))].

'enc_PurgeTokensIndication_purgeTokenIds'({'PurgeTokensIndication_purgeTokenIds',Val}) ->
'enc_PurgeTokensIndication_purgeTokenIds'(Val);

'enc_PurgeTokensIndication_purgeTokenIds'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_PurgeTokensIndication_purgeTokenIds_components'(Val, [])
].
'enc_PurgeTokensIndication_purgeTokenIds_components'([], Acc) -> lists:reverse(Acc);

'enc_PurgeTokensIndication_purgeTokenIds_components'([H|T], Acc) ->
'enc_PurgeTokensIndication_purgeTokenIds_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=1 ->
      [20,2,<<(Tmpval1- 1):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_PurgeTokensIndication_purgeTokenIds'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_PurgeTokensIndication_purgeTokenIds_components'(Num, Bytes1, telltype, []).
'dec_PurgeTokensIndication_purgeTokenIds_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_PurgeTokensIndication_purgeTokenIds_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1,Tmpremain1}
  end,
   'dec_PurgeTokensIndication_purgeTokenIds_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_PurgeTokensIndication'(Bytes,_) ->

%% attribute number 1 with type SET OF
{Term1,Bytes1} = 'dec_PurgeTokensIndication_purgeTokenIds'(Bytes, telltype),
{{'PurgeTokensIndication',Term1},Bytes1}.

'enc_DisconnectProviderUltimatum'(Val) ->
Val1 = ?RT_PER:list_to_record('DisconnectProviderUltimatum', Val),
[

%% attribute number 1 with type ENUMERATED
  begin
  Tmpval2=(case element(2,Val1) of 'rn-domain-disconnected'->0;'rn-provider-initiated'->1;'rn-token-purged'->2;'rn-user-requested'->3;'rn-channel-purged'->4;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end),
  case Tmpval2 of
    Tmpval3 when Tmpval3=<4,Tmpval3>=0 ->
      [10,3,Tmpval3- 0];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end].


'dec_DisconnectProviderUltimatum'(Bytes,_) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes,3),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{'rn-domain-disconnected',Tmpremain1};1->{'rn-provider-initiated',Tmpremain1};2->{'rn-token-purged',Tmpremain1};3->{'rn-user-requested',Tmpremain1};4->{'rn-channel-purged',Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,['rn-domain-disconnected','rn-provider-initiated','rn-token-purged','rn-user-requested','rn-channel-purged']}}}}) end
  end,
{{'DisconnectProviderUltimatum',Term1},Bytes1}.

'enc_RejectMCSPDUUltimatum'(Val) ->
Val1 = ?RT_PER:list_to_record('RejectMCSPDUUltimatum', Val),
[

%% attribute number 1 with type ENUMERATED
  begin
  Tmpval2=(case element(2,Val1) of 'dc-inconsistent-merge'->0;'dc-forbidden-PDU-downward'->1;'dc-forbidden-PDU-upward'->2;'dc-invalid-BER-encoding'->3;'dc-invalid-PER-encoding'->4;'dc-misrouted-user'->5;'dc-unrequested-confirm'->6;'dc-wrong-transport-priority'->7;'dc-channel-id-conflict'->8;'dc-token-id-conflict'->9;'dc-not-user-id-channel'->10;'dc-too-many-channels'->11;'dc-too-many-tokens'->12;'dc-too-many-users'->13;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end),
  case Tmpval2 of
    Tmpval3 when Tmpval3=<13,Tmpval3>=0 ->
      [10,4,Tmpval3- 0];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end,

%% attribute number 2 with type OCTET STRING
  ?RT_PER:encode_octet_string(no,false,element(3,Val1))
].


'dec_RejectMCSPDUUltimatum'(Bytes,_) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes,4),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{'dc-inconsistent-merge',Tmpremain1};1->{'dc-forbidden-PDU-downward',Tmpremain1};2->{'dc-forbidden-PDU-upward',Tmpremain1};3->{'dc-invalid-BER-encoding',Tmpremain1};4->{'dc-invalid-PER-encoding',Tmpremain1};5->{'dc-misrouted-user',Tmpremain1};6->{'dc-unrequested-confirm',Tmpremain1};7->{'dc-wrong-transport-priority',Tmpremain1};8->{'dc-channel-id-conflict',Tmpremain1};9->{'dc-token-id-conflict',Tmpremain1};10->{'dc-not-user-id-channel',Tmpremain1};11->{'dc-too-many-channels',Tmpremain1};12->{'dc-too-many-tokens',Tmpremain1};13->{'dc-too-many-users',Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,['dc-inconsistent-merge','dc-forbidden-PDU-downward','dc-forbidden-PDU-upward','dc-invalid-BER-encoding','dc-invalid-PER-encoding','dc-misrouted-user','dc-unrequested-confirm','dc-wrong-transport-priority','dc-channel-id-conflict','dc-token-id-conflict','dc-not-user-id-channel','dc-too-many-channels','dc-too-many-tokens','dc-too-many-users']}}}}) end
  end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes2} =   ?RT_PER:decode_octet_string(Bytes1,no,false)
,
{{'RejectMCSPDUUltimatum',Term1,Term2},Bytes2}.

'enc_AttachUserRequest'(Val) ->
%%Variable setting just to eliminate compiler warning for unused vars!
_Val = Val,
[
].


'dec_AttachUserRequest'(Bytes,_) ->
{{'AttachUserRequest'},Bytes}.

'enc_AttachUserConfirm'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
Opt,

%% attribute number 1 with type ENUMERATED
  begin
  Tmpval2=(case element(2,Val1) of 'rt-successful'->0;'rt-domain-merging'->1;'rt-domain-not-hierarchical'->2;'rt-no-such-channel'->3;'rt-no-such-domain'->4;'rt-no-such-user'->5;'rt-not-admitted'->6;'rt-other-user-id'->7;'rt-parameters-unacceptable'->8;'rt-token-not-available'->9;'rt-token-not-possessed'->10;'rt-too-many-channels'->11;'rt-too-many-tokens'->12;'rt-too-many-users'->13;'rt-unspecified-failure'->14;'rt-user-rejected'->15;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end),
  case Tmpval2 of
    Tmpval3 when Tmpval3=<15,Tmpval3>=0 ->
      [10,4,Tmpval3- 0];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end,
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval4 ->

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  case Tmpval4 of
    Tmpval5 when Tmpval5=<65535,Tmpval5>=0 ->
      [20,2,<<(Tmpval5- 0):16>>];
    Tmpval5 ->
      exit({error,{value_out_of_bounds,Tmpval5}})
  end

  end
end].


'dec_AttachUserConfirm'(Bytes,_) ->
{Opt,Bytes1} = ?RT_PER:getoptionals2(Bytes,1),
%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} =   begin
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes1,4),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{'rt-successful',Tmpremain1};1->{'rt-domain-merging',Tmpremain1};2->{'rt-domain-not-hierarchical',Tmpremain1};3->{'rt-no-such-channel',Tmpremain1};4->{'rt-no-such-domain',Tmpremain1};5->{'rt-no-such-user',Tmpremain1};6->{'rt-not-admitted',Tmpremain1};7->{'rt-other-user-id',Tmpremain1};8->{'rt-parameters-unacceptable',Tmpremain1};9->{'rt-token-not-available',Tmpremain1};10->{'rt-token-not-possessed',Tmpremain1};11->{'rt-too-many-channels',Tmpremain1};12->{'rt-too-many-tokens',Tmpremain1};13->{'rt-too-many-users',Tmpremain1};14->{'rt-unspecified-failure',Tmpremain1};15->{'rt-user-rejected',Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,['rt-successful','rt-domain-merging','rt-domain-not-hierarchical','rt-no-such-channel','rt-no-such-domain','rt-no-such-user','rt-not-admitted','rt-other-user-id','rt-parameters-unacceptable','rt-token-not-available','rt-token-not-possessed','rt-too-many-channels','rt-too-many-tokens','rt-too-many-users','rt-unspecified-failure','rt-user-rejected']}}}}) end
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = case Opt band (1 bsl 0) of
  _Opt2 when _Opt2 > 0 ->  begin
    {Tmpterm3,Tmpremain3}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm3+0,Tmpremain3}
  end;
0 ->{asn1_NOVALUE,Bytes2}

end,
{{'AttachUserConfirm',Term1,Term2},Bytes3}.

'enc_DetachUserRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('DetachUserRequest', Val),
[

%% attribute number 1 with type ENUMERATED
  begin
  Tmpval2=(case element(2,Val1) of 'rn-domain-disconnected'->0;'rn-provider-initiated'->1;'rn-token-purged'->2;'rn-user-requested'->3;'rn-channel-purged'->4;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end),
  case Tmpval2 of
    Tmpval3 when Tmpval3=<4,Tmpval3>=0 ->
      [10,3,Tmpval3- 0];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end,

%% attribute number 2 with type SET OF
'enc_DetachUserRequest_userIds'(element(3,Val1))].

'enc_DetachUserRequest_userIds'({'DetachUserRequest_userIds',Val}) ->
'enc_DetachUserRequest_userIds'(Val);

'enc_DetachUserRequest_userIds'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_DetachUserRequest_userIds_components'(Val, [])
].
'enc_DetachUserRequest_userIds_components'([], Acc) -> lists:reverse(Acc);

'enc_DetachUserRequest_userIds_components'([H|T], Acc) ->
'enc_DetachUserRequest_userIds_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_DetachUserRequest_userIds'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_DetachUserRequest_userIds_components'(Num, Bytes1, telltype, []).
'dec_DetachUserRequest_userIds_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_DetachUserRequest_userIds_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,
   'dec_DetachUserRequest_userIds_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_DetachUserRequest'(Bytes,_) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes,3),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{'rn-domain-disconnected',Tmpremain1};1->{'rn-provider-initiated',Tmpremain1};2->{'rn-token-purged',Tmpremain1};3->{'rn-user-requested',Tmpremain1};4->{'rn-channel-purged',Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,['rn-domain-disconnected','rn-provider-initiated','rn-token-purged','rn-user-requested','rn-channel-purged']}}}}) end
  end,

%% attribute number 2 with type SET OF
{Term2,Bytes2} = 'dec_DetachUserRequest_userIds'(Bytes1, telltype),
{{'DetachUserRequest',Term1,Term2},Bytes2}.

'enc_DetachUserIndication'(Val) ->
Val1 = ?RT_PER:list_to_record('DetachUserIndication', Val),
[

%% attribute number 1 with type ENUMERATED
  begin
  Tmpval2=(case element(2,Val1) of 'rn-domain-disconnected'->0;'rn-provider-initiated'->1;'rn-token-purged'->2;'rn-user-requested'->3;'rn-channel-purged'->4;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end),
  case Tmpval2 of
    Tmpval3 when Tmpval3=<4,Tmpval3>=0 ->
      [10,3,Tmpval3- 0];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end,

%% attribute number 2 with type SET OF
'enc_DetachUserIndication_userIds'(element(3,Val1))].

'enc_DetachUserIndication_userIds'({'DetachUserIndication_userIds',Val}) ->
'enc_DetachUserIndication_userIds'(Val);

'enc_DetachUserIndication_userIds'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_DetachUserIndication_userIds_components'(Val, [])
].
'enc_DetachUserIndication_userIds_components'([], Acc) -> lists:reverse(Acc);

'enc_DetachUserIndication_userIds_components'([H|T], Acc) ->
'enc_DetachUserIndication_userIds_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_DetachUserIndication_userIds'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_DetachUserIndication_userIds_components'(Num, Bytes1, telltype, []).
'dec_DetachUserIndication_userIds_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_DetachUserIndication_userIds_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,
   'dec_DetachUserIndication_userIds_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_DetachUserIndication'(Bytes,_) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes,3),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{'rn-domain-disconnected',Tmpremain1};1->{'rn-provider-initiated',Tmpremain1};2->{'rn-token-purged',Tmpremain1};3->{'rn-user-requested',Tmpremain1};4->{'rn-channel-purged',Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,['rn-domain-disconnected','rn-provider-initiated','rn-token-purged','rn-user-requested','rn-channel-purged']}}}}) end
  end,

%% attribute number 2 with type SET OF
{Term2,Bytes2} = 'dec_DetachUserIndication_userIds'(Bytes1, telltype),
{{'DetachUserIndication',Term1,Term2},Bytes2}.

'enc_ChannelJoinRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('ChannelJoinRequest', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=0 ->
      [20,2,<<(Tmpval4- 0):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end].


'dec_ChannelJoinRequest'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+0,Tmpremain2}
  end,
{{'ChannelJoinRequest',Term1,Term2},Bytes2}.

'enc_ChannelJoinConfirm'(Val) ->
Fixopt1 = case element(5,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
Opt,

%% attribute number 1 with type ENUMERATED
  begin
  Tmpval2=(case element(2,Val1) of 'rt-successful'->0;'rt-domain-merging'->1;'rt-domain-not-hierarchical'->2;'rt-no-such-channel'->3;'rt-no-such-domain'->4;'rt-no-such-user'->5;'rt-not-admitted'->6;'rt-other-user-id'->7;'rt-parameters-unacceptable'->8;'rt-token-not-available'->9;'rt-token-not-possessed'->10;'rt-too-many-channels'->11;'rt-too-many-tokens'->12;'rt-too-many-users'->13;'rt-unspecified-failure'->14;'rt-user-rejected'->15;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end),
  case Tmpval2 of
    Tmpval3 when Tmpval3=<15,Tmpval3>=0 ->
      [10,4,Tmpval3- 0];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval4=element(3,Val1),
  case Tmpval4 of
    Tmpval5 when Tmpval5=<65535,Tmpval5>=0 ->
      [20,2,<<(Tmpval5- 0):16>>];
    Tmpval5 ->
      exit({error,{value_out_of_bounds,Tmpval5}})
  end

  end,

%% attribute number 3 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval6=element(4,Val1),
  case Tmpval6 of
    Tmpval7 when Tmpval7=<65535,Tmpval7>=0 ->
      [20,2,<<(Tmpval7- 0):16>>];
    Tmpval7 ->
      exit({error,{value_out_of_bounds,Tmpval7}})
  end

  end,
case element(5,Val1) of
asn1_NOVALUE -> [];
Tmpval8 ->

%% attribute number 4 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  case Tmpval8 of
    Tmpval9 when Tmpval9=<65535,Tmpval9>=0 ->
      [20,2,<<(Tmpval9- 0):16>>];
    Tmpval9 ->
      exit({error,{value_out_of_bounds,Tmpval9}})
  end

  end
end].


'dec_ChannelJoinConfirm'(Bytes,_) ->
{Opt,Bytes1} = ?RT_PER:getoptionals2(Bytes,1),
%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} =   begin
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes1,4),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{'rt-successful',Tmpremain1};1->{'rt-domain-merging',Tmpremain1};2->{'rt-domain-not-hierarchical',Tmpremain1};3->{'rt-no-such-channel',Tmpremain1};4->{'rt-no-such-domain',Tmpremain1};5->{'rt-no-such-user',Tmpremain1};6->{'rt-not-admitted',Tmpremain1};7->{'rt-other-user-id',Tmpremain1};8->{'rt-parameters-unacceptable',Tmpremain1};9->{'rt-token-not-available',Tmpremain1};10->{'rt-token-not-possessed',Tmpremain1};11->{'rt-too-many-channels',Tmpremain1};12->{'rt-too-many-tokens',Tmpremain1};13->{'rt-too-many-users',Tmpremain1};14->{'rt-unspecified-failure',Tmpremain1};15->{'rt-user-rejected',Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,['rt-successful','rt-domain-merging','rt-domain-not-hierarchical','rt-no-such-channel','rt-no-such-domain','rt-no-such-user','rt-not-admitted','rt-other-user-id','rt-parameters-unacceptable','rt-token-not-available','rt-token-not-possessed','rt-too-many-channels','rt-too-many-tokens','rt-too-many-users','rt-unspecified-failure','rt-user-rejected']}}}}) end
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} =   begin
    {Tmpterm3,Tmpremain3}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm3+0,Tmpremain3}
  end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} =   begin
    {Tmpterm4,Tmpremain4}=?RT_PER:getoctets(Bytes3,2),
    {Tmpterm4+0,Tmpremain4}
  end,

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = case Opt band (1 bsl 0) of
  _Opt4 when _Opt4 > 0 ->  begin
    {Tmpterm5,Tmpremain5}=?RT_PER:getoctets(Bytes4,2),
    {Tmpterm5+0,Tmpremain5}
  end;
0 ->{asn1_NOVALUE,Bytes4}

end,
{{'ChannelJoinConfirm',Term1,Term2,Term3,Term4},Bytes5}.

'enc_ChannelLeaveRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('ChannelLeaveRequest', Val),
[

%% attribute number 1 with type SET OF
'enc_ChannelLeaveRequest_channelIds'(element(2,Val1))].

'enc_ChannelLeaveRequest_channelIds'({'ChannelLeaveRequest_channelIds',Val}) ->
'enc_ChannelLeaveRequest_channelIds'(Val);

'enc_ChannelLeaveRequest_channelIds'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_ChannelLeaveRequest_channelIds_components'(Val, [])
].
'enc_ChannelLeaveRequest_channelIds_components'([], Acc) -> lists:reverse(Acc);

'enc_ChannelLeaveRequest_channelIds_components'([H|T], Acc) ->
'enc_ChannelLeaveRequest_channelIds_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_ChannelLeaveRequest_channelIds'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_ChannelLeaveRequest_channelIds_components'(Num, Bytes1, telltype, []).
'dec_ChannelLeaveRequest_channelIds_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ChannelLeaveRequest_channelIds_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,
   'dec_ChannelLeaveRequest_channelIds_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_ChannelLeaveRequest'(Bytes,_) ->

%% attribute number 1 with type SET OF
{Term1,Bytes1} = 'dec_ChannelLeaveRequest_channelIds'(Bytes, telltype),
{{'ChannelLeaveRequest',Term1},Bytes1}.

'enc_ChannelConveneRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('ChannelConveneRequest', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end].


'dec_ChannelConveneRequest'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,
{{'ChannelConveneRequest',Term1},Bytes1}.

'enc_ChannelConveneConfirm'(Val) ->
Fixopt1 = case element(4,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
Opt,

%% attribute number 1 with type ENUMERATED
  begin
  Tmpval2=(case element(2,Val1) of 'rt-successful'->0;'rt-domain-merging'->1;'rt-domain-not-hierarchical'->2;'rt-no-such-channel'->3;'rt-no-such-domain'->4;'rt-no-such-user'->5;'rt-not-admitted'->6;'rt-other-user-id'->7;'rt-parameters-unacceptable'->8;'rt-token-not-available'->9;'rt-token-not-possessed'->10;'rt-too-many-channels'->11;'rt-too-many-tokens'->12;'rt-too-many-users'->13;'rt-unspecified-failure'->14;'rt-user-rejected'->15;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end),
  case Tmpval2 of
    Tmpval3 when Tmpval3=<15,Tmpval3>=0 ->
      [10,4,Tmpval3- 0];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval4=element(3,Val1),
  case Tmpval4 of
    Tmpval5 when Tmpval5=<65535,Tmpval5>=0 ->
      [20,2,<<(Tmpval5- 0):16>>];
    Tmpval5 ->
      exit({error,{value_out_of_bounds,Tmpval5}})
  end

  end,
case element(4,Val1) of
asn1_NOVALUE -> [];
Tmpval6 ->

%% attribute number 3 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  case Tmpval6 of
    Tmpval7 when Tmpval7=<65535,Tmpval7>=0 ->
      [20,2,<<(Tmpval7- 0):16>>];
    Tmpval7 ->
      exit({error,{value_out_of_bounds,Tmpval7}})
  end

  end
end].


'dec_ChannelConveneConfirm'(Bytes,_) ->
{Opt,Bytes1} = ?RT_PER:getoptionals2(Bytes,1),
%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} =   begin
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes1,4),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{'rt-successful',Tmpremain1};1->{'rt-domain-merging',Tmpremain1};2->{'rt-domain-not-hierarchical',Tmpremain1};3->{'rt-no-such-channel',Tmpremain1};4->{'rt-no-such-domain',Tmpremain1};5->{'rt-no-such-user',Tmpremain1};6->{'rt-not-admitted',Tmpremain1};7->{'rt-other-user-id',Tmpremain1};8->{'rt-parameters-unacceptable',Tmpremain1};9->{'rt-token-not-available',Tmpremain1};10->{'rt-token-not-possessed',Tmpremain1};11->{'rt-too-many-channels',Tmpremain1};12->{'rt-too-many-tokens',Tmpremain1};13->{'rt-too-many-users',Tmpremain1};14->{'rt-unspecified-failure',Tmpremain1};15->{'rt-user-rejected',Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,['rt-successful','rt-domain-merging','rt-domain-not-hierarchical','rt-no-such-channel','rt-no-such-domain','rt-no-such-user','rt-not-admitted','rt-other-user-id','rt-parameters-unacceptable','rt-token-not-available','rt-token-not-possessed','rt-too-many-channels','rt-too-many-tokens','rt-too-many-users','rt-unspecified-failure','rt-user-rejected']}}}}) end
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} =   begin
    {Tmpterm3,Tmpremain3}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm3+0,Tmpremain3}
  end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = case Opt band (1 bsl 0) of
  _Opt3 when _Opt3 > 0 ->  begin
    {Tmpterm4,Tmpremain4}=?RT_PER:getoctets(Bytes3,2),
    {Tmpterm4+0,Tmpremain4}
  end;
0 ->{asn1_NOVALUE,Bytes3}

end,
{{'ChannelConveneConfirm',Term1,Term2,Term3},Bytes4}.

'enc_ChannelDisbandRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('ChannelDisbandRequest', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=0 ->
      [20,2,<<(Tmpval4- 0):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end].


'dec_ChannelDisbandRequest'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+0,Tmpremain2}
  end,
{{'ChannelDisbandRequest',Term1,Term2},Bytes2}.

'enc_ChannelDisbandIndication'(Val) ->
Val1 = ?RT_PER:list_to_record('ChannelDisbandIndication', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end].


'dec_ChannelDisbandIndication'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,
{{'ChannelDisbandIndication',Term1},Bytes1}.

'enc_ChannelAdmitRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('ChannelAdmitRequest', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=0 ->
      [20,2,<<(Tmpval4- 0):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end,

%% attribute number 3 with type SET OF
'enc_ChannelAdmitRequest_userIds'(element(4,Val1))].

'enc_ChannelAdmitRequest_userIds'({'ChannelAdmitRequest_userIds',Val}) ->
'enc_ChannelAdmitRequest_userIds'(Val);

'enc_ChannelAdmitRequest_userIds'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_ChannelAdmitRequest_userIds_components'(Val, [])
].
'enc_ChannelAdmitRequest_userIds_components'([], Acc) -> lists:reverse(Acc);

'enc_ChannelAdmitRequest_userIds_components'([H|T], Acc) ->
'enc_ChannelAdmitRequest_userIds_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_ChannelAdmitRequest_userIds'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_ChannelAdmitRequest_userIds_components'(Num, Bytes1, telltype, []).
'dec_ChannelAdmitRequest_userIds_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ChannelAdmitRequest_userIds_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,
   'dec_ChannelAdmitRequest_userIds_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_ChannelAdmitRequest'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+0,Tmpremain2}
  end,

%% attribute number 3 with type SET OF
{Term3,Bytes3} = 'dec_ChannelAdmitRequest_userIds'(Bytes2, telltype),
{{'ChannelAdmitRequest',Term1,Term2,Term3},Bytes3}.

'enc_ChannelAdmitIndication'(Val) ->
Val1 = ?RT_PER:list_to_record('ChannelAdmitIndication', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=0 ->
      [20,2,<<(Tmpval4- 0):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end,

%% attribute number 3 with type SET OF
'enc_ChannelAdmitIndication_userIds'(element(4,Val1))].

'enc_ChannelAdmitIndication_userIds'({'ChannelAdmitIndication_userIds',Val}) ->
'enc_ChannelAdmitIndication_userIds'(Val);

'enc_ChannelAdmitIndication_userIds'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_ChannelAdmitIndication_userIds_components'(Val, [])
].
'enc_ChannelAdmitIndication_userIds_components'([], Acc) -> lists:reverse(Acc);

'enc_ChannelAdmitIndication_userIds_components'([H|T], Acc) ->
'enc_ChannelAdmitIndication_userIds_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_ChannelAdmitIndication_userIds'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_ChannelAdmitIndication_userIds_components'(Num, Bytes1, telltype, []).
'dec_ChannelAdmitIndication_userIds_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ChannelAdmitIndication_userIds_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,
   'dec_ChannelAdmitIndication_userIds_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_ChannelAdmitIndication'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+0,Tmpremain2}
  end,

%% attribute number 3 with type SET OF
{Term3,Bytes3} = 'dec_ChannelAdmitIndication_userIds'(Bytes2, telltype),
{{'ChannelAdmitIndication',Term1,Term2,Term3},Bytes3}.

'enc_ChannelExpelRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('ChannelExpelRequest', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=0 ->
      [20,2,<<(Tmpval4- 0):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end,

%% attribute number 3 with type SET OF
'enc_ChannelExpelRequest_userIds'(element(4,Val1))].

'enc_ChannelExpelRequest_userIds'({'ChannelExpelRequest_userIds',Val}) ->
'enc_ChannelExpelRequest_userIds'(Val);

'enc_ChannelExpelRequest_userIds'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_ChannelExpelRequest_userIds_components'(Val, [])
].
'enc_ChannelExpelRequest_userIds_components'([], Acc) -> lists:reverse(Acc);

'enc_ChannelExpelRequest_userIds_components'([H|T], Acc) ->
'enc_ChannelExpelRequest_userIds_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_ChannelExpelRequest_userIds'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_ChannelExpelRequest_userIds_components'(Num, Bytes1, telltype, []).
'dec_ChannelExpelRequest_userIds_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ChannelExpelRequest_userIds_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,
   'dec_ChannelExpelRequest_userIds_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_ChannelExpelRequest'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+0,Tmpremain2}
  end,

%% attribute number 3 with type SET OF
{Term3,Bytes3} = 'dec_ChannelExpelRequest_userIds'(Bytes2, telltype),
{{'ChannelExpelRequest',Term1,Term2,Term3},Bytes3}.

'enc_ChannelExpelIndication'(Val) ->
Val1 = ?RT_PER:list_to_record('ChannelExpelIndication', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type SET OF
'enc_ChannelExpelIndication_userIds'(element(3,Val1))].

'enc_ChannelExpelIndication_userIds'({'ChannelExpelIndication_userIds',Val}) ->
'enc_ChannelExpelIndication_userIds'(Val);

'enc_ChannelExpelIndication_userIds'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_ChannelExpelIndication_userIds_components'(Val, [])
].
'enc_ChannelExpelIndication_userIds_components'([], Acc) -> lists:reverse(Acc);

'enc_ChannelExpelIndication_userIds_components'([H|T], Acc) ->
'enc_ChannelExpelIndication_userIds_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_ChannelExpelIndication_userIds'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_ChannelExpelIndication_userIds_components'(Num, Bytes1, telltype, []).
'dec_ChannelExpelIndication_userIds_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ChannelExpelIndication_userIds_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,
   'dec_ChannelExpelIndication_userIds_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_ChannelExpelIndication'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type SET OF
{Term2,Bytes2} = 'dec_ChannelExpelIndication_userIds'(Bytes1, telltype),
{{'ChannelExpelIndication',Term1,Term2},Bytes2}.

'enc_SendDataRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('SendDataRequest', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=0 ->
      [20,2,<<(Tmpval4- 0):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end,

%% attribute number 3 with type ENUMERATED
  begin
  Tmpval6=(case element(4,Val1) of top->0;high->1;medium->2;low->3;Tmpval5 ->exit({error,{asn1,{enumerated,Tmpval5}}}) end),
  case Tmpval6 of
    Tmpval7 when Tmpval7=<3,Tmpval7>=0 ->
      [10,2,Tmpval7- 0];
    Tmpval7 ->
      exit({error,{value_out_of_bounds,Tmpval7}})
  end

  end,

%% attribute number 4 with type BIT STRING
?RT_PER:encode_bit_string(2,element(5,Val1),[{'begin',0},{'end',1}]),

%% attribute number 5 with type OCTET STRING
  ?RT_PER:encode_octet_string(no,false,element(6,Val1))
].


'dec_SendDataRequest'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+0,Tmpremain2}
  end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes3} =   begin
    {Tmpterm3,Tmpremain3} =
  begin
    {Tmpterm4,Tmpremain4}=?RT_PER:getbits(Bytes2,2),
    {Tmpterm4+0,Tmpremain4}
  end,
    case Tmpterm3 of 0->{top,Tmpremain3};1->{high,Tmpremain3};2->{medium,Tmpremain3};3->{low,Tmpremain3};_->exit({error,{asn1,{decode_enumerated,{Tmpterm3,[top,high,medium,low]}}}}) end
  end,

%% attribute number 4 with type BIT STRING
{Term4,Bytes4} = ?RT_PER:decode_bit_string(Bytes3,[{'SizeConstraint',2}],[{'begin',0},{'end',1}]),

%% attribute number 5 with type OCTET STRING
{Term5,Bytes5} =   ?RT_PER:decode_octet_string(Bytes4,no,false)
,
{{'SendDataRequest',Term1,Term2,Term3,Term4,Term5},Bytes5}.

'enc_SendDataIndication'(Val) ->
Val1 = ?RT_PER:list_to_record('SendDataIndication', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=0 ->
      [20,2,<<(Tmpval4- 0):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end,

%% attribute number 3 with type ENUMERATED
  begin
  Tmpval6=(case element(4,Val1) of top->0;high->1;medium->2;low->3;Tmpval5 ->exit({error,{asn1,{enumerated,Tmpval5}}}) end),
  case Tmpval6 of
    Tmpval7 when Tmpval7=<3,Tmpval7>=0 ->
      [10,2,Tmpval7- 0];
    Tmpval7 ->
      exit({error,{value_out_of_bounds,Tmpval7}})
  end

  end,

%% attribute number 4 with type BIT STRING
?RT_PER:encode_bit_string(2,element(5,Val1),[{'begin',0},{'end',1}]),

%% attribute number 5 with type OCTET STRING
  ?RT_PER:encode_octet_string(no,false,element(6,Val1))
].


'dec_SendDataIndication'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+0,Tmpremain2}
  end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes3} =   begin
    {Tmpterm3,Tmpremain3} =
  begin
    {Tmpterm4,Tmpremain4}=?RT_PER:getbits(Bytes2,2),
    {Tmpterm4+0,Tmpremain4}
  end,
    case Tmpterm3 of 0->{top,Tmpremain3};1->{high,Tmpremain3};2->{medium,Tmpremain3};3->{low,Tmpremain3};_->exit({error,{asn1,{decode_enumerated,{Tmpterm3,[top,high,medium,low]}}}}) end
  end,

%% attribute number 4 with type BIT STRING
{Term4,Bytes4} = ?RT_PER:decode_bit_string(Bytes3,[{'SizeConstraint',2}],[{'begin',0},{'end',1}]),

%% attribute number 5 with type OCTET STRING
{Term5,Bytes5} =   ?RT_PER:decode_octet_string(Bytes4,no,false)
,
{{'SendDataIndication',Term1,Term2,Term3,Term4,Term5},Bytes5}.

'enc_UniformSendDataRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('UniformSendDataRequest', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=0 ->
      [20,2,<<(Tmpval4- 0):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end,

%% attribute number 3 with type ENUMERATED
  begin
  Tmpval6=(case element(4,Val1) of top->0;high->1;medium->2;low->3;Tmpval5 ->exit({error,{asn1,{enumerated,Tmpval5}}}) end),
  case Tmpval6 of
    Tmpval7 when Tmpval7=<3,Tmpval7>=0 ->
      [10,2,Tmpval7- 0];
    Tmpval7 ->
      exit({error,{value_out_of_bounds,Tmpval7}})
  end

  end,

%% attribute number 4 with type BIT STRING
?RT_PER:encode_bit_string(2,element(5,Val1),[{'begin',0},{'end',1}]),

%% attribute number 5 with type OCTET STRING
  ?RT_PER:encode_octet_string(no,false,element(6,Val1))
].


'dec_UniformSendDataRequest'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+0,Tmpremain2}
  end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes3} =   begin
    {Tmpterm3,Tmpremain3} =
  begin
    {Tmpterm4,Tmpremain4}=?RT_PER:getbits(Bytes2,2),
    {Tmpterm4+0,Tmpremain4}
  end,
    case Tmpterm3 of 0->{top,Tmpremain3};1->{high,Tmpremain3};2->{medium,Tmpremain3};3->{low,Tmpremain3};_->exit({error,{asn1,{decode_enumerated,{Tmpterm3,[top,high,medium,low]}}}}) end
  end,

%% attribute number 4 with type BIT STRING
{Term4,Bytes4} = ?RT_PER:decode_bit_string(Bytes3,[{'SizeConstraint',2}],[{'begin',0},{'end',1}]),

%% attribute number 5 with type OCTET STRING
{Term5,Bytes5} =   ?RT_PER:decode_octet_string(Bytes4,no,false)
,
{{'UniformSendDataRequest',Term1,Term2,Term3,Term4,Term5},Bytes5}.

'enc_UniformSendDataIndication'(Val) ->
Val1 = ?RT_PER:list_to_record('UniformSendDataIndication', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=0 ->
      [20,2,<<(Tmpval4- 0):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end,

%% attribute number 3 with type ENUMERATED
  begin
  Tmpval6=(case element(4,Val1) of top->0;high->1;medium->2;low->3;Tmpval5 ->exit({error,{asn1,{enumerated,Tmpval5}}}) end),
  case Tmpval6 of
    Tmpval7 when Tmpval7=<3,Tmpval7>=0 ->
      [10,2,Tmpval7- 0];
    Tmpval7 ->
      exit({error,{value_out_of_bounds,Tmpval7}})
  end

  end,

%% attribute number 4 with type BIT STRING
?RT_PER:encode_bit_string(2,element(5,Val1),[{'begin',0},{'end',1}]),

%% attribute number 5 with type OCTET STRING
  ?RT_PER:encode_octet_string(no,false,element(6,Val1))
].


'dec_UniformSendDataIndication'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+0,Tmpremain2}
  end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes3} =   begin
    {Tmpterm3,Tmpremain3} =
  begin
    {Tmpterm4,Tmpremain4}=?RT_PER:getbits(Bytes2,2),
    {Tmpterm4+0,Tmpremain4}
  end,
    case Tmpterm3 of 0->{top,Tmpremain3};1->{high,Tmpremain3};2->{medium,Tmpremain3};3->{low,Tmpremain3};_->exit({error,{asn1,{decode_enumerated,{Tmpterm3,[top,high,medium,low]}}}}) end
  end,

%% attribute number 4 with type BIT STRING
{Term4,Bytes4} = ?RT_PER:decode_bit_string(Bytes3,[{'SizeConstraint',2}],[{'begin',0},{'end',1}]),

%% attribute number 5 with type OCTET STRING
{Term5,Bytes5} =   ?RT_PER:decode_octet_string(Bytes4,no,false)
,
{{'UniformSendDataIndication',Term1,Term2,Term3,Term4,Term5},Bytes5}.

'enc_TokenGrabRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('TokenGrabRequest', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=1 ->
      [20,2,<<(Tmpval4- 1):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end].


'dec_TokenGrabRequest'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+1,Tmpremain2}
  end,
{{'TokenGrabRequest',Term1,Term2},Bytes2}.

'enc_TokenGrabConfirm'(Val) ->
Val1 = ?RT_PER:list_to_record('TokenGrabConfirm', Val),
[

%% attribute number 1 with type ENUMERATED
  begin
  Tmpval2=(case element(2,Val1) of 'rt-successful'->0;'rt-domain-merging'->1;'rt-domain-not-hierarchical'->2;'rt-no-such-channel'->3;'rt-no-such-domain'->4;'rt-no-such-user'->5;'rt-not-admitted'->6;'rt-other-user-id'->7;'rt-parameters-unacceptable'->8;'rt-token-not-available'->9;'rt-token-not-possessed'->10;'rt-too-many-channels'->11;'rt-too-many-tokens'->12;'rt-too-many-users'->13;'rt-unspecified-failure'->14;'rt-user-rejected'->15;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end),
  case Tmpval2 of
    Tmpval3 when Tmpval3=<15,Tmpval3>=0 ->
      [10,4,Tmpval3- 0];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval4=element(3,Val1),
  case Tmpval4 of
    Tmpval5 when Tmpval5=<65535,Tmpval5>=0 ->
      [20,2,<<(Tmpval5- 0):16>>];
    Tmpval5 ->
      exit({error,{value_out_of_bounds,Tmpval5}})
  end

  end,

%% attribute number 3 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
  begin
  Tmpval6=element(4,Val1),
  case Tmpval6 of
    Tmpval7 when Tmpval7=<65535,Tmpval7>=1 ->
      [20,2,<<(Tmpval7- 1):16>>];
    Tmpval7 ->
      exit({error,{value_out_of_bounds,Tmpval7}})
  end

  end,

%% attribute number 4 with type ENUMERATED
  begin
  Tmpval9=(case element(5,Val1) of notInUse->0;selfGrabbed->1;otherGrabbed->2;selfInhibited->3;otherInhibited->4;selfRecipient->5;selfGiving->6;otherGiving->7;Tmpval8 ->exit({error,{asn1,{enumerated,Tmpval8}}}) end),
  case Tmpval9 of
    Tmpval10 when Tmpval10=<7,Tmpval10>=0 ->
      [10,3,Tmpval10- 0];
    Tmpval10 ->
      exit({error,{value_out_of_bounds,Tmpval10}})
  end

  end].


'dec_TokenGrabConfirm'(Bytes,_) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes,4),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{'rt-successful',Tmpremain1};1->{'rt-domain-merging',Tmpremain1};2->{'rt-domain-not-hierarchical',Tmpremain1};3->{'rt-no-such-channel',Tmpremain1};4->{'rt-no-such-domain',Tmpremain1};5->{'rt-no-such-user',Tmpremain1};6->{'rt-not-admitted',Tmpremain1};7->{'rt-other-user-id',Tmpremain1};8->{'rt-parameters-unacceptable',Tmpremain1};9->{'rt-token-not-available',Tmpremain1};10->{'rt-token-not-possessed',Tmpremain1};11->{'rt-too-many-channels',Tmpremain1};12->{'rt-too-many-tokens',Tmpremain1};13->{'rt-too-many-users',Tmpremain1};14->{'rt-unspecified-failure',Tmpremain1};15->{'rt-user-rejected',Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,['rt-successful','rt-domain-merging','rt-domain-not-hierarchical','rt-no-such-channel','rt-no-such-domain','rt-no-such-user','rt-not-admitted','rt-other-user-id','rt-parameters-unacceptable','rt-token-not-available','rt-token-not-possessed','rt-too-many-channels','rt-too-many-tokens','rt-too-many-users','rt-unspecified-failure','rt-user-rejected']}}}}) end
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm3,Tmpremain3}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm3+0,Tmpremain3}
  end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} =   begin
    {Tmpterm4,Tmpremain4}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm4+1,Tmpremain4}
  end,

%% attribute number 4 with type ENUMERATED
{Term4,Bytes4} =   begin
    {Tmpterm5,Tmpremain5} =
  begin
    {Tmpterm6,Tmpremain6}=?RT_PER:getbits(Bytes3,3),
    {Tmpterm6+0,Tmpremain6}
  end,
    case Tmpterm5 of 0->{notInUse,Tmpremain5};1->{selfGrabbed,Tmpremain5};2->{otherGrabbed,Tmpremain5};3->{selfInhibited,Tmpremain5};4->{otherInhibited,Tmpremain5};5->{selfRecipient,Tmpremain5};6->{selfGiving,Tmpremain5};7->{otherGiving,Tmpremain5};_->exit({error,{asn1,{decode_enumerated,{Tmpterm5,[notInUse,selfGrabbed,otherGrabbed,selfInhibited,otherInhibited,selfRecipient,selfGiving,otherGiving]}}}}) end
  end,
{{'TokenGrabConfirm',Term1,Term2,Term3,Term4},Bytes4}.

'enc_TokenInhibitRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('TokenInhibitRequest', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=1 ->
      [20,2,<<(Tmpval4- 1):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end].


'dec_TokenInhibitRequest'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+1,Tmpremain2}
  end,
{{'TokenInhibitRequest',Term1,Term2},Bytes2}.

'enc_TokenInhibitConfirm'(Val) ->
Val1 = ?RT_PER:list_to_record('TokenInhibitConfirm', Val),
[

%% attribute number 1 with type ENUMERATED
  begin
  Tmpval2=(case element(2,Val1) of 'rt-successful'->0;'rt-domain-merging'->1;'rt-domain-not-hierarchical'->2;'rt-no-such-channel'->3;'rt-no-such-domain'->4;'rt-no-such-user'->5;'rt-not-admitted'->6;'rt-other-user-id'->7;'rt-parameters-unacceptable'->8;'rt-token-not-available'->9;'rt-token-not-possessed'->10;'rt-too-many-channels'->11;'rt-too-many-tokens'->12;'rt-too-many-users'->13;'rt-unspecified-failure'->14;'rt-user-rejected'->15;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end),
  case Tmpval2 of
    Tmpval3 when Tmpval3=<15,Tmpval3>=0 ->
      [10,4,Tmpval3- 0];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval4=element(3,Val1),
  case Tmpval4 of
    Tmpval5 when Tmpval5=<65535,Tmpval5>=0 ->
      [20,2,<<(Tmpval5- 0):16>>];
    Tmpval5 ->
      exit({error,{value_out_of_bounds,Tmpval5}})
  end

  end,

%% attribute number 3 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
  begin
  Tmpval6=element(4,Val1),
  case Tmpval6 of
    Tmpval7 when Tmpval7=<65535,Tmpval7>=1 ->
      [20,2,<<(Tmpval7- 1):16>>];
    Tmpval7 ->
      exit({error,{value_out_of_bounds,Tmpval7}})
  end

  end,

%% attribute number 4 with type ENUMERATED
  begin
  Tmpval9=(case element(5,Val1) of notInUse->0;selfGrabbed->1;otherGrabbed->2;selfInhibited->3;otherInhibited->4;selfRecipient->5;selfGiving->6;otherGiving->7;Tmpval8 ->exit({error,{asn1,{enumerated,Tmpval8}}}) end),
  case Tmpval9 of
    Tmpval10 when Tmpval10=<7,Tmpval10>=0 ->
      [10,3,Tmpval10- 0];
    Tmpval10 ->
      exit({error,{value_out_of_bounds,Tmpval10}})
  end

  end].


'dec_TokenInhibitConfirm'(Bytes,_) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes,4),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{'rt-successful',Tmpremain1};1->{'rt-domain-merging',Tmpremain1};2->{'rt-domain-not-hierarchical',Tmpremain1};3->{'rt-no-such-channel',Tmpremain1};4->{'rt-no-such-domain',Tmpremain1};5->{'rt-no-such-user',Tmpremain1};6->{'rt-not-admitted',Tmpremain1};7->{'rt-other-user-id',Tmpremain1};8->{'rt-parameters-unacceptable',Tmpremain1};9->{'rt-token-not-available',Tmpremain1};10->{'rt-token-not-possessed',Tmpremain1};11->{'rt-too-many-channels',Tmpremain1};12->{'rt-too-many-tokens',Tmpremain1};13->{'rt-too-many-users',Tmpremain1};14->{'rt-unspecified-failure',Tmpremain1};15->{'rt-user-rejected',Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,['rt-successful','rt-domain-merging','rt-domain-not-hierarchical','rt-no-such-channel','rt-no-such-domain','rt-no-such-user','rt-not-admitted','rt-other-user-id','rt-parameters-unacceptable','rt-token-not-available','rt-token-not-possessed','rt-too-many-channels','rt-too-many-tokens','rt-too-many-users','rt-unspecified-failure','rt-user-rejected']}}}}) end
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm3,Tmpremain3}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm3+0,Tmpremain3}
  end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} =   begin
    {Tmpterm4,Tmpremain4}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm4+1,Tmpremain4}
  end,

%% attribute number 4 with type ENUMERATED
{Term4,Bytes4} =   begin
    {Tmpterm5,Tmpremain5} =
  begin
    {Tmpterm6,Tmpremain6}=?RT_PER:getbits(Bytes3,3),
    {Tmpterm6+0,Tmpremain6}
  end,
    case Tmpterm5 of 0->{notInUse,Tmpremain5};1->{selfGrabbed,Tmpremain5};2->{otherGrabbed,Tmpremain5};3->{selfInhibited,Tmpremain5};4->{otherInhibited,Tmpremain5};5->{selfRecipient,Tmpremain5};6->{selfGiving,Tmpremain5};7->{otherGiving,Tmpremain5};_->exit({error,{asn1,{decode_enumerated,{Tmpterm5,[notInUse,selfGrabbed,otherGrabbed,selfInhibited,otherInhibited,selfRecipient,selfGiving,otherGiving]}}}}) end
  end,
{{'TokenInhibitConfirm',Term1,Term2,Term3,Term4},Bytes4}.

'enc_TokenGiveRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('TokenGiveRequest', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=1 ->
      [20,2,<<(Tmpval4- 1):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end,

%% attribute number 3 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval5=element(4,Val1),
  case Tmpval5 of
    Tmpval6 when Tmpval6=<65535,Tmpval6>=0 ->
      [20,2,<<(Tmpval6- 0):16>>];
    Tmpval6 ->
      exit({error,{value_out_of_bounds,Tmpval6}})
  end

  end].


'dec_TokenGiveRequest'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+1,Tmpremain2}
  end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} =   begin
    {Tmpterm3,Tmpremain3}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm3+0,Tmpremain3}
  end,
{{'TokenGiveRequest',Term1,Term2,Term3},Bytes3}.

'enc_TokenGiveIndication'(Val) ->
Val1 = ?RT_PER:list_to_record('TokenGiveIndication', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=1 ->
      [20,2,<<(Tmpval4- 1):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end,

%% attribute number 3 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval5=element(4,Val1),
  case Tmpval5 of
    Tmpval6 when Tmpval6=<65535,Tmpval6>=0 ->
      [20,2,<<(Tmpval6- 0):16>>];
    Tmpval6 ->
      exit({error,{value_out_of_bounds,Tmpval6}})
  end

  end].


'dec_TokenGiveIndication'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+1,Tmpremain2}
  end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} =   begin
    {Tmpterm3,Tmpremain3}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm3+0,Tmpremain3}
  end,
{{'TokenGiveIndication',Term1,Term2,Term3},Bytes3}.

'enc_TokenGiveResponse'(Val) ->
Val1 = ?RT_PER:list_to_record('TokenGiveResponse', Val),
[

%% attribute number 1 with type ENUMERATED
  begin
  Tmpval2=(case element(2,Val1) of 'rt-successful'->0;'rt-domain-merging'->1;'rt-domain-not-hierarchical'->2;'rt-no-such-channel'->3;'rt-no-such-domain'->4;'rt-no-such-user'->5;'rt-not-admitted'->6;'rt-other-user-id'->7;'rt-parameters-unacceptable'->8;'rt-token-not-available'->9;'rt-token-not-possessed'->10;'rt-too-many-channels'->11;'rt-too-many-tokens'->12;'rt-too-many-users'->13;'rt-unspecified-failure'->14;'rt-user-rejected'->15;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end),
  case Tmpval2 of
    Tmpval3 when Tmpval3=<15,Tmpval3>=0 ->
      [10,4,Tmpval3- 0];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval4=element(3,Val1),
  case Tmpval4 of
    Tmpval5 when Tmpval5=<65535,Tmpval5>=0 ->
      [20,2,<<(Tmpval5- 0):16>>];
    Tmpval5 ->
      exit({error,{value_out_of_bounds,Tmpval5}})
  end

  end,

%% attribute number 3 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
  begin
  Tmpval6=element(4,Val1),
  case Tmpval6 of
    Tmpval7 when Tmpval7=<65535,Tmpval7>=1 ->
      [20,2,<<(Tmpval7- 1):16>>];
    Tmpval7 ->
      exit({error,{value_out_of_bounds,Tmpval7}})
  end

  end].


'dec_TokenGiveResponse'(Bytes,_) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes,4),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{'rt-successful',Tmpremain1};1->{'rt-domain-merging',Tmpremain1};2->{'rt-domain-not-hierarchical',Tmpremain1};3->{'rt-no-such-channel',Tmpremain1};4->{'rt-no-such-domain',Tmpremain1};5->{'rt-no-such-user',Tmpremain1};6->{'rt-not-admitted',Tmpremain1};7->{'rt-other-user-id',Tmpremain1};8->{'rt-parameters-unacceptable',Tmpremain1};9->{'rt-token-not-available',Tmpremain1};10->{'rt-token-not-possessed',Tmpremain1};11->{'rt-too-many-channels',Tmpremain1};12->{'rt-too-many-tokens',Tmpremain1};13->{'rt-too-many-users',Tmpremain1};14->{'rt-unspecified-failure',Tmpremain1};15->{'rt-user-rejected',Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,['rt-successful','rt-domain-merging','rt-domain-not-hierarchical','rt-no-such-channel','rt-no-such-domain','rt-no-such-user','rt-not-admitted','rt-other-user-id','rt-parameters-unacceptable','rt-token-not-available','rt-token-not-possessed','rt-too-many-channels','rt-too-many-tokens','rt-too-many-users','rt-unspecified-failure','rt-user-rejected']}}}}) end
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm3,Tmpremain3}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm3+0,Tmpremain3}
  end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} =   begin
    {Tmpterm4,Tmpremain4}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm4+1,Tmpremain4}
  end,
{{'TokenGiveResponse',Term1,Term2,Term3},Bytes3}.

'enc_TokenGiveConfirm'(Val) ->
Val1 = ?RT_PER:list_to_record('TokenGiveConfirm', Val),
[

%% attribute number 1 with type ENUMERATED
  begin
  Tmpval2=(case element(2,Val1) of 'rt-successful'->0;'rt-domain-merging'->1;'rt-domain-not-hierarchical'->2;'rt-no-such-channel'->3;'rt-no-such-domain'->4;'rt-no-such-user'->5;'rt-not-admitted'->6;'rt-other-user-id'->7;'rt-parameters-unacceptable'->8;'rt-token-not-available'->9;'rt-token-not-possessed'->10;'rt-too-many-channels'->11;'rt-too-many-tokens'->12;'rt-too-many-users'->13;'rt-unspecified-failure'->14;'rt-user-rejected'->15;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end),
  case Tmpval2 of
    Tmpval3 when Tmpval3=<15,Tmpval3>=0 ->
      [10,4,Tmpval3- 0];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval4=element(3,Val1),
  case Tmpval4 of
    Tmpval5 when Tmpval5=<65535,Tmpval5>=0 ->
      [20,2,<<(Tmpval5- 0):16>>];
    Tmpval5 ->
      exit({error,{value_out_of_bounds,Tmpval5}})
  end

  end,

%% attribute number 3 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
  begin
  Tmpval6=element(4,Val1),
  case Tmpval6 of
    Tmpval7 when Tmpval7=<65535,Tmpval7>=1 ->
      [20,2,<<(Tmpval7- 1):16>>];
    Tmpval7 ->
      exit({error,{value_out_of_bounds,Tmpval7}})
  end

  end,

%% attribute number 4 with type ENUMERATED
  begin
  Tmpval9=(case element(5,Val1) of notInUse->0;selfGrabbed->1;otherGrabbed->2;selfInhibited->3;otherInhibited->4;selfRecipient->5;selfGiving->6;otherGiving->7;Tmpval8 ->exit({error,{asn1,{enumerated,Tmpval8}}}) end),
  case Tmpval9 of
    Tmpval10 when Tmpval10=<7,Tmpval10>=0 ->
      [10,3,Tmpval10- 0];
    Tmpval10 ->
      exit({error,{value_out_of_bounds,Tmpval10}})
  end

  end].


'dec_TokenGiveConfirm'(Bytes,_) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes,4),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{'rt-successful',Tmpremain1};1->{'rt-domain-merging',Tmpremain1};2->{'rt-domain-not-hierarchical',Tmpremain1};3->{'rt-no-such-channel',Tmpremain1};4->{'rt-no-such-domain',Tmpremain1};5->{'rt-no-such-user',Tmpremain1};6->{'rt-not-admitted',Tmpremain1};7->{'rt-other-user-id',Tmpremain1};8->{'rt-parameters-unacceptable',Tmpremain1};9->{'rt-token-not-available',Tmpremain1};10->{'rt-token-not-possessed',Tmpremain1};11->{'rt-too-many-channels',Tmpremain1};12->{'rt-too-many-tokens',Tmpremain1};13->{'rt-too-many-users',Tmpremain1};14->{'rt-unspecified-failure',Tmpremain1};15->{'rt-user-rejected',Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,['rt-successful','rt-domain-merging','rt-domain-not-hierarchical','rt-no-such-channel','rt-no-such-domain','rt-no-such-user','rt-not-admitted','rt-other-user-id','rt-parameters-unacceptable','rt-token-not-available','rt-token-not-possessed','rt-too-many-channels','rt-too-many-tokens','rt-too-many-users','rt-unspecified-failure','rt-user-rejected']}}}}) end
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm3,Tmpremain3}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm3+0,Tmpremain3}
  end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} =   begin
    {Tmpterm4,Tmpremain4}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm4+1,Tmpremain4}
  end,

%% attribute number 4 with type ENUMERATED
{Term4,Bytes4} =   begin
    {Tmpterm5,Tmpremain5} =
  begin
    {Tmpterm6,Tmpremain6}=?RT_PER:getbits(Bytes3,3),
    {Tmpterm6+0,Tmpremain6}
  end,
    case Tmpterm5 of 0->{notInUse,Tmpremain5};1->{selfGrabbed,Tmpremain5};2->{otherGrabbed,Tmpremain5};3->{selfInhibited,Tmpremain5};4->{otherInhibited,Tmpremain5};5->{selfRecipient,Tmpremain5};6->{selfGiving,Tmpremain5};7->{otherGiving,Tmpremain5};_->exit({error,{asn1,{decode_enumerated,{Tmpterm5,[notInUse,selfGrabbed,otherGrabbed,selfInhibited,otherInhibited,selfRecipient,selfGiving,otherGiving]}}}}) end
  end,
{{'TokenGiveConfirm',Term1,Term2,Term3,Term4},Bytes4}.

'enc_TokenPleaseRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('TokenPleaseRequest', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=1 ->
      [20,2,<<(Tmpval4- 1):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end].


'dec_TokenPleaseRequest'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+1,Tmpremain2}
  end,
{{'TokenPleaseRequest',Term1,Term2},Bytes2}.

'enc_TokenPleaseIndication'(Val) ->
Val1 = ?RT_PER:list_to_record('TokenPleaseIndication', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=1 ->
      [20,2,<<(Tmpval4- 1):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end].


'dec_TokenPleaseIndication'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+1,Tmpremain2}
  end,
{{'TokenPleaseIndication',Term1,Term2},Bytes2}.

'enc_TokenReleaseRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('TokenReleaseRequest', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=1 ->
      [20,2,<<(Tmpval4- 1):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end].


'dec_TokenReleaseRequest'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+1,Tmpremain2}
  end,
{{'TokenReleaseRequest',Term1,Term2},Bytes2}.

'enc_TokenReleaseConfirm'(Val) ->
Val1 = ?RT_PER:list_to_record('TokenReleaseConfirm', Val),
[

%% attribute number 1 with type ENUMERATED
  begin
  Tmpval2=(case element(2,Val1) of 'rt-successful'->0;'rt-domain-merging'->1;'rt-domain-not-hierarchical'->2;'rt-no-such-channel'->3;'rt-no-such-domain'->4;'rt-no-such-user'->5;'rt-not-admitted'->6;'rt-other-user-id'->7;'rt-parameters-unacceptable'->8;'rt-token-not-available'->9;'rt-token-not-possessed'->10;'rt-too-many-channels'->11;'rt-too-many-tokens'->12;'rt-too-many-users'->13;'rt-unspecified-failure'->14;'rt-user-rejected'->15;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end),
  case Tmpval2 of
    Tmpval3 when Tmpval3=<15,Tmpval3>=0 ->
      [10,4,Tmpval3- 0];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval4=element(3,Val1),
  case Tmpval4 of
    Tmpval5 when Tmpval5=<65535,Tmpval5>=0 ->
      [20,2,<<(Tmpval5- 0):16>>];
    Tmpval5 ->
      exit({error,{value_out_of_bounds,Tmpval5}})
  end

  end,

%% attribute number 3 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
  begin
  Tmpval6=element(4,Val1),
  case Tmpval6 of
    Tmpval7 when Tmpval7=<65535,Tmpval7>=1 ->
      [20,2,<<(Tmpval7- 1):16>>];
    Tmpval7 ->
      exit({error,{value_out_of_bounds,Tmpval7}})
  end

  end,

%% attribute number 4 with type ENUMERATED
  begin
  Tmpval9=(case element(5,Val1) of notInUse->0;selfGrabbed->1;otherGrabbed->2;selfInhibited->3;otherInhibited->4;selfRecipient->5;selfGiving->6;otherGiving->7;Tmpval8 ->exit({error,{asn1,{enumerated,Tmpval8}}}) end),
  case Tmpval9 of
    Tmpval10 when Tmpval10=<7,Tmpval10>=0 ->
      [10,3,Tmpval10- 0];
    Tmpval10 ->
      exit({error,{value_out_of_bounds,Tmpval10}})
  end

  end].


'dec_TokenReleaseConfirm'(Bytes,_) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes,4),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{'rt-successful',Tmpremain1};1->{'rt-domain-merging',Tmpremain1};2->{'rt-domain-not-hierarchical',Tmpremain1};3->{'rt-no-such-channel',Tmpremain1};4->{'rt-no-such-domain',Tmpremain1};5->{'rt-no-such-user',Tmpremain1};6->{'rt-not-admitted',Tmpremain1};7->{'rt-other-user-id',Tmpremain1};8->{'rt-parameters-unacceptable',Tmpremain1};9->{'rt-token-not-available',Tmpremain1};10->{'rt-token-not-possessed',Tmpremain1};11->{'rt-too-many-channels',Tmpremain1};12->{'rt-too-many-tokens',Tmpremain1};13->{'rt-too-many-users',Tmpremain1};14->{'rt-unspecified-failure',Tmpremain1};15->{'rt-user-rejected',Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,['rt-successful','rt-domain-merging','rt-domain-not-hierarchical','rt-no-such-channel','rt-no-such-domain','rt-no-such-user','rt-not-admitted','rt-other-user-id','rt-parameters-unacceptable','rt-token-not-available','rt-token-not-possessed','rt-too-many-channels','rt-too-many-tokens','rt-too-many-users','rt-unspecified-failure','rt-user-rejected']}}}}) end
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm3,Tmpremain3}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm3+0,Tmpremain3}
  end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} =   begin
    {Tmpterm4,Tmpremain4}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm4+1,Tmpremain4}
  end,

%% attribute number 4 with type ENUMERATED
{Term4,Bytes4} =   begin
    {Tmpterm5,Tmpremain5} =
  begin
    {Tmpterm6,Tmpremain6}=?RT_PER:getbits(Bytes3,3),
    {Tmpterm6+0,Tmpremain6}
  end,
    case Tmpterm5 of 0->{notInUse,Tmpremain5};1->{selfGrabbed,Tmpremain5};2->{otherGrabbed,Tmpremain5};3->{selfInhibited,Tmpremain5};4->{otherInhibited,Tmpremain5};5->{selfRecipient,Tmpremain5};6->{selfGiving,Tmpremain5};7->{otherGiving,Tmpremain5};_->exit({error,{asn1,{decode_enumerated,{Tmpterm5,[notInUse,selfGrabbed,otherGrabbed,selfInhibited,otherInhibited,selfRecipient,selfGiving,otherGiving]}}}}) end
  end,
{{'TokenReleaseConfirm',Term1,Term2,Term3,Term4},Bytes4}.

'enc_TokenTestRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('TokenTestRequest', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=1 ->
      [20,2,<<(Tmpval4- 1):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end].


'dec_TokenTestRequest'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+1,Tmpremain2}
  end,
{{'TokenTestRequest',Term1,Term2},Bytes2}.

'enc_TokenTestConfirm'(Val) ->
Val1 = ?RT_PER:list_to_record('TokenTestConfirm', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=1 ->
      [20,2,<<(Tmpval4- 1):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end,

%% attribute number 3 with type ENUMERATED
  begin
  Tmpval6=(case element(4,Val1) of notInUse->0;selfGrabbed->1;otherGrabbed->2;selfInhibited->3;otherInhibited->4;selfRecipient->5;selfGiving->6;otherGiving->7;Tmpval5 ->exit({error,{asn1,{enumerated,Tmpval5}}}) end),
  case Tmpval6 of
    Tmpval7 when Tmpval7=<7,Tmpval7>=0 ->
      [10,3,Tmpval7- 0];
    Tmpval7 ->
      exit({error,{value_out_of_bounds,Tmpval7}})
  end

  end].


'dec_TokenTestConfirm'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+1,Tmpremain2}
  end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes3} =   begin
    {Tmpterm3,Tmpremain3} =
  begin
    {Tmpterm4,Tmpremain4}=?RT_PER:getbits(Bytes2,3),
    {Tmpterm4+0,Tmpremain4}
  end,
    case Tmpterm3 of 0->{notInUse,Tmpremain3};1->{selfGrabbed,Tmpremain3};2->{otherGrabbed,Tmpremain3};3->{selfInhibited,Tmpremain3};4->{otherInhibited,Tmpremain3};5->{selfRecipient,Tmpremain3};6->{selfGiving,Tmpremain3};7->{otherGiving,Tmpremain3};_->exit({error,{asn1,{decode_enumerated,{Tmpterm3,[notInUse,selfGrabbed,otherGrabbed,selfInhibited,otherInhibited,selfRecipient,selfGiving,otherGiving]}}}}) end
  end,
{{'TokenTestConfirm',Term1,Term2,Term3},Bytes3}.


'enc_Reason'({'Reason',Val}) ->
'enc_Reason'(Val);

'enc_Reason'(Val) ->
 case (case Val of 'rn-domain-disconnected'->0;'rn-provider-initiated'->1;'rn-token-purged'->2;'rn-user-requested'->3;'rn-channel-purged'->4;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end) of
    Tmpval2 when Tmpval2=<4,Tmpval2>=0 ->
      [10,3,Tmpval2- 0];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end
.


'dec_Reason'(Bytes,_) ->
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes,3),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{'rn-domain-disconnected',Tmpremain1};1->{'rn-provider-initiated',Tmpremain1};2->{'rn-token-purged',Tmpremain1};3->{'rn-user-requested',Tmpremain1};4->{'rn-channel-purged',Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,['rn-domain-disconnected','rn-provider-initiated','rn-token-purged','rn-user-requested','rn-channel-purged']}}}}) end
.


'enc_Result'({'Result',Val}) ->
'enc_Result'(Val);

'enc_Result'(Val) ->
 case (case Val of 'rt-successful'->0;'rt-domain-merging'->1;'rt-domain-not-hierarchical'->2;'rt-no-such-channel'->3;'rt-no-such-domain'->4;'rt-no-such-user'->5;'rt-not-admitted'->6;'rt-other-user-id'->7;'rt-parameters-unacceptable'->8;'rt-token-not-available'->9;'rt-token-not-possessed'->10;'rt-too-many-channels'->11;'rt-too-many-tokens'->12;'rt-too-many-users'->13;'rt-unspecified-failure'->14;'rt-user-rejected'->15;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end) of
    Tmpval2 when Tmpval2=<15,Tmpval2>=0 ->
      [10,4,Tmpval2- 0];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end
.


'dec_Result'(Bytes,_) ->
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes,4),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{'rt-successful',Tmpremain1};1->{'rt-domain-merging',Tmpremain1};2->{'rt-domain-not-hierarchical',Tmpremain1};3->{'rt-no-such-channel',Tmpremain1};4->{'rt-no-such-domain',Tmpremain1};5->{'rt-no-such-user',Tmpremain1};6->{'rt-not-admitted',Tmpremain1};7->{'rt-other-user-id',Tmpremain1};8->{'rt-parameters-unacceptable',Tmpremain1};9->{'rt-token-not-available',Tmpremain1};10->{'rt-token-not-possessed',Tmpremain1};11->{'rt-too-many-channels',Tmpremain1};12->{'rt-too-many-tokens',Tmpremain1};13->{'rt-too-many-users',Tmpremain1};14->{'rt-unspecified-failure',Tmpremain1};15->{'rt-user-rejected',Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,['rt-successful','rt-domain-merging','rt-domain-not-hierarchical','rt-no-such-channel','rt-no-such-domain','rt-no-such-user','rt-not-admitted','rt-other-user-id','rt-parameters-unacceptable','rt-token-not-available','rt-token-not-possessed','rt-too-many-channels','rt-too-many-tokens','rt-too-many-users','rt-unspecified-failure','rt-user-rejected']}}}}) end
.


'enc_Diagnostic'({'Diagnostic',Val}) ->
'enc_Diagnostic'(Val);

'enc_Diagnostic'(Val) ->
 case (case Val of 'dc-inconsistent-merge'->0;'dc-forbidden-PDU-downward'->1;'dc-forbidden-PDU-upward'->2;'dc-invalid-BER-encoding'->3;'dc-invalid-PER-encoding'->4;'dc-misrouted-user'->5;'dc-unrequested-confirm'->6;'dc-wrong-transport-priority'->7;'dc-channel-id-conflict'->8;'dc-token-id-conflict'->9;'dc-not-user-id-channel'->10;'dc-too-many-channels'->11;'dc-too-many-tokens'->12;'dc-too-many-users'->13;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end) of
    Tmpval2 when Tmpval2=<13,Tmpval2>=0 ->
      [10,4,Tmpval2- 0];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end
.


'dec_Diagnostic'(Bytes,_) ->
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes,4),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{'dc-inconsistent-merge',Tmpremain1};1->{'dc-forbidden-PDU-downward',Tmpremain1};2->{'dc-forbidden-PDU-upward',Tmpremain1};3->{'dc-invalid-BER-encoding',Tmpremain1};4->{'dc-invalid-PER-encoding',Tmpremain1};5->{'dc-misrouted-user',Tmpremain1};6->{'dc-unrequested-confirm',Tmpremain1};7->{'dc-wrong-transport-priority',Tmpremain1};8->{'dc-channel-id-conflict',Tmpremain1};9->{'dc-token-id-conflict',Tmpremain1};10->{'dc-not-user-id-channel',Tmpremain1};11->{'dc-too-many-channels',Tmpremain1};12->{'dc-too-many-tokens',Tmpremain1};13->{'dc-too-many-users',Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,['dc-inconsistent-merge','dc-forbidden-PDU-downward','dc-forbidden-PDU-upward','dc-invalid-BER-encoding','dc-invalid-PER-encoding','dc-misrouted-user','dc-unrequested-confirm','dc-wrong-transport-priority','dc-channel-id-conflict','dc-token-id-conflict','dc-not-user-id-channel','dc-too-many-channels','dc-too-many-tokens','dc-too-many-users']}}}}) end
.


'enc_ConnectMCSPDU'({'ConnectMCSPDU',Val}) ->
'enc_ConnectMCSPDU'(Val);

'enc_ConnectMCSPDU'(Val) ->
[
?RT_PER:set_choice(element(1,Val),['connect-initial','connect-response','connect-additional','connect-result'], 4),
case element(1,Val) of
'connect-initial' ->
'enc_Connect-Initial'(element(2,Val));
'connect-response' ->
'enc_Connect-Response'(element(2,Val));
'connect-additional' ->
'enc_Connect-Additional'(element(2,Val));
'connect-result' ->
'enc_Connect-Result'(element(2,Val))
end
].


'dec_ConnectMCSPDU'(Bytes,_) ->
{Choice,Bytes1} = ?RT_PER:getchoice(Bytes,4, 0),
{Cname,{Val,NewBytes}} = case Choice of
0 -> {'connect-initial',
'dec_Connect-Initial'(Bytes1,telltype)};
1 -> {'connect-response',
'dec_Connect-Response'(Bytes1,telltype)};
2 -> {'connect-additional',
'dec_Connect-Additional'(Bytes1,telltype)};
3 -> {'connect-result',
'dec_Connect-Result'(Bytes1,telltype)}
end,

{{Cname,Val},NewBytes}.

'enc_DomainMCSPDU'({'DomainMCSPDU',Val}) ->
'enc_DomainMCSPDU'(Val);

'enc_DomainMCSPDU'(Val) ->
[
?RT_PER:set_choice(element(1,Val),[plumbDomainIndication,erectDomainRequest,mergeChannelsRequest,mergeChannelsConfirm,purgeChannelsIndication,mergeTokensRequest,mergeTokensConfirm,purgeTokensIndication,disconnectProviderUltimatum,rejectMCSPDUUltimatum,attachUserRequest,attachUserConfirm,detachUserRequest,detachUserIndication,channelJoinRequest,channelJoinConfirm,channelLeaveRequest,channelConveneRequest,channelConveneConfirm,channelDisbandRequest,channelDisbandIndication,channelAdmitRequest,channelAdmitIndication,channelExpelRequest,channelExpelIndication,sendDataRequest,sendDataIndication,uniformSendDataRequest,uniformSendDataIndication,tokenGrabRequest,tokenGrabConfirm,tokenInhibitRequest,tokenInhibitConfirm,tokenGiveRequest,tokenGiveIndication,tokenGiveResponse,tokenGiveConfirm,tokenPleaseRequest,tokenPleaseIndication,tokenReleaseRequest,tokenReleaseConfirm,tokenTestRequest,tokenTestConfirm], 43),
case element(1,Val) of
plumbDomainIndication ->
'enc_PlumbDomainIndication'(element(2,Val));
erectDomainRequest ->
'enc_ErectDomainRequest'(element(2,Val));
mergeChannelsRequest ->
'enc_MergeChannelsRequest'(element(2,Val));
mergeChannelsConfirm ->
'enc_MergeChannelsConfirm'(element(2,Val));
purgeChannelsIndication ->
'enc_PurgeChannelsIndication'(element(2,Val));
mergeTokensRequest ->
'enc_MergeTokensRequest'(element(2,Val));
mergeTokensConfirm ->
'enc_MergeTokensConfirm'(element(2,Val));
purgeTokensIndication ->
'enc_PurgeTokensIndication'(element(2,Val));
disconnectProviderUltimatum ->
'enc_DisconnectProviderUltimatum'(element(2,Val));
rejectMCSPDUUltimatum ->
'enc_RejectMCSPDUUltimatum'(element(2,Val));
attachUserRequest ->
'enc_AttachUserRequest'(element(2,Val));
attachUserConfirm ->
'enc_AttachUserConfirm'(element(2,Val));
detachUserRequest ->
'enc_DetachUserRequest'(element(2,Val));
detachUserIndication ->
'enc_DetachUserIndication'(element(2,Val));
channelJoinRequest ->
'enc_ChannelJoinRequest'(element(2,Val));
channelJoinConfirm ->
'enc_ChannelJoinConfirm'(element(2,Val));
channelLeaveRequest ->
'enc_ChannelLeaveRequest'(element(2,Val));
channelConveneRequest ->
'enc_ChannelConveneRequest'(element(2,Val));
channelConveneConfirm ->
'enc_ChannelConveneConfirm'(element(2,Val));
channelDisbandRequest ->
'enc_ChannelDisbandRequest'(element(2,Val));
channelDisbandIndication ->
'enc_ChannelDisbandIndication'(element(2,Val));
channelAdmitRequest ->
'enc_ChannelAdmitRequest'(element(2,Val));
channelAdmitIndication ->
'enc_ChannelAdmitIndication'(element(2,Val));
channelExpelRequest ->
'enc_ChannelExpelRequest'(element(2,Val));
channelExpelIndication ->
'enc_ChannelExpelIndication'(element(2,Val));
sendDataRequest ->
'enc_SendDataRequest'(element(2,Val));
sendDataIndication ->
'enc_SendDataIndication'(element(2,Val));
uniformSendDataRequest ->
'enc_UniformSendDataRequest'(element(2,Val));
uniformSendDataIndication ->
'enc_UniformSendDataIndication'(element(2,Val));
tokenGrabRequest ->
'enc_TokenGrabRequest'(element(2,Val));
tokenGrabConfirm ->
'enc_TokenGrabConfirm'(element(2,Val));
tokenInhibitRequest ->
'enc_TokenInhibitRequest'(element(2,Val));
tokenInhibitConfirm ->
'enc_TokenInhibitConfirm'(element(2,Val));
tokenGiveRequest ->
'enc_TokenGiveRequest'(element(2,Val));
tokenGiveIndication ->
'enc_TokenGiveIndication'(element(2,Val));
tokenGiveResponse ->
'enc_TokenGiveResponse'(element(2,Val));
tokenGiveConfirm ->
'enc_TokenGiveConfirm'(element(2,Val));
tokenPleaseRequest ->
'enc_TokenPleaseRequest'(element(2,Val));
tokenPleaseIndication ->
'enc_TokenPleaseIndication'(element(2,Val));
tokenReleaseRequest ->
'enc_TokenReleaseRequest'(element(2,Val));
tokenReleaseConfirm ->
'enc_TokenReleaseConfirm'(element(2,Val));
tokenTestRequest ->
'enc_TokenTestRequest'(element(2,Val));
tokenTestConfirm ->
'enc_TokenTestConfirm'(element(2,Val))
end
].


'dec_DomainMCSPDU'(Bytes,_) ->
{Choice,Bytes1} = ?RT_PER:getchoice(Bytes,43, 0),
{Cname,{Val,NewBytes}} = case Choice of
0 -> {plumbDomainIndication,
'dec_PlumbDomainIndication'(Bytes1,telltype)};
1 -> {erectDomainRequest,
'dec_ErectDomainRequest'(Bytes1,telltype)};
2 -> {mergeChannelsRequest,
'dec_MergeChannelsRequest'(Bytes1,telltype)};
3 -> {mergeChannelsConfirm,
'dec_MergeChannelsConfirm'(Bytes1,telltype)};
4 -> {purgeChannelsIndication,
'dec_PurgeChannelsIndication'(Bytes1,telltype)};
5 -> {mergeTokensRequest,
'dec_MergeTokensRequest'(Bytes1,telltype)};
6 -> {mergeTokensConfirm,
'dec_MergeTokensConfirm'(Bytes1,telltype)};
7 -> {purgeTokensIndication,
'dec_PurgeTokensIndication'(Bytes1,telltype)};
8 -> {disconnectProviderUltimatum,
'dec_DisconnectProviderUltimatum'(Bytes1,telltype)};
9 -> {rejectMCSPDUUltimatum,
'dec_RejectMCSPDUUltimatum'(Bytes1,telltype)};
10 -> {attachUserRequest,
'dec_AttachUserRequest'(Bytes1,telltype)};
11 -> {attachUserConfirm,
'dec_AttachUserConfirm'(Bytes1,telltype)};
12 -> {detachUserRequest,
'dec_DetachUserRequest'(Bytes1,telltype)};
13 -> {detachUserIndication,
'dec_DetachUserIndication'(Bytes1,telltype)};
14 -> {channelJoinRequest,
'dec_ChannelJoinRequest'(Bytes1,telltype)};
15 -> {channelJoinConfirm,
'dec_ChannelJoinConfirm'(Bytes1,telltype)};
16 -> {channelLeaveRequest,
'dec_ChannelLeaveRequest'(Bytes1,telltype)};
17 -> {channelConveneRequest,
'dec_ChannelConveneRequest'(Bytes1,telltype)};
18 -> {channelConveneConfirm,
'dec_ChannelConveneConfirm'(Bytes1,telltype)};
19 -> {channelDisbandRequest,
'dec_ChannelDisbandRequest'(Bytes1,telltype)};
20 -> {channelDisbandIndication,
'dec_ChannelDisbandIndication'(Bytes1,telltype)};
21 -> {channelAdmitRequest,
'dec_ChannelAdmitRequest'(Bytes1,telltype)};
22 -> {channelAdmitIndication,
'dec_ChannelAdmitIndication'(Bytes1,telltype)};
23 -> {channelExpelRequest,
'dec_ChannelExpelRequest'(Bytes1,telltype)};
24 -> {channelExpelIndication,
'dec_ChannelExpelIndication'(Bytes1,telltype)};
25 -> {sendDataRequest,
'dec_SendDataRequest'(Bytes1,telltype)};
26 -> {sendDataIndication,
'dec_SendDataIndication'(Bytes1,telltype)};
27 -> {uniformSendDataRequest,
'dec_UniformSendDataRequest'(Bytes1,telltype)};
28 -> {uniformSendDataIndication,
'dec_UniformSendDataIndication'(Bytes1,telltype)};
29 -> {tokenGrabRequest,
'dec_TokenGrabRequest'(Bytes1,telltype)};
30 -> {tokenGrabConfirm,
'dec_TokenGrabConfirm'(Bytes1,telltype)};
31 -> {tokenInhibitRequest,
'dec_TokenInhibitRequest'(Bytes1,telltype)};
32 -> {tokenInhibitConfirm,
'dec_TokenInhibitConfirm'(Bytes1,telltype)};
33 -> {tokenGiveRequest,
'dec_TokenGiveRequest'(Bytes1,telltype)};
34 -> {tokenGiveIndication,
'dec_TokenGiveIndication'(Bytes1,telltype)};
35 -> {tokenGiveResponse,
'dec_TokenGiveResponse'(Bytes1,telltype)};
36 -> {tokenGiveConfirm,
'dec_TokenGiveConfirm'(Bytes1,telltype)};
37 -> {tokenPleaseRequest,
'dec_TokenPleaseRequest'(Bytes1,telltype)};
38 -> {tokenPleaseIndication,
'dec_TokenPleaseIndication'(Bytes1,telltype)};
39 -> {tokenReleaseRequest,
'dec_TokenReleaseRequest'(Bytes1,telltype)};
40 -> {tokenReleaseConfirm,
'dec_TokenReleaseConfirm'(Bytes1,telltype)};
41 -> {tokenTestRequest,
'dec_TokenTestRequest'(Bytes1,telltype)};
42 -> {tokenTestConfirm,
'dec_TokenTestConfirm'(Bytes1,telltype)}
end,

{{Cname,Val},NewBytes}.
