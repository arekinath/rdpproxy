%% Generated by the Erlang ASN.1 BER-compiler version, utilizing bit-syntax:1.7
%% Purpose: encoder and decoder to the types in mod GCC-PROTOCOL

-module(gccp_per).
-include("gccp.hrl").
-define('RT_PER',asn1rt_per_bin_rt2ct).
-asn1_info([{vsn,'1.7'},
            {module,'GCC-PROTOCOL'},
            {options,[per_bin,optimize,nif,{i,[46]}]}]).

-export([encoding_rule/0]).
-export([
'enc_ChannelID'/1,
'enc_StaticChannelID'/1,
'enc_DynamicChannelID'/1,
'enc_UserID'/1,
'enc_TokenID'/1,
'enc_StaticTokenID'/1,
'enc_DynamicTokenID'/1,
'enc_Time'/1,
'enc_Handle'/1,
'enc_H221NonStandardIdentifier'/1,
'enc_Key'/1,
'enc_NonStandardParameter'/1,
'enc_TextString'/1,
'enc_SimpleTextString'/1,
'enc_SimpleNumericString'/1,
'enc_DiallingString'/1,
'enc_SubAddressString'/1,
'enc_ExtraDiallingString'/1,
'enc_UserData'/1,
'enc_Password'/1,
'enc_PasswordSelector'/1,
'enc_ChallengeResponseItem'/1,
'enc_ChallengeResponseAlgorithm'/1,
'enc_ChallengeItem'/1,
'enc_ChallengeRequest'/1,
'enc_ChallengeResponse'/1,
'enc_PasswordChallengeRequestResponse'/1,
'enc_ConferenceName'/1,
'enc_ConferenceNameSelector'/1,
'enc_ConferenceNameModifier'/1,
'enc_Privilege'/1,
'enc_TerminationMethod'/1,
'enc_ConferencePriorityScheme'/1,
'enc_ConferencePriority'/1,
'enc_NodeCategory'/1,
'enc_ConferenceMode'/1,
'enc_NetworkAddress'/1,
'enc_MediaList'/1,
'enc_ChannelAggregationMethod'/1,
'enc_Profile'/1,
'enc_ExtendedE164NetworkAddress'/1,
'enc_TransportAddress'/1,
'enc_GSTNConnection'/1,
'enc_ISDNConnection'/1,
'enc_CSDNConnection'/1,
'enc_PSDNConnection'/1,
'enc_ATMConnection'/1,
'enc_NetworkConnection'/1,
'enc_NetworkAddressV2'/1,
'enc_NodeType'/1,
'enc_NodeProperties'/1,
'enc_AsymmetryIndicator'/1,
'enc_AlternativeNodeID'/1,
'enc_ConferenceDescriptor'/1,
'enc_NodeRecord'/1,
'enc_SessionKey'/1,
'enc_ChannelType'/1,
'enc_ApplicationRecord'/1,
'enc_CapabilityID'/1,
'enc_CapabilityClass'/1,
'enc_EntityID'/1,
'enc_ApplicationInvokeSpecifier'/1,
'enc_RegistryKey'/1,
'enc_RegistryItem'/1,
'enc_RegistryEntryOwner'/1,
'enc_RegistryModificationRights'/1,
'enc_UserIDIndication'/1,
'enc_ConferenceCreateRequest'/1,
'enc_ConferenceCreateResponse'/1,
'enc_ConferenceQueryRequest'/1,
'enc_ConferenceQueryResponse'/1,
'enc_ConferenceJoinRequest'/1,
'enc_ConferenceJoinResponse'/1,
'enc_ConferenceInviteRequest'/1,
'enc_ConferenceInviteResponse'/1,
'enc_ConferenceAddRequest'/1,
'enc_ConferenceAddResponse'/1,
'enc_ConferenceLockRequest'/1,
'enc_ConferenceLockResponse'/1,
'enc_ConferenceLockIndication'/1,
'enc_ConferenceUnlockRequest'/1,
'enc_ConferenceUnlockResponse'/1,
'enc_ConferenceUnlockIndication'/1,
'enc_ConferenceTerminateRequest'/1,
'enc_ConferenceTerminateResponse'/1,
'enc_ConferenceTerminateIndication'/1,
'enc_ConferenceEjectUserRequest'/1,
'enc_ConferenceEjectUserResponse'/1,
'enc_ConferenceEjectUserIndication'/1,
'enc_ConferenceTransferRequest'/1,
'enc_ConferenceTransferResponse'/1,
'enc_ConferenceTransferIndication'/1,
'enc_RosterUpdateIndication'/1,
'enc_ApplicationInvokeIndication'/1,
'enc_RegistryRegisterChannelRequest'/1,
'enc_RegistryAssignTokenRequest'/1,
'enc_RegistrySetParameterRequest'/1,
'enc_RegistryRetrieveEntryRequest'/1,
'enc_RegistryDeleteEntryRequest'/1,
'enc_RegistryMonitorEntryRequest'/1,
'enc_RegistryMonitorEntryIndication'/1,
'enc_RegistryAllocateHandleRequest'/1,
'enc_RegistryAllocateHandleResponse'/1,
'enc_RegistryResponse'/1,
'enc_ConductorAssignIndication'/1,
'enc_ConductorReleaseIndication'/1,
'enc_ConductorPermissionAskIndication'/1,
'enc_ConductorPermissionGrantIndication'/1,
'enc_ConferenceTimeRemainingIndication'/1,
'enc_ConferenceTimeInquireIndication'/1,
'enc_ConferenceTimeExtendIndication'/1,
'enc_ConferenceAssistanceIndication'/1,
'enc_TextMessageIndication'/1,
'enc_RosterRefreshRequest'/1,
'enc_FunctionNotSupportedResponse'/1,
'enc_NonStandardPDU'/1,
'enc_ConnectData'/1,
'enc_ConnectGCCPDU'/1,
'enc_GCCPDU'/1,
'enc_RequestPDU'/1,
'enc_ResponsePDU'/1,
'enc_IndicationPDU'/1
]).

-export([
'dec_ChannelID'/2,
'dec_StaticChannelID'/2,
'dec_DynamicChannelID'/2,
'dec_UserID'/2,
'dec_TokenID'/2,
'dec_StaticTokenID'/2,
'dec_DynamicTokenID'/2,
'dec_Time'/2,
'dec_Handle'/2,
'dec_H221NonStandardIdentifier'/2,
'dec_Key'/2,
'dec_NonStandardParameter'/2,
'dec_TextString'/2,
'dec_SimpleTextString'/2,
'dec_SimpleNumericString'/2,
'dec_DiallingString'/2,
'dec_SubAddressString'/2,
'dec_ExtraDiallingString'/2,
'dec_UserData'/2,
'dec_Password'/2,
'dec_PasswordSelector'/2,
'dec_ChallengeResponseItem'/2,
'dec_ChallengeResponseAlgorithm'/2,
'dec_ChallengeItem'/2,
'dec_ChallengeRequest'/2,
'dec_ChallengeResponse'/2,
'dec_PasswordChallengeRequestResponse'/2,
'dec_ConferenceName'/2,
'dec_ConferenceNameSelector'/2,
'dec_ConferenceNameModifier'/2,
'dec_Privilege'/2,
'dec_TerminationMethod'/2,
'dec_ConferencePriorityScheme'/2,
'dec_ConferencePriority'/2,
'dec_NodeCategory'/2,
'dec_ConferenceMode'/2,
'dec_NetworkAddress'/2,
'dec_MediaList'/2,
'dec_ChannelAggregationMethod'/2,
'dec_Profile'/2,
'dec_ExtendedE164NetworkAddress'/2,
'dec_TransportAddress'/2,
'dec_GSTNConnection'/2,
'dec_ISDNConnection'/2,
'dec_CSDNConnection'/2,
'dec_PSDNConnection'/2,
'dec_ATMConnection'/2,
'dec_NetworkConnection'/2,
'dec_NetworkAddressV2'/2,
'dec_NodeType'/2,
'dec_NodeProperties'/2,
'dec_AsymmetryIndicator'/2,
'dec_AlternativeNodeID'/2,
'dec_ConferenceDescriptor'/2,
'dec_NodeRecord'/2,
'dec_SessionKey'/2,
'dec_ChannelType'/2,
'dec_ApplicationRecord'/2,
'dec_CapabilityID'/2,
'dec_CapabilityClass'/2,
'dec_EntityID'/2,
'dec_ApplicationInvokeSpecifier'/2,
'dec_RegistryKey'/2,
'dec_RegistryItem'/2,
'dec_RegistryEntryOwner'/2,
'dec_RegistryModificationRights'/2,
'dec_UserIDIndication'/2,
'dec_ConferenceCreateRequest'/2,
'dec_ConferenceCreateResponse'/2,
'dec_ConferenceQueryRequest'/2,
'dec_ConferenceQueryResponse'/2,
'dec_ConferenceJoinRequest'/2,
'dec_ConferenceJoinResponse'/2,
'dec_ConferenceInviteRequest'/2,
'dec_ConferenceInviteResponse'/2,
'dec_ConferenceAddRequest'/2,
'dec_ConferenceAddResponse'/2,
'dec_ConferenceLockRequest'/2,
'dec_ConferenceLockResponse'/2,
'dec_ConferenceLockIndication'/2,
'dec_ConferenceUnlockRequest'/2,
'dec_ConferenceUnlockResponse'/2,
'dec_ConferenceUnlockIndication'/2,
'dec_ConferenceTerminateRequest'/2,
'dec_ConferenceTerminateResponse'/2,
'dec_ConferenceTerminateIndication'/2,
'dec_ConferenceEjectUserRequest'/2,
'dec_ConferenceEjectUserResponse'/2,
'dec_ConferenceEjectUserIndication'/2,
'dec_ConferenceTransferRequest'/2,
'dec_ConferenceTransferResponse'/2,
'dec_ConferenceTransferIndication'/2,
'dec_RosterUpdateIndication'/2,
'dec_ApplicationInvokeIndication'/2,
'dec_RegistryRegisterChannelRequest'/2,
'dec_RegistryAssignTokenRequest'/2,
'dec_RegistrySetParameterRequest'/2,
'dec_RegistryRetrieveEntryRequest'/2,
'dec_RegistryDeleteEntryRequest'/2,
'dec_RegistryMonitorEntryRequest'/2,
'dec_RegistryMonitorEntryIndication'/2,
'dec_RegistryAllocateHandleRequest'/2,
'dec_RegistryAllocateHandleResponse'/2,
'dec_RegistryResponse'/2,
'dec_ConductorAssignIndication'/2,
'dec_ConductorReleaseIndication'/2,
'dec_ConductorPermissionAskIndication'/2,
'dec_ConductorPermissionGrantIndication'/2,
'dec_ConferenceTimeRemainingIndication'/2,
'dec_ConferenceTimeInquireIndication'/2,
'dec_ConferenceTimeExtendIndication'/2,
'dec_ConferenceAssistanceIndication'/2,
'dec_TextMessageIndication'/2,
'dec_RosterRefreshRequest'/2,
'dec_FunctionNotSupportedResponse'/2,
'dec_NonStandardPDU'/2,
'dec_ConnectData'/2,
'dec_ConnectGCCPDU'/2,
'dec_GCCPDU'/2,
'dec_RequestPDU'/2,
'dec_ResponsePDU'/2,
'dec_IndicationPDU'/2
]).

-export([info/0]).


-export([encode/2,decode/2,encode_disp/2,decode_disp/2]).

encoding_rule() ->
   per_bin.

encode(Type,Data) ->
case catch ?RT_PER:complete(encode_disp(Type,Data)) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {Bytes,_Len} ->
    {ok,Bytes};
  Bytes ->
    {ok,Bytes}
end.

decode(Type,Data) ->
case catch decode_disp(Type,Data) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {X,_Rest} ->
    {ok,X};
  {X,_Rest,_Len} ->
    {ok,X}
end.

encode_disp('ChannelID',Data) -> 'enc_ChannelID'(Data);
encode_disp('StaticChannelID',Data) -> 'enc_StaticChannelID'(Data);
encode_disp('DynamicChannelID',Data) -> 'enc_DynamicChannelID'(Data);
encode_disp('UserID',Data) -> 'enc_UserID'(Data);
encode_disp('TokenID',Data) -> 'enc_TokenID'(Data);
encode_disp('StaticTokenID',Data) -> 'enc_StaticTokenID'(Data);
encode_disp('DynamicTokenID',Data) -> 'enc_DynamicTokenID'(Data);
encode_disp('Time',Data) -> 'enc_Time'(Data);
encode_disp('Handle',Data) -> 'enc_Handle'(Data);
encode_disp('H221NonStandardIdentifier',Data) -> 'enc_H221NonStandardIdentifier'(Data);
encode_disp('Key',Data) -> 'enc_Key'(Data);
encode_disp('NonStandardParameter',Data) -> 'enc_NonStandardParameter'(Data);
encode_disp('TextString',Data) -> 'enc_TextString'(Data);
encode_disp('SimpleTextString',Data) -> 'enc_SimpleTextString'(Data);
encode_disp('SimpleNumericString',Data) -> 'enc_SimpleNumericString'(Data);
encode_disp('DiallingString',Data) -> 'enc_DiallingString'(Data);
encode_disp('SubAddressString',Data) -> 'enc_SubAddressString'(Data);
encode_disp('ExtraDiallingString',Data) -> 'enc_ExtraDiallingString'(Data);
encode_disp('UserData',Data) -> 'enc_UserData'(Data);
encode_disp('Password',Data) -> 'enc_Password'(Data);
encode_disp('PasswordSelector',Data) -> 'enc_PasswordSelector'(Data);
encode_disp('ChallengeResponseItem',Data) -> 'enc_ChallengeResponseItem'(Data);
encode_disp('ChallengeResponseAlgorithm',Data) -> 'enc_ChallengeResponseAlgorithm'(Data);
encode_disp('ChallengeItem',Data) -> 'enc_ChallengeItem'(Data);
encode_disp('ChallengeRequest',Data) -> 'enc_ChallengeRequest'(Data);
encode_disp('ChallengeResponse',Data) -> 'enc_ChallengeResponse'(Data);
encode_disp('PasswordChallengeRequestResponse',Data) -> 'enc_PasswordChallengeRequestResponse'(Data);
encode_disp('ConferenceName',Data) -> 'enc_ConferenceName'(Data);
encode_disp('ConferenceNameSelector',Data) -> 'enc_ConferenceNameSelector'(Data);
encode_disp('ConferenceNameModifier',Data) -> 'enc_ConferenceNameModifier'(Data);
encode_disp('Privilege',Data) -> 'enc_Privilege'(Data);
encode_disp('TerminationMethod',Data) -> 'enc_TerminationMethod'(Data);
encode_disp('ConferencePriorityScheme',Data) -> 'enc_ConferencePriorityScheme'(Data);
encode_disp('ConferencePriority',Data) -> 'enc_ConferencePriority'(Data);
encode_disp('NodeCategory',Data) -> 'enc_NodeCategory'(Data);
encode_disp('ConferenceMode',Data) -> 'enc_ConferenceMode'(Data);
encode_disp('NetworkAddress',Data) -> 'enc_NetworkAddress'(Data);
encode_disp('MediaList',Data) -> 'enc_MediaList'(Data);
encode_disp('ChannelAggregationMethod',Data) -> 'enc_ChannelAggregationMethod'(Data);
encode_disp('Profile',Data) -> 'enc_Profile'(Data);
encode_disp('ExtendedE164NetworkAddress',Data) -> 'enc_ExtendedE164NetworkAddress'(Data);
encode_disp('TransportAddress',Data) -> 'enc_TransportAddress'(Data);
encode_disp('GSTNConnection',Data) -> 'enc_GSTNConnection'(Data);
encode_disp('ISDNConnection',Data) -> 'enc_ISDNConnection'(Data);
encode_disp('CSDNConnection',Data) -> 'enc_CSDNConnection'(Data);
encode_disp('PSDNConnection',Data) -> 'enc_PSDNConnection'(Data);
encode_disp('ATMConnection',Data) -> 'enc_ATMConnection'(Data);
encode_disp('NetworkConnection',Data) -> 'enc_NetworkConnection'(Data);
encode_disp('NetworkAddressV2',Data) -> 'enc_NetworkAddressV2'(Data);
encode_disp('NodeType',Data) -> 'enc_NodeType'(Data);
encode_disp('NodeProperties',Data) -> 'enc_NodeProperties'(Data);
encode_disp('AsymmetryIndicator',Data) -> 'enc_AsymmetryIndicator'(Data);
encode_disp('AlternativeNodeID',Data) -> 'enc_AlternativeNodeID'(Data);
encode_disp('ConferenceDescriptor',Data) -> 'enc_ConferenceDescriptor'(Data);
encode_disp('NodeRecord',Data) -> 'enc_NodeRecord'(Data);
encode_disp('SessionKey',Data) -> 'enc_SessionKey'(Data);
encode_disp('ChannelType',Data) -> 'enc_ChannelType'(Data);
encode_disp('ApplicationRecord',Data) -> 'enc_ApplicationRecord'(Data);
encode_disp('CapabilityID',Data) -> 'enc_CapabilityID'(Data);
encode_disp('CapabilityClass',Data) -> 'enc_CapabilityClass'(Data);
encode_disp('EntityID',Data) -> 'enc_EntityID'(Data);
encode_disp('ApplicationInvokeSpecifier',Data) -> 'enc_ApplicationInvokeSpecifier'(Data);
encode_disp('RegistryKey',Data) -> 'enc_RegistryKey'(Data);
encode_disp('RegistryItem',Data) -> 'enc_RegistryItem'(Data);
encode_disp('RegistryEntryOwner',Data) -> 'enc_RegistryEntryOwner'(Data);
encode_disp('RegistryModificationRights',Data) -> 'enc_RegistryModificationRights'(Data);
encode_disp('UserIDIndication',Data) -> 'enc_UserIDIndication'(Data);
encode_disp('ConferenceCreateRequest',Data) -> 'enc_ConferenceCreateRequest'(Data);
encode_disp('ConferenceCreateResponse',Data) -> 'enc_ConferenceCreateResponse'(Data);
encode_disp('ConferenceQueryRequest',Data) -> 'enc_ConferenceQueryRequest'(Data);
encode_disp('ConferenceQueryResponse',Data) -> 'enc_ConferenceQueryResponse'(Data);
encode_disp('ConferenceJoinRequest',Data) -> 'enc_ConferenceJoinRequest'(Data);
encode_disp('ConferenceJoinResponse',Data) -> 'enc_ConferenceJoinResponse'(Data);
encode_disp('ConferenceInviteRequest',Data) -> 'enc_ConferenceInviteRequest'(Data);
encode_disp('ConferenceInviteResponse',Data) -> 'enc_ConferenceInviteResponse'(Data);
encode_disp('ConferenceAddRequest',Data) -> 'enc_ConferenceAddRequest'(Data);
encode_disp('ConferenceAddResponse',Data) -> 'enc_ConferenceAddResponse'(Data);
encode_disp('ConferenceLockRequest',Data) -> 'enc_ConferenceLockRequest'(Data);
encode_disp('ConferenceLockResponse',Data) -> 'enc_ConferenceLockResponse'(Data);
encode_disp('ConferenceLockIndication',Data) -> 'enc_ConferenceLockIndication'(Data);
encode_disp('ConferenceUnlockRequest',Data) -> 'enc_ConferenceUnlockRequest'(Data);
encode_disp('ConferenceUnlockResponse',Data) -> 'enc_ConferenceUnlockResponse'(Data);
encode_disp('ConferenceUnlockIndication',Data) -> 'enc_ConferenceUnlockIndication'(Data);
encode_disp('ConferenceTerminateRequest',Data) -> 'enc_ConferenceTerminateRequest'(Data);
encode_disp('ConferenceTerminateResponse',Data) -> 'enc_ConferenceTerminateResponse'(Data);
encode_disp('ConferenceTerminateIndication',Data) -> 'enc_ConferenceTerminateIndication'(Data);
encode_disp('ConferenceEjectUserRequest',Data) -> 'enc_ConferenceEjectUserRequest'(Data);
encode_disp('ConferenceEjectUserResponse',Data) -> 'enc_ConferenceEjectUserResponse'(Data);
encode_disp('ConferenceEjectUserIndication',Data) -> 'enc_ConferenceEjectUserIndication'(Data);
encode_disp('ConferenceTransferRequest',Data) -> 'enc_ConferenceTransferRequest'(Data);
encode_disp('ConferenceTransferResponse',Data) -> 'enc_ConferenceTransferResponse'(Data);
encode_disp('ConferenceTransferIndication',Data) -> 'enc_ConferenceTransferIndication'(Data);
encode_disp('RosterUpdateIndication',Data) -> 'enc_RosterUpdateIndication'(Data);
encode_disp('ApplicationInvokeIndication',Data) -> 'enc_ApplicationInvokeIndication'(Data);
encode_disp('RegistryRegisterChannelRequest',Data) -> 'enc_RegistryRegisterChannelRequest'(Data);
encode_disp('RegistryAssignTokenRequest',Data) -> 'enc_RegistryAssignTokenRequest'(Data);
encode_disp('RegistrySetParameterRequest',Data) -> 'enc_RegistrySetParameterRequest'(Data);
encode_disp('RegistryRetrieveEntryRequest',Data) -> 'enc_RegistryRetrieveEntryRequest'(Data);
encode_disp('RegistryDeleteEntryRequest',Data) -> 'enc_RegistryDeleteEntryRequest'(Data);
encode_disp('RegistryMonitorEntryRequest',Data) -> 'enc_RegistryMonitorEntryRequest'(Data);
encode_disp('RegistryMonitorEntryIndication',Data) -> 'enc_RegistryMonitorEntryIndication'(Data);
encode_disp('RegistryAllocateHandleRequest',Data) -> 'enc_RegistryAllocateHandleRequest'(Data);
encode_disp('RegistryAllocateHandleResponse',Data) -> 'enc_RegistryAllocateHandleResponse'(Data);
encode_disp('RegistryResponse',Data) -> 'enc_RegistryResponse'(Data);
encode_disp('ConductorAssignIndication',Data) -> 'enc_ConductorAssignIndication'(Data);
encode_disp('ConductorReleaseIndication',Data) -> 'enc_ConductorReleaseIndication'(Data);
encode_disp('ConductorPermissionAskIndication',Data) -> 'enc_ConductorPermissionAskIndication'(Data);
encode_disp('ConductorPermissionGrantIndication',Data) -> 'enc_ConductorPermissionGrantIndication'(Data);
encode_disp('ConferenceTimeRemainingIndication',Data) -> 'enc_ConferenceTimeRemainingIndication'(Data);
encode_disp('ConferenceTimeInquireIndication',Data) -> 'enc_ConferenceTimeInquireIndication'(Data);
encode_disp('ConferenceTimeExtendIndication',Data) -> 'enc_ConferenceTimeExtendIndication'(Data);
encode_disp('ConferenceAssistanceIndication',Data) -> 'enc_ConferenceAssistanceIndication'(Data);
encode_disp('TextMessageIndication',Data) -> 'enc_TextMessageIndication'(Data);
encode_disp('RosterRefreshRequest',Data) -> 'enc_RosterRefreshRequest'(Data);
encode_disp('FunctionNotSupportedResponse',Data) -> 'enc_FunctionNotSupportedResponse'(Data);
encode_disp('NonStandardPDU',Data) -> 'enc_NonStandardPDU'(Data);
encode_disp('ConnectData',Data) -> 'enc_ConnectData'(Data);
encode_disp('ConnectGCCPDU',Data) -> 'enc_ConnectGCCPDU'(Data);
encode_disp('GCCPDU',Data) -> 'enc_GCCPDU'(Data);
encode_disp('RequestPDU',Data) -> 'enc_RequestPDU'(Data);
encode_disp('ResponsePDU',Data) -> 'enc_ResponsePDU'(Data);
encode_disp('IndicationPDU',Data) -> 'enc_IndicationPDU'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('ChannelID',Data) -> 'dec_ChannelID'(Data,mandatory);
decode_disp('StaticChannelID',Data) -> 'dec_StaticChannelID'(Data,mandatory);
decode_disp('DynamicChannelID',Data) -> 'dec_DynamicChannelID'(Data,mandatory);
decode_disp('UserID',Data) -> 'dec_UserID'(Data,mandatory);
decode_disp('TokenID',Data) -> 'dec_TokenID'(Data,mandatory);
decode_disp('StaticTokenID',Data) -> 'dec_StaticTokenID'(Data,mandatory);
decode_disp('DynamicTokenID',Data) -> 'dec_DynamicTokenID'(Data,mandatory);
decode_disp('Time',Data) -> 'dec_Time'(Data,mandatory);
decode_disp('Handle',Data) -> 'dec_Handle'(Data,mandatory);
decode_disp('H221NonStandardIdentifier',Data) -> 'dec_H221NonStandardIdentifier'(Data,mandatory);
decode_disp('Key',Data) -> 'dec_Key'(Data,mandatory);
decode_disp('NonStandardParameter',Data) -> 'dec_NonStandardParameter'(Data,mandatory);
decode_disp('TextString',Data) -> 'dec_TextString'(Data,mandatory);
decode_disp('SimpleTextString',Data) -> 'dec_SimpleTextString'(Data,mandatory);
decode_disp('SimpleNumericString',Data) -> 'dec_SimpleNumericString'(Data,mandatory);
decode_disp('DiallingString',Data) -> 'dec_DiallingString'(Data,mandatory);
decode_disp('SubAddressString',Data) -> 'dec_SubAddressString'(Data,mandatory);
decode_disp('ExtraDiallingString',Data) -> 'dec_ExtraDiallingString'(Data,mandatory);
decode_disp('UserData',Data) -> 'dec_UserData'(Data,mandatory);
decode_disp('Password',Data) -> 'dec_Password'(Data,mandatory);
decode_disp('PasswordSelector',Data) -> 'dec_PasswordSelector'(Data,mandatory);
decode_disp('ChallengeResponseItem',Data) -> 'dec_ChallengeResponseItem'(Data,mandatory);
decode_disp('ChallengeResponseAlgorithm',Data) -> 'dec_ChallengeResponseAlgorithm'(Data,mandatory);
decode_disp('ChallengeItem',Data) -> 'dec_ChallengeItem'(Data,mandatory);
decode_disp('ChallengeRequest',Data) -> 'dec_ChallengeRequest'(Data,mandatory);
decode_disp('ChallengeResponse',Data) -> 'dec_ChallengeResponse'(Data,mandatory);
decode_disp('PasswordChallengeRequestResponse',Data) -> 'dec_PasswordChallengeRequestResponse'(Data,mandatory);
decode_disp('ConferenceName',Data) -> 'dec_ConferenceName'(Data,mandatory);
decode_disp('ConferenceNameSelector',Data) -> 'dec_ConferenceNameSelector'(Data,mandatory);
decode_disp('ConferenceNameModifier',Data) -> 'dec_ConferenceNameModifier'(Data,mandatory);
decode_disp('Privilege',Data) -> 'dec_Privilege'(Data,mandatory);
decode_disp('TerminationMethod',Data) -> 'dec_TerminationMethod'(Data,mandatory);
decode_disp('ConferencePriorityScheme',Data) -> 'dec_ConferencePriorityScheme'(Data,mandatory);
decode_disp('ConferencePriority',Data) -> 'dec_ConferencePriority'(Data,mandatory);
decode_disp('NodeCategory',Data) -> 'dec_NodeCategory'(Data,mandatory);
decode_disp('ConferenceMode',Data) -> 'dec_ConferenceMode'(Data,mandatory);
decode_disp('NetworkAddress',Data) -> 'dec_NetworkAddress'(Data,mandatory);
decode_disp('MediaList',Data) -> 'dec_MediaList'(Data,mandatory);
decode_disp('ChannelAggregationMethod',Data) -> 'dec_ChannelAggregationMethod'(Data,mandatory);
decode_disp('Profile',Data) -> 'dec_Profile'(Data,mandatory);
decode_disp('ExtendedE164NetworkAddress',Data) -> 'dec_ExtendedE164NetworkAddress'(Data,mandatory);
decode_disp('TransportAddress',Data) -> 'dec_TransportAddress'(Data,mandatory);
decode_disp('GSTNConnection',Data) -> 'dec_GSTNConnection'(Data,mandatory);
decode_disp('ISDNConnection',Data) -> 'dec_ISDNConnection'(Data,mandatory);
decode_disp('CSDNConnection',Data) -> 'dec_CSDNConnection'(Data,mandatory);
decode_disp('PSDNConnection',Data) -> 'dec_PSDNConnection'(Data,mandatory);
decode_disp('ATMConnection',Data) -> 'dec_ATMConnection'(Data,mandatory);
decode_disp('NetworkConnection',Data) -> 'dec_NetworkConnection'(Data,mandatory);
decode_disp('NetworkAddressV2',Data) -> 'dec_NetworkAddressV2'(Data,mandatory);
decode_disp('NodeType',Data) -> 'dec_NodeType'(Data,mandatory);
decode_disp('NodeProperties',Data) -> 'dec_NodeProperties'(Data,mandatory);
decode_disp('AsymmetryIndicator',Data) -> 'dec_AsymmetryIndicator'(Data,mandatory);
decode_disp('AlternativeNodeID',Data) -> 'dec_AlternativeNodeID'(Data,mandatory);
decode_disp('ConferenceDescriptor',Data) -> 'dec_ConferenceDescriptor'(Data,mandatory);
decode_disp('NodeRecord',Data) -> 'dec_NodeRecord'(Data,mandatory);
decode_disp('SessionKey',Data) -> 'dec_SessionKey'(Data,mandatory);
decode_disp('ChannelType',Data) -> 'dec_ChannelType'(Data,mandatory);
decode_disp('ApplicationRecord',Data) -> 'dec_ApplicationRecord'(Data,mandatory);
decode_disp('CapabilityID',Data) -> 'dec_CapabilityID'(Data,mandatory);
decode_disp('CapabilityClass',Data) -> 'dec_CapabilityClass'(Data,mandatory);
decode_disp('EntityID',Data) -> 'dec_EntityID'(Data,mandatory);
decode_disp('ApplicationInvokeSpecifier',Data) -> 'dec_ApplicationInvokeSpecifier'(Data,mandatory);
decode_disp('RegistryKey',Data) -> 'dec_RegistryKey'(Data,mandatory);
decode_disp('RegistryItem',Data) -> 'dec_RegistryItem'(Data,mandatory);
decode_disp('RegistryEntryOwner',Data) -> 'dec_RegistryEntryOwner'(Data,mandatory);
decode_disp('RegistryModificationRights',Data) -> 'dec_RegistryModificationRights'(Data,mandatory);
decode_disp('UserIDIndication',Data) -> 'dec_UserIDIndication'(Data,mandatory);
decode_disp('ConferenceCreateRequest',Data) -> 'dec_ConferenceCreateRequest'(Data,mandatory);
decode_disp('ConferenceCreateResponse',Data) -> 'dec_ConferenceCreateResponse'(Data,mandatory);
decode_disp('ConferenceQueryRequest',Data) -> 'dec_ConferenceQueryRequest'(Data,mandatory);
decode_disp('ConferenceQueryResponse',Data) -> 'dec_ConferenceQueryResponse'(Data,mandatory);
decode_disp('ConferenceJoinRequest',Data) -> 'dec_ConferenceJoinRequest'(Data,mandatory);
decode_disp('ConferenceJoinResponse',Data) -> 'dec_ConferenceJoinResponse'(Data,mandatory);
decode_disp('ConferenceInviteRequest',Data) -> 'dec_ConferenceInviteRequest'(Data,mandatory);
decode_disp('ConferenceInviteResponse',Data) -> 'dec_ConferenceInviteResponse'(Data,mandatory);
decode_disp('ConferenceAddRequest',Data) -> 'dec_ConferenceAddRequest'(Data,mandatory);
decode_disp('ConferenceAddResponse',Data) -> 'dec_ConferenceAddResponse'(Data,mandatory);
decode_disp('ConferenceLockRequest',Data) -> 'dec_ConferenceLockRequest'(Data,mandatory);
decode_disp('ConferenceLockResponse',Data) -> 'dec_ConferenceLockResponse'(Data,mandatory);
decode_disp('ConferenceLockIndication',Data) -> 'dec_ConferenceLockIndication'(Data,mandatory);
decode_disp('ConferenceUnlockRequest',Data) -> 'dec_ConferenceUnlockRequest'(Data,mandatory);
decode_disp('ConferenceUnlockResponse',Data) -> 'dec_ConferenceUnlockResponse'(Data,mandatory);
decode_disp('ConferenceUnlockIndication',Data) -> 'dec_ConferenceUnlockIndication'(Data,mandatory);
decode_disp('ConferenceTerminateRequest',Data) -> 'dec_ConferenceTerminateRequest'(Data,mandatory);
decode_disp('ConferenceTerminateResponse',Data) -> 'dec_ConferenceTerminateResponse'(Data,mandatory);
decode_disp('ConferenceTerminateIndication',Data) -> 'dec_ConferenceTerminateIndication'(Data,mandatory);
decode_disp('ConferenceEjectUserRequest',Data) -> 'dec_ConferenceEjectUserRequest'(Data,mandatory);
decode_disp('ConferenceEjectUserResponse',Data) -> 'dec_ConferenceEjectUserResponse'(Data,mandatory);
decode_disp('ConferenceEjectUserIndication',Data) -> 'dec_ConferenceEjectUserIndication'(Data,mandatory);
decode_disp('ConferenceTransferRequest',Data) -> 'dec_ConferenceTransferRequest'(Data,mandatory);
decode_disp('ConferenceTransferResponse',Data) -> 'dec_ConferenceTransferResponse'(Data,mandatory);
decode_disp('ConferenceTransferIndication',Data) -> 'dec_ConferenceTransferIndication'(Data,mandatory);
decode_disp('RosterUpdateIndication',Data) -> 'dec_RosterUpdateIndication'(Data,mandatory);
decode_disp('ApplicationInvokeIndication',Data) -> 'dec_ApplicationInvokeIndication'(Data,mandatory);
decode_disp('RegistryRegisterChannelRequest',Data) -> 'dec_RegistryRegisterChannelRequest'(Data,mandatory);
decode_disp('RegistryAssignTokenRequest',Data) -> 'dec_RegistryAssignTokenRequest'(Data,mandatory);
decode_disp('RegistrySetParameterRequest',Data) -> 'dec_RegistrySetParameterRequest'(Data,mandatory);
decode_disp('RegistryRetrieveEntryRequest',Data) -> 'dec_RegistryRetrieveEntryRequest'(Data,mandatory);
decode_disp('RegistryDeleteEntryRequest',Data) -> 'dec_RegistryDeleteEntryRequest'(Data,mandatory);
decode_disp('RegistryMonitorEntryRequest',Data) -> 'dec_RegistryMonitorEntryRequest'(Data,mandatory);
decode_disp('RegistryMonitorEntryIndication',Data) -> 'dec_RegistryMonitorEntryIndication'(Data,mandatory);
decode_disp('RegistryAllocateHandleRequest',Data) -> 'dec_RegistryAllocateHandleRequest'(Data,mandatory);
decode_disp('RegistryAllocateHandleResponse',Data) -> 'dec_RegistryAllocateHandleResponse'(Data,mandatory);
decode_disp('RegistryResponse',Data) -> 'dec_RegistryResponse'(Data,mandatory);
decode_disp('ConductorAssignIndication',Data) -> 'dec_ConductorAssignIndication'(Data,mandatory);
decode_disp('ConductorReleaseIndication',Data) -> 'dec_ConductorReleaseIndication'(Data,mandatory);
decode_disp('ConductorPermissionAskIndication',Data) -> 'dec_ConductorPermissionAskIndication'(Data,mandatory);
decode_disp('ConductorPermissionGrantIndication',Data) -> 'dec_ConductorPermissionGrantIndication'(Data,mandatory);
decode_disp('ConferenceTimeRemainingIndication',Data) -> 'dec_ConferenceTimeRemainingIndication'(Data,mandatory);
decode_disp('ConferenceTimeInquireIndication',Data) -> 'dec_ConferenceTimeInquireIndication'(Data,mandatory);
decode_disp('ConferenceTimeExtendIndication',Data) -> 'dec_ConferenceTimeExtendIndication'(Data,mandatory);
decode_disp('ConferenceAssistanceIndication',Data) -> 'dec_ConferenceAssistanceIndication'(Data,mandatory);
decode_disp('TextMessageIndication',Data) -> 'dec_TextMessageIndication'(Data,mandatory);
decode_disp('RosterRefreshRequest',Data) -> 'dec_RosterRefreshRequest'(Data,mandatory);
decode_disp('FunctionNotSupportedResponse',Data) -> 'dec_FunctionNotSupportedResponse'(Data,mandatory);
decode_disp('NonStandardPDU',Data) -> 'dec_NonStandardPDU'(Data,mandatory);
decode_disp('ConnectData',Data) -> 'dec_ConnectData'(Data,mandatory);
decode_disp('ConnectGCCPDU',Data) -> 'dec_ConnectGCCPDU'(Data,mandatory);
decode_disp('GCCPDU',Data) -> 'dec_GCCPDU'(Data,mandatory);
decode_disp('RequestPDU',Data) -> 'dec_RequestPDU'(Data,mandatory);
decode_disp('ResponsePDU',Data) -> 'dec_ResponsePDU'(Data,mandatory);
decode_disp('IndicationPDU',Data) -> 'dec_IndicationPDU'(Data,mandatory);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).





info() ->
   case ?MODULE:module_info() of
      MI when is_list(MI) ->
         case lists:keysearch(attributes,1,MI) of
            {value,{_,Attributes}} when is_list(Attributes) ->
               case lists:keysearch(asn1_info,1,Attributes) of
                  {value,{_,Info}} when is_list(Info) ->
                     Info;
                  _ ->
                     []
               end;
            _ ->
               []
         end
   end.

'enc_ChannelID'({'ChannelID',Val}) ->
'enc_ChannelID'(Val);

'enc_ChannelID'(Val) ->
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
 case Val of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=1 ->
      [20,2,<<(Tmpval1- 1):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
.


'dec_ChannelID'(Bytes,_) ->
  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1,Tmpremain1}
  end.


'enc_StaticChannelID'({'StaticChannelID',Val}) ->
'enc_StaticChannelID'(Val);

'enc_StaticChannelID'(Val) ->
  %%INTEGER with effective constraint: [{'ValueRange',{1,1000},1000,{octets,2}}]
 case Val of
    Tmpval1 when Tmpval1=<1000,Tmpval1>=1 ->
      [20,2,<<(Tmpval1- 1):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
.


'dec_StaticChannelID'(Bytes,_) ->
  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1,Tmpremain1}
  end.


'enc_DynamicChannelID'({'DynamicChannelID',Val}) ->
'enc_DynamicChannelID'(Val);

'enc_DynamicChannelID'(Val) ->
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
 case Val of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=1001 ->
      [20,2,<<(Tmpval1- 1001):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
.


'dec_DynamicChannelID'(Bytes,_) ->
  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1001,Tmpremain1}
  end.


'enc_UserID'({'UserID',Val}) ->
'enc_UserID'(Val);

'enc_UserID'(Val) ->
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
 case Val of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=1001 ->
      [20,2,<<(Tmpval1- 1001):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
.


'dec_UserID'(Bytes,_) ->
  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1001,Tmpremain1}
  end.


'enc_TokenID'({'TokenID',Val}) ->
'enc_TokenID'(Val);

'enc_TokenID'(Val) ->
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
 case Val of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=1 ->
      [20,2,<<(Tmpval1- 1):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
.


'dec_TokenID'(Bytes,_) ->
  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1,Tmpremain1}
  end.


'enc_StaticTokenID'({'StaticTokenID',Val}) ->
'enc_StaticTokenID'(Val);

'enc_StaticTokenID'(Val) ->
  %%INTEGER with effective constraint: [{'ValueRange',{1,16383},16383,{octets,2}}]
 case Val of
    Tmpval1 when Tmpval1=<16383,Tmpval1>=1 ->
      [20,2,<<(Tmpval1- 1):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
.


'dec_StaticTokenID'(Bytes,_) ->
  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1,Tmpremain1}
  end.


'enc_DynamicTokenID'({'DynamicTokenID',Val}) ->
'enc_DynamicTokenID'(Val);

'enc_DynamicTokenID'(Val) ->
  %%INTEGER with effective constraint: [{'ValueRange',{16384,65535},49152,{octets,2}}]
 case Val of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=16384 ->
      [20,2,<<(Tmpval1- 16384):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
.


'dec_DynamicTokenID'(Bytes,_) ->
  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+16384,Tmpremain1}
  end.


'enc_Time'({'Time',Val}) ->
'enc_Time'(Val);

'enc_Time'(Val) ->
  %%INTEGER with effective constraint: [{'ValueRange',{-2147483648,2147483647}}]
  ?RT_PER:encode_integer([{'ValueRange',{-2147483648,2147483647}}],Val).


'dec_Time'(Bytes,_) ->
?RT_PER:decode_constrained_number(Bytes,{-2147483648,2147483647},4294967296).


'enc_Handle'({'Handle',Val}) ->
'enc_Handle'(Val);

'enc_Handle'(Val) ->
  %%INTEGER with effective constraint: [{'ValueRange',{0,4294967295}}]
  ?RT_PER:encode_integer([{'ValueRange',{0,4294967295}}],Val).


'dec_Handle'(Bytes,_) ->
?RT_PER:decode_constrained_number(Bytes,{0,4294967295},4294967296).


'enc_H221NonStandardIdentifier'({'H221NonStandardIdentifier',Val}) ->
'enc_H221NonStandardIdentifier'(Val);

'enc_H221NonStandardIdentifier'(Val) ->
  ?RT_PER:encode_octet_string({4,255},false,Val)
.


'dec_H221NonStandardIdentifier'(Bytes,_) ->
  ?RT_PER:decode_octet_string(Bytes,{4,255},false)
.


'enc_Key'({'Key',Val}) ->
'enc_Key'(Val);

'enc_Key'(Val) ->
[
?RT_PER:set_choice(element(1,Val),[object,h221NonStandard], 2),
case element(1,Val) of
object ->
?RT_PER:encode_object_identifier(element(2,Val));
h221NonStandard ->
  ?RT_PER:encode_octet_string({4,255},false,element(2,Val))

end
].


'dec_Key'(Bytes,_) ->
{Choice,Bytes1} = ?RT_PER:getchoice(Bytes,2, 0),
{Cname,{Val,NewBytes}} = case Choice of
0 -> {object,
?RT_PER:decode_object_identifier(Bytes1)};
1 -> {h221NonStandard,
  ?RT_PER:decode_octet_string(Bytes1,{4,255},false)
}
end,

{{Cname,Val},NewBytes}.
'enc_NonStandardParameter'(Val) ->
Val1 = ?RT_PER:list_to_record('NonStandardParameter', Val),
[

%% attribute number 1 with type Externaltypereference49GCC-PROTOCOLKey
'enc_Key'(element(2,Val1)),

%% attribute number 2 with type OCTET STRING
  ?RT_PER:encode_octet_string(no,false,element(3,Val1))
].


'dec_NonStandardParameter'(Bytes,_) ->

%%  attribute number 1 with type Key
{Term1,Bytes1} = 'dec_Key'(Bytes,telltype),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes2} =   ?RT_PER:decode_octet_string(Bytes1,no,false)
,
{{'NonStandardParameter',Term1,Term2},Bytes2}.


'enc_TextString'({'TextString',Val}) ->
'enc_TextString'(Val);

'enc_TextString'(Val) ->
?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Val).


'dec_TextString'(Bytes,_) ->
?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Bytes).


'enc_SimpleTextString'({'SimpleTextString',Val}) ->
'enc_SimpleTextString'(Val);

'enc_SimpleTextString'(Val) ->
?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Val).


'dec_SimpleTextString'(Bytes,_) ->
?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Bytes).


'enc_SimpleNumericString'({'SimpleNumericString',Val}) ->
'enc_SimpleNumericString'(Val);

'enc_SimpleNumericString'(Val) ->
?RT_PER:encode_known_multiplier_string('NumericString',{1,255},4,{32,57,{0,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,1,2,3,4,5,6,7,8,9,10}},Val).


'dec_SimpleNumericString'(Bytes,_) ->
?RT_PER:decode_known_multiplier_string('NumericString',{1,255},4,{32,57,{32,48,49,50,51,52,53,54,55,56,57}},Bytes).


'enc_DiallingString'({'DiallingString',Val}) ->
'enc_DiallingString'(Val);

'enc_DiallingString'(Val) ->
?RT_PER:encode_known_multiplier_string('NumericString',{1,16},4,{32,57,{0,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,1,2,3,4,5,6,7,8,9,10}},Val).


'dec_DiallingString'(Bytes,_) ->
?RT_PER:decode_known_multiplier_string('NumericString',{1,16},4,{32,57,{32,48,49,50,51,52,53,54,55,56,57}},Bytes).


'enc_SubAddressString'({'SubAddressString',Val}) ->
'enc_SubAddressString'(Val);

'enc_SubAddressString'(Val) ->
?RT_PER:encode_known_multiplier_string('NumericString',{1,40},4,{32,57,{0,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,1,2,3,4,5,6,7,8,9,10}},Val).


'dec_SubAddressString'(Bytes,_) ->
?RT_PER:decode_known_multiplier_string('NumericString',{1,40},4,{32,57,{32,48,49,50,51,52,53,54,55,56,57}},Bytes).


'enc_ExtraDiallingString'({'ExtraDiallingString',Val}) ->
'enc_ExtraDiallingString'(Val);

'enc_ExtraDiallingString'(Val) ->
?RT_PER:encode_known_multiplier_string('BMPString',{1,255},16,{0,65535,notab},Val).


'dec_ExtraDiallingString'(Bytes,_) ->
?RT_PER:decode_known_multiplier_string('BMPString',{1,255},16,{0,65535,notab},Bytes).


'enc_UserData'({'UserData',Val}) ->
'enc_UserData'(Val);

'enc_UserData'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_UserData_components'(Val, [])
].
'enc_UserData_components'([], Acc) -> lists:reverse(Acc);

'enc_UserData_components'([H|T], Acc) ->
'enc_UserData_components'(T, ['enc_UserData_SETOF'(H)

 | Acc]).
'enc_UserData_SETOF'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
Opt,

%% attribute number 1 with type Externaltypereference73GCC-PROTOCOLKey
'enc_Key'(element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 2 with type OCTET STRING
  ?RT_PER:encode_octet_string(no,false,Tmpval1)

end].

'dec_UserData_SETOF'(Bytes,_) ->
{Opt,Bytes1} = ?RT_PER:getoptionals2(Bytes,1),
%%  attribute number 1 with type Key
{Term1,Bytes2} = 'dec_Key'(Bytes1,telltype),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = case Opt band (1 bsl 0) of
  _Opt2 when _Opt2 > 0 ->  ?RT_PER:decode_octet_string(Bytes2,no,false)
;
0 ->{asn1_NOVALUE,Bytes2}

end,
{{'UserData_SETOF',Term1,Term2},Bytes3}.



'dec_UserData'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_UserData_components'(Num, Bytes1, telltype, []).
'dec_UserData_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_UserData_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_UserData_SETOF'(Bytes, telltype),
   'dec_UserData_components'(Num-1, Remain, telltype, [Term|Acc]).
'enc_Password'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
Extensions = ?RT_PER:fixextensions({ext,3,1},Val1),
[
?RT_PER:setext(Extensions =/= []), Opt,

%% attribute number 1 with type NumericString
?RT_PER:encode_known_multiplier_string('NumericString',{1,255},4,{32,57,{0,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,1,2,3,4,5,6,7,8,9,10}},element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval2 ->

%% attribute number 2 with type BMPString
?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Tmpval2)
end
,Extensions
,
case element(4,Val1) of
asn1_NOVALUE -> [];
Tmpval3 ->

%% attribute number 3 with type BMPString
?RT_PER:encode_open_type(dummy,?RT_PER:complete(?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Tmpval3)))
end].


'dec_Password'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),
%% attribute number 1 with type NumericString
{Term1,Bytes3} = ?RT_PER:decode_known_multiplier_string('NumericString',{1,255},4,{32,57,{32,48,49,50,51,52,53,54,55,56,57}},Bytes2),

%% attribute number 2 with type BMPString
{Term2,Bytes4} = case Opt band (1 bsl 0) of
  _Opt2 when _Opt2 > 0 ->?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Bytes3);
0 ->{asn1_NOVALUE,Bytes3}

end,
{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),

%% attribute number 3 with type BMPString
{Term3,Bytes6} = case Extensions of
  <<_:0,1:1,_/bitstring>> when bit_size(Extensions) >= 1 ->
begin
{TmpVal3,Trem3}=?RT_PER:decode_open_type(Bytes5,[]),
{TmpValx3,_}=?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},TmpVal3), {TmpValx3,Trem3}
end;
_  ->
{asn1_NOVALUE,Bytes5}

end,
Bytes7= ?RT_PER:skipextensions(Bytes6,2,Extensions)
,
{{'Password',Term1,Term2,Term3},Bytes7}.


'enc_PasswordSelector'({'PasswordSelector',Val}) ->
'enc_PasswordSelector'(Val);

'enc_PasswordSelector'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[numeric,text],[unicodeText]}, {2,1}),
case element(1,Val) of
numeric ->
?RT_PER:encode_known_multiplier_string('NumericString',{1,255},4,{32,57,{0,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,1,2,3,4,5,6,7,8,9,10}},element(2,Val));
text ->
?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},element(2,Val));
unicodeText ->
?RT_PER:encode_open_type(dummy,?RT_PER:complete(?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},element(2,Val))))
end
].


'dec_PasswordSelector'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,2,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*2 of
0 -> {numeric,
?RT_PER:decode_known_multiplier_string('NumericString',{1,255},4,{32,57,{32,48,49,50,51,52,53,54,55,56,57}},Bytes2)};
1 -> {text,
?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Bytes2)};
2 -> {unicodeText,
begin
{TmpVal3,Trem3}=?RT_PER:decode_open_type(Bytes2,[]),
{TmpValx3,_}=?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},TmpVal3), {TmpValx3,Trem3}
end};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.

'enc_ChallengeResponseItem'({'ChallengeResponseItem',Val}) ->
'enc_ChallengeResponseItem'(Val);

'enc_ChallengeResponseItem'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[passwordString,responseData],[]}, {2,0}),
case element(1,Val) of
passwordString ->
'enc_PasswordSelector'(element(2,Val));
responseData ->
'enc_UserData'(element(2,Val))
end
].


'dec_ChallengeResponseItem'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,2,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*2 of
0 -> {passwordString,
'dec_PasswordSelector'(Bytes2,telltype)};
1 -> {responseData,
'dec_UserData'(Bytes2,telltype)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.

'enc_ChallengeResponseAlgorithm'({'ChallengeResponseAlgorithm',Val}) ->
'enc_ChallengeResponseAlgorithm'(Val);

'enc_ChallengeResponseAlgorithm'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[passwordInTheClear,nonStandardAlgorithm],[]}, {2,0}),
case element(1,Val) of
passwordInTheClear ->
?RT_PER:encode_null(element(2,Val));
nonStandardAlgorithm ->
'enc_NonStandardParameter'(element(2,Val))
end
].


'dec_ChallengeResponseAlgorithm'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,2,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*2 of
0 -> {passwordInTheClear,
?RT_PER:decode_null(Bytes2)};
1 -> {nonStandardAlgorithm,
'dec_NonStandardParameter'(Bytes2,telltype)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.
'enc_ChallengeItem'(Val) ->
Val1 = ?RT_PER:list_to_record('ChallengeItem', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type Externaltypereference103GCC-PROTOCOLChallengeResponseAlgorithm
'enc_ChallengeResponseAlgorithm'(element(2,Val1)),

%% attribute number 2 with type Externaltypereference104GCC-PROTOCOLUserData
'enc_UserData'(element(3,Val1))].


'dec_ChallengeItem'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%%  attribute number 1 with type ChallengeResponseAlgorithm
{Term1,Bytes2} = 'dec_ChallengeResponseAlgorithm'(Bytes1,telltype),

%%  attribute number 2 with type UserData
{Term2,Bytes3} = 'dec_UserData'(Bytes2,telltype),
{Extensions,Bytes4} = ?RT_PER:getextension(Ext,Bytes3),
Bytes5= ?RT_PER:skipextensions(Bytes4,1,Extensions)
,
{{'ChallengeItem',Term1,Term2},Bytes5}.

'enc_ChallengeRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('ChallengeRequest', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: []
  ?RT_PER:encode_integer([],element(2,Val1)),

%% attribute number 2 with type SET OF
'enc_ChallengeRequest_challengeSet'(element(3,Val1))].

'enc_ChallengeRequest_challengeSet'({'ChallengeRequest_challengeSet',Val}) ->
'enc_ChallengeRequest_challengeSet'(Val);

'enc_ChallengeRequest_challengeSet'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_ChallengeRequest_challengeSet_components'(Val, [])
].
'enc_ChallengeRequest_challengeSet_components'([], Acc) -> lists:reverse(Acc);

'enc_ChallengeRequest_challengeSet_components'([H|T], Acc) ->
'enc_ChallengeRequest_challengeSet_components'(T, ['enc_ChallengeItem'(H)

 | Acc]).

'dec_ChallengeRequest_challengeSet'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_ChallengeRequest_challengeSet_components'(Num, Bytes1, telltype, []).
'dec_ChallengeRequest_challengeSet_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ChallengeRequest_challengeSet_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_ChallengeItem'(Bytes,telltype),
   'dec_ChallengeRequest_challengeSet_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_ChallengeRequest'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = ?RT_PER:decode_unconstrained_number(Bytes1),

%% attribute number 2 with type SET OF
{Term2,Bytes3} = 'dec_ChallengeRequest_challengeSet'(Bytes2, telltype),
{Extensions,Bytes4} = ?RT_PER:getextension(Ext,Bytes3),
Bytes5= ?RT_PER:skipextensions(Bytes4,1,Extensions)
,
{{'ChallengeRequest',Term1,Term2},Bytes5}.

'enc_ChallengeResponse'(Val) ->
Val1 = ?RT_PER:list_to_record('ChallengeResponse', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: []
  ?RT_PER:encode_integer([],element(2,Val1)),

%% attribute number 2 with type Externaltypereference117GCC-PROTOCOLChallengeResponseAlgorithm
'enc_ChallengeResponseAlgorithm'(element(3,Val1)),

%% attribute number 3 with type Externaltypereference120GCC-PROTOCOLChallengeResponseItem
'enc_ChallengeResponseItem'(element(4,Val1))].


'dec_ChallengeResponse'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = ?RT_PER:decode_unconstrained_number(Bytes1),

%%  attribute number 2 with type ChallengeResponseAlgorithm
{Term2,Bytes3} = 'dec_ChallengeResponseAlgorithm'(Bytes2,telltype),

%%  attribute number 3 with type ChallengeResponseItem
{Term3,Bytes4} = 'dec_ChallengeResponseItem'(Bytes3,telltype),
{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),
Bytes6= ?RT_PER:skipextensions(Bytes5,1,Extensions)
,
{{'ChallengeResponse',Term1,Term2,Term3},Bytes6}.


'enc_PasswordChallengeRequestResponse'({'PasswordChallengeRequestResponse',Val}) ->
'enc_PasswordChallengeRequestResponse'(Val);

'enc_PasswordChallengeRequestResponse'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[passwordInTheClear,challengeRequestResponse],[]}, {2,0}),
case element(1,Val) of
passwordInTheClear ->
'enc_PasswordSelector'(element(2,Val));
challengeRequestResponse ->
'enc_PasswordChallengeRequestResponse_challengeRequestResponse'(element(2,Val))
end
].
'enc_PasswordChallengeRequestResponse_challengeRequestResponse'(Val) ->
Fixopt1 = case element(2,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt2 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1,Fixopt2]},
[
?RT_PER:setext(false), Opt,
case element(2,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 1 with type Externaltypereference127GCC-PROTOCOLChallengeRequest
'enc_ChallengeRequest'(Tmpval1)
end,
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval2 ->

%% attribute number 2 with type Externaltypereference128GCC-PROTOCOLChallengeResponse
'enc_ChallengeResponse'(Tmpval2)
end].

'dec_PasswordChallengeRequestResponse_challengeRequestResponse'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,2),
%%  attribute number 1 with type ChallengeRequest
{Term1,Bytes3} = case Opt band (1 bsl 1) of
  _Opt1 when _Opt1 > 0 ->'dec_ChallengeRequest'(Bytes2,telltype);
0 ->{asn1_NOVALUE,Bytes2}

end,

%%  attribute number 2 with type ChallengeResponse
{Term2,Bytes4} = case Opt band (1 bsl 0) of
  _Opt2 when _Opt2 > 0 ->'dec_ChallengeResponse'(Bytes3,telltype);
0 ->{asn1_NOVALUE,Bytes3}

end,
{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),
Bytes6= ?RT_PER:skipextensions(Bytes5,1,Extensions)
,
{{'PasswordChallengeRequestResponse_challengeRequestResponse',Term1,Term2},Bytes6}.



'dec_PasswordChallengeRequestResponse'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,2,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*2 of
0 -> {passwordInTheClear,
'dec_PasswordSelector'(Bytes2,telltype)};
1 -> {challengeRequestResponse,
'dec_PasswordChallengeRequestResponse_challengeRequestResponse'(Bytes2, telltype)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.
'enc_ConferenceName'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
Extensions = ?RT_PER:fixextensions({ext,3,1},Val1),
[
?RT_PER:setext(Extensions =/= []), Opt,

%% attribute number 1 with type NumericString
?RT_PER:encode_known_multiplier_string('NumericString',{1,255},4,{32,57,{0,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,1,2,3,4,5,6,7,8,9,10}},element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval2 ->

%% attribute number 2 with type BMPString
?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Tmpval2)
end
,Extensions
,
case element(4,Val1) of
asn1_NOVALUE -> [];
Tmpval3 ->

%% attribute number 3 with type BMPString
?RT_PER:encode_open_type(dummy,?RT_PER:complete(?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Tmpval3)))
end].


'dec_ConferenceName'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),
%% attribute number 1 with type NumericString
{Term1,Bytes3} = ?RT_PER:decode_known_multiplier_string('NumericString',{1,255},4,{32,57,{32,48,49,50,51,52,53,54,55,56,57}},Bytes2),

%% attribute number 2 with type BMPString
{Term2,Bytes4} = case Opt band (1 bsl 0) of
  _Opt2 when _Opt2 > 0 ->?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Bytes3);
0 ->{asn1_NOVALUE,Bytes3}

end,
{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),

%% attribute number 3 with type BMPString
{Term3,Bytes6} = case Extensions of
  <<_:0,1:1,_/bitstring>> when bit_size(Extensions) >= 1 ->
begin
{TmpVal3,Trem3}=?RT_PER:decode_open_type(Bytes5,[]),
{TmpValx3,_}=?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},TmpVal3), {TmpValx3,Trem3}
end;
_  ->
{asn1_NOVALUE,Bytes5}

end,
Bytes7= ?RT_PER:skipextensions(Bytes6,2,Extensions)
,
{{'ConferenceName',Term1,Term2,Term3},Bytes7}.


'enc_ConferenceNameSelector'({'ConferenceNameSelector',Val}) ->
'enc_ConferenceNameSelector'(Val);

'enc_ConferenceNameSelector'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[numeric,text],[unicodeText]}, {2,1}),
case element(1,Val) of
numeric ->
?RT_PER:encode_known_multiplier_string('NumericString',{1,255},4,{32,57,{0,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,1,2,3,4,5,6,7,8,9,10}},element(2,Val));
text ->
?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},element(2,Val));
unicodeText ->
?RT_PER:encode_open_type(dummy,?RT_PER:complete(?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},element(2,Val))))
end
].


'dec_ConferenceNameSelector'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,2,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*2 of
0 -> {numeric,
?RT_PER:decode_known_multiplier_string('NumericString',{1,255},4,{32,57,{32,48,49,50,51,52,53,54,55,56,57}},Bytes2)};
1 -> {text,
?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Bytes2)};
2 -> {unicodeText,
begin
{TmpVal3,Trem3}=?RT_PER:decode_open_type(Bytes2,[]),
{TmpValx3,_}=?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},TmpVal3), {TmpValx3,Trem3}
end};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.

'enc_ConferenceNameModifier'({'ConferenceNameModifier',Val}) ->
'enc_ConferenceNameModifier'(Val);

'enc_ConferenceNameModifier'(Val) ->
?RT_PER:encode_known_multiplier_string('NumericString',{1,255},4,{32,57,{0,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,1,2,3,4,5,6,7,8,9,10}},Val).


'dec_ConferenceNameModifier'(Bytes,_) ->
?RT_PER:decode_known_multiplier_string('NumericString',{1,255},4,{32,57,{32,48,49,50,51,52,53,54,55,56,57}},Bytes).


'enc_Privilege'({'Privilege',Val}) ->
'enc_Privilege'(Val);

'enc_Privilege'(Val) ->
case Val of
'terminate' -> [0,10,3,0];
'ejectUser' -> [0,10,3,1];
'add' -> [0,10,3,2];
'lockUnlock' -> [0,10,3,3];
'transfer' -> [0,10,3,4];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end.


'dec_Privilege'(Bytes,_) ->
?RT_PER:decode_enumerated(Bytes,[{'ValueRange',{0,4}}],{{terminate,ejectUser,add,lockUnlock,transfer},{}}).


'enc_TerminationMethod'({'TerminationMethod',Val}) ->
'enc_TerminationMethod'(Val);

'enc_TerminationMethod'(Val) ->
case Val of
'automatic' -> [0,0];
'manual' -> [0,1];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end.


'dec_TerminationMethod'(Bytes,_) ->
?RT_PER:decode_enumerated(Bytes,[{'ValueRange',{0,1}}],{{automatic,manual},{}}).


'enc_ConferencePriorityScheme'({'ConferencePriorityScheme',Val}) ->
'enc_ConferencePriorityScheme'(Val);

'enc_ConferencePriorityScheme'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[nonStandardScheme],[]}, {1,0}),
case element(1,Val) of
nonStandardScheme ->
'enc_NonStandardParameter'(element(2,Val))
end
].


'dec_ConferencePriorityScheme'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,1,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*1 of
0 -> {nonStandardScheme,
'dec_NonStandardParameter'(Bytes2,telltype)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.
'enc_ConferencePriority'(Val) ->
Val1 = ?RT_PER:list_to_record('ConferencePriority', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type Externaltypereference163GCC-PROTOCOLConferencePriorityScheme
'enc_ConferencePriorityScheme'(element(3,Val1))].


'dec_ConferencePriority'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type INTEGER
{Term1,Bytes2} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%%  attribute number 2 with type ConferencePriorityScheme
{Term2,Bytes3} = 'dec_ConferencePriorityScheme'(Bytes2,telltype),
{Extensions,Bytes4} = ?RT_PER:getextension(Ext,Bytes3),
Bytes5= ?RT_PER:skipextensions(Bytes4,1,Extensions)
,
{{'ConferencePriority',Term1,Term2},Bytes5}.


'enc_NodeCategory'({'NodeCategory',Val}) ->
'enc_NodeCategory'(Val);

'enc_NodeCategory'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[conventional,counted,anonymous,nonStandardCategory],[]}, {4,0}),
case element(1,Val) of
conventional ->
?RT_PER:encode_null(element(2,Val));
counted ->
?RT_PER:encode_null(element(2,Val));
anonymous ->
?RT_PER:encode_null(element(2,Val));
nonStandardCategory ->
'enc_NonStandardParameter'(element(2,Val))
end
].


'dec_NodeCategory'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,4,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*4 of
0 -> {conventional,
?RT_PER:decode_null(Bytes2)};
1 -> {counted,
?RT_PER:decode_null(Bytes2)};
2 -> {anonymous,
?RT_PER:decode_null(Bytes2)};
3 -> {nonStandardCategory,
'dec_NonStandardParameter'(Bytes2,telltype)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.

'enc_ConferenceMode'({'ConferenceMode',Val}) ->
'enc_ConferenceMode'(Val);

'enc_ConferenceMode'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{['conventional-only','counted-only','anonymous-only','conventional-control','unrestricted-mode','non-standard-mode'],[]}, {6,0}),
case element(1,Val) of
'conventional-only' ->
?RT_PER:encode_null(element(2,Val));
'counted-only' ->
?RT_PER:encode_null(element(2,Val));
'anonymous-only' ->
?RT_PER:encode_null(element(2,Val));
'conventional-control' ->
?RT_PER:encode_null(element(2,Val));
'unrestricted-mode' ->
?RT_PER:encode_null(element(2,Val));
'non-standard-mode' ->
'enc_NonStandardParameter'(element(2,Val))
end
].


'dec_ConferenceMode'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,6,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*6 of
0 -> {'conventional-only',
?RT_PER:decode_null(Bytes2)};
1 -> {'counted-only',
?RT_PER:decode_null(Bytes2)};
2 -> {'anonymous-only',
?RT_PER:decode_null(Bytes2)};
3 -> {'conventional-control',
?RT_PER:decode_null(Bytes2)};
4 -> {'unrestricted-mode',
?RT_PER:decode_null(Bytes2)};
5 -> {'non-standard-mode',
'dec_NonStandardParameter'(Bytes2,telltype)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.

'enc_NetworkAddress'({'NetworkAddress',Val}) ->
'enc_NetworkAddress'(Val);

'enc_NetworkAddress'(Val) ->
[

[10,6,(length(Val) - 1)],
   'enc_NetworkAddress_components'(Val, [])
].
'enc_NetworkAddress_components'([], Acc) -> lists:reverse(Acc);

'enc_NetworkAddress_components'([H|T], Acc) ->
'enc_NetworkAddress_components'(T, ['enc_NetworkAddress_SEQOF'(H)

 | Acc]).

'enc_NetworkAddress_SEQOF'({'NetworkAddress_SEQOF',Val}) ->
'enc_NetworkAddress_SEQOF'(Val);

'enc_NetworkAddress_SEQOF'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[aggregatedChannel,transportConnection,nonStandard],[]}, {3,0}),
case element(1,Val) of
aggregatedChannel ->
'enc_NetworkAddress_SEQOF_aggregatedChannel'(element(2,Val));
transportConnection ->
'enc_NetworkAddress_SEQOF_transportConnection'(element(2,Val));
nonStandard ->
'enc_NonStandardParameter'(element(2,Val))
end
].
'enc_NetworkAddress_SEQOF_aggregatedChannel'(Val) ->
Fixopt1 = case element(4,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt2 = case element(5,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt3 = case element(6,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1,Fixopt2,Fixopt3]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type SEQUENCE
'enc_NetworkAddress_SEQOF_aggregatedChannel_transferModes'(element(2,Val1)),

%% attribute number 2 with type NumericString
?RT_PER:encode_known_multiplier_string('NumericString',{1,16},4,{32,57,{0,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,1,2,3,4,5,6,7,8,9,10}},element(3,Val1)),
case element(4,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 3 with type NumericString
?RT_PER:encode_known_multiplier_string('NumericString',{1,40},4,{32,57,{0,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,1,2,3,4,5,6,7,8,9,10}},Tmpval1)
end,
case element(5,Val1) of
asn1_NOVALUE -> [];
Tmpval2 ->

%% attribute number 4 with type BMPString
?RT_PER:encode_known_multiplier_string('BMPString',{1,255},16,{0,65535,notab},Tmpval2)
end,
case element(6,Val1) of
asn1_NOVALUE -> [];
Tmpval3 ->

%% attribute number 5 with type SEQUENCE
'enc_NetworkAddress_SEQOF_aggregatedChannel_highLayerCompatibility'(Tmpval3)
end].
'enc_NetworkAddress_SEQOF_aggregatedChannel_transferModes'(Val) ->
Val1 = ?RT_PER:list_to_record('NetworkAddress_SEQOF_aggregatedChannel_transferModes', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type BOOLEAN
case element(2,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(2,Val1)}}})
end,

%% attribute number 2 with type BOOLEAN
case element(3,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(3,Val1)}}})
end,

%% attribute number 3 with type BOOLEAN
case element(4,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(4,Val1)}}})
end,

%% attribute number 4 with type BOOLEAN
case element(5,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(5,Val1)}}})
end,

%% attribute number 5 with type BOOLEAN
case element(6,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(6,Val1)}}})
end,

%% attribute number 6 with type BOOLEAN
case element(7,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(7,Val1)}}})
end,

%% attribute number 7 with type BOOLEAN
case element(8,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(8,Val1)}}})
end,

%% attribute number 8 with type BOOLEAN
case element(9,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(9,Val1)}}})
end,

%% attribute number 9 with type BOOLEAN
case element(10,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(10,Val1)}}})
end,

%% attribute number 10 with type BOOLEAN
case element(11,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(11,Val1)}}})
end,

%% attribute number 11 with type BOOLEAN
case element(12,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(12,Val1)}}})
end,

%% attribute number 12 with type BOOLEAN
case element(13,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(13,Val1)}}})
end,

%% attribute number 13 with type BOOLEAN
case element(14,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(14,Val1)}}})
end,

%% attribute number 14 with type BOOLEAN
case element(15,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(15,Val1)}}})
end,

%% attribute number 15 with type BOOLEAN
case element(16,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(16,Val1)}}})
end,

%% attribute number 16 with type BOOLEAN
case element(17,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(17,Val1)}}})
end,

%% attribute number 17 with type BOOLEAN
case element(18,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(18,Val1)}}})
end,

%% attribute number 18 with type BOOLEAN
case element(19,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(19,Val1)}}})
end].

'dec_NetworkAddress_SEQOF_aggregatedChannel_transferModes'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = ?RT_PER:decode_boolean(Bytes1),

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = ?RT_PER:decode_boolean(Bytes2),

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = ?RT_PER:decode_boolean(Bytes3),

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = ?RT_PER:decode_boolean(Bytes4),

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = ?RT_PER:decode_boolean(Bytes5),

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = ?RT_PER:decode_boolean(Bytes6),

%% attribute number 7 with type BOOLEAN
{Term7,Bytes8} = ?RT_PER:decode_boolean(Bytes7),

%% attribute number 8 with type BOOLEAN
{Term8,Bytes9} = ?RT_PER:decode_boolean(Bytes8),

%% attribute number 9 with type BOOLEAN
{Term9,Bytes10} = ?RT_PER:decode_boolean(Bytes9),

%% attribute number 10 with type BOOLEAN
{Term10,Bytes11} = ?RT_PER:decode_boolean(Bytes10),

%% attribute number 11 with type BOOLEAN
{Term11,Bytes12} = ?RT_PER:decode_boolean(Bytes11),

%% attribute number 12 with type BOOLEAN
{Term12,Bytes13} = ?RT_PER:decode_boolean(Bytes12),

%% attribute number 13 with type BOOLEAN
{Term13,Bytes14} = ?RT_PER:decode_boolean(Bytes13),

%% attribute number 14 with type BOOLEAN
{Term14,Bytes15} = ?RT_PER:decode_boolean(Bytes14),

%% attribute number 15 with type BOOLEAN
{Term15,Bytes16} = ?RT_PER:decode_boolean(Bytes15),

%% attribute number 16 with type BOOLEAN
{Term16,Bytes17} = ?RT_PER:decode_boolean(Bytes16),

%% attribute number 17 with type BOOLEAN
{Term17,Bytes18} = ?RT_PER:decode_boolean(Bytes17),

%% attribute number 18 with type BOOLEAN
{Term18,Bytes19} = ?RT_PER:decode_boolean(Bytes18),
{Extensions,Bytes20} = ?RT_PER:getextension(Ext,Bytes19),
Bytes21= ?RT_PER:skipextensions(Bytes20,1,Extensions)
,
{{'NetworkAddress_SEQOF_aggregatedChannel_transferModes',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18},Bytes21}.

'enc_NetworkAddress_SEQOF_aggregatedChannel_highLayerCompatibility'(Val) ->
Val1 = ?RT_PER:list_to_record('NetworkAddress_SEQOF_aggregatedChannel_highLayerCompatibility', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type BOOLEAN
case element(2,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(2,Val1)}}})
end,

%% attribute number 2 with type BOOLEAN
case element(3,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(3,Val1)}}})
end,

%% attribute number 3 with type BOOLEAN
case element(4,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(4,Val1)}}})
end,

%% attribute number 4 with type BOOLEAN
case element(5,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(5,Val1)}}})
end,

%% attribute number 5 with type BOOLEAN
case element(6,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(6,Val1)}}})
end,

%% attribute number 6 with type BOOLEAN
case element(7,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(7,Val1)}}})
end,

%% attribute number 7 with type BOOLEAN
case element(8,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(8,Val1)}}})
end].

'dec_NetworkAddress_SEQOF_aggregatedChannel_highLayerCompatibility'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = ?RT_PER:decode_boolean(Bytes1),

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = ?RT_PER:decode_boolean(Bytes2),

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = ?RT_PER:decode_boolean(Bytes3),

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = ?RT_PER:decode_boolean(Bytes4),

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = ?RT_PER:decode_boolean(Bytes5),

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = ?RT_PER:decode_boolean(Bytes6),

%% attribute number 7 with type BOOLEAN
{Term7,Bytes8} = ?RT_PER:decode_boolean(Bytes7),
{Extensions,Bytes9} = ?RT_PER:getextension(Ext,Bytes8),
Bytes10= ?RT_PER:skipextensions(Bytes9,1,Extensions)
,
{{'NetworkAddress_SEQOF_aggregatedChannel_highLayerCompatibility',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes10}.


'dec_NetworkAddress_SEQOF_aggregatedChannel'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,3),
%% attribute number 1 with type SEQUENCE
{Term1,Bytes3} = 'dec_NetworkAddress_SEQOF_aggregatedChannel_transferModes'(Bytes2, telltype),

%% attribute number 2 with type NumericString
{Term2,Bytes4} = ?RT_PER:decode_known_multiplier_string('NumericString',{1,16},4,{32,57,{32,48,49,50,51,52,53,54,55,56,57}},Bytes3),

%% attribute number 3 with type NumericString
{Term3,Bytes5} = case Opt band (1 bsl 2) of
  _Opt3 when _Opt3 > 0 ->?RT_PER:decode_known_multiplier_string('NumericString',{1,40},4,{32,57,{32,48,49,50,51,52,53,54,55,56,57}},Bytes4);
0 ->{asn1_NOVALUE,Bytes4}

end,

%% attribute number 4 with type BMPString
{Term4,Bytes6} = case Opt band (1 bsl 1) of
  _Opt4 when _Opt4 > 0 ->?RT_PER:decode_known_multiplier_string('BMPString',{1,255},16,{0,65535,notab},Bytes5);
0 ->{asn1_NOVALUE,Bytes5}

end,

%% attribute number 5 with type SEQUENCE
{Term5,Bytes7} = case Opt band (1 bsl 0) of
  _Opt5 when _Opt5 > 0 ->'dec_NetworkAddress_SEQOF_aggregatedChannel_highLayerCompatibility'(Bytes6, telltype);
0 ->{asn1_NOVALUE,Bytes6}

end,
{Extensions,Bytes8} = ?RT_PER:getextension(Ext,Bytes7),
Bytes9= ?RT_PER:skipextensions(Bytes8,1,Extensions)
,
{{'NetworkAddress_SEQOF_aggregatedChannel',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_NetworkAddress_SEQOF_transportConnection'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
Opt,

%% attribute number 1 with type OCTET STRING
  ?RT_PER:encode_octet_string({1,20},false,element(2,Val1))
,
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 2 with type OCTET STRING
  ?RT_PER:encode_octet_string(no,false,Tmpval1)

end].

'dec_NetworkAddress_SEQOF_transportConnection'(Bytes,_) ->
{Opt,Bytes1} = ?RT_PER:getoptionals2(Bytes,1),
%% attribute number 1 with type OCTET STRING
{Term1,Bytes2} =   ?RT_PER:decode_octet_string(Bytes1,{1,20},false)
,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = case Opt band (1 bsl 0) of
  _Opt2 when _Opt2 > 0 ->  ?RT_PER:decode_octet_string(Bytes2,no,false)
;
0 ->{asn1_NOVALUE,Bytes2}

end,
{{'NetworkAddress_SEQOF_transportConnection',Term1,Term2},Bytes3}.


'dec_NetworkAddress_SEQOF'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,3,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*3 of
0 -> {aggregatedChannel,
'dec_NetworkAddress_SEQOF_aggregatedChannel'(Bytes2, telltype)};
1 -> {transportConnection,
'dec_NetworkAddress_SEQOF_transportConnection'(Bytes2, telltype)};
2 -> {nonStandard,
'dec_NonStandardParameter'(Bytes2,telltype)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.


'dec_NetworkAddress'(Bytes,_) ->

{Val,Remain} = ?RT_PER:getbits(Bytes,6),

{Num,Bytes1} = {Val+1,Remain},
'dec_NetworkAddress_components'(Num, Bytes1, telltype, []).
'dec_NetworkAddress_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_NetworkAddress_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_NetworkAddress_SEQOF'(Bytes, telltype),
   'dec_NetworkAddress_components'(Num-1, Remain, telltype, [Term|Acc]).
'enc_MediaList'(Val) ->
Val1 = ?RT_PER:list_to_record('MediaList', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type BOOLEAN
case element(2,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(2,Val1)}}})
end,

%% attribute number 2 with type BOOLEAN
case element(3,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(3,Val1)}}})
end,

%% attribute number 3 with type BOOLEAN
case element(4,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(4,Val1)}}})
end].


'dec_MediaList'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = ?RT_PER:decode_boolean(Bytes1),

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = ?RT_PER:decode_boolean(Bytes2),

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = ?RT_PER:decode_boolean(Bytes3),
{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),
Bytes6= ?RT_PER:skipextensions(Bytes5,1,Extensions)
,
{{'MediaList',Term1,Term2,Term3},Bytes6}.


'enc_ChannelAggregationMethod'({'ChannelAggregationMethod',Val}) ->
'enc_ChannelAggregationMethod'(Val);

'enc_ChannelAggregationMethod'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[h221,h244,'iso-iec-13871',nonStandard],[]}, {4,0}),
case element(1,Val) of
h221 ->
?RT_PER:encode_null(element(2,Val));
h244 ->
?RT_PER:encode_null(element(2,Val));
'iso-iec-13871' ->
?RT_PER:encode_null(element(2,Val));
nonStandard ->
'enc_NonStandardParameter'(element(2,Val))
end
].


'dec_ChannelAggregationMethod'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,4,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*4 of
0 -> {h221,
?RT_PER:decode_null(Bytes2)};
1 -> {h244,
?RT_PER:decode_null(Bytes2)};
2 -> {'iso-iec-13871',
?RT_PER:decode_null(Bytes2)};
3 -> {nonStandard,
'dec_NonStandardParameter'(Bytes2,telltype)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.

'enc_Profile'({'Profile',Val}) ->
'enc_Profile'(Val);

'enc_Profile'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[simpleProfile,multimediaProfile,dsmccDownloadProfile,nonStandard],[]}, {4,0}),
case element(1,Val) of
simpleProfile ->
'enc_Profile_simpleProfile'(element(2,Val));
multimediaProfile ->
'enc_Profile_multimediaProfile'(element(2,Val));
dsmccDownloadProfile ->
?RT_PER:encode_null(element(2,Val));
nonStandard ->
'enc_NonStandardParameter'(element(2,Val))
end
].

'enc_Profile_simpleProfile'({'Profile_simpleProfile',Val}) ->
'enc_Profile_simpleProfile'(Val);

'enc_Profile_simpleProfile'(Val) ->
[
?RT_PER:set_choice(element(1,Val),[speech,'telephony-3kHz','telephony-7kHz','voice-band',frameRelay,'t123-pstn-basic','t123-psdn-basic','t123-b-isdn-basic'], 8),
case element(1,Val) of
speech ->
?RT_PER:encode_null(element(2,Val));
'telephony-3kHz' ->
?RT_PER:encode_null(element(2,Val));
'telephony-7kHz' ->
?RT_PER:encode_null(element(2,Val));
'voice-band' ->
?RT_PER:encode_null(element(2,Val));
frameRelay ->
?RT_PER:encode_null(element(2,Val));
't123-pstn-basic' ->
?RT_PER:encode_null(element(2,Val));
't123-psdn-basic' ->
?RT_PER:encode_null(element(2,Val));
't123-b-isdn-basic' ->
?RT_PER:encode_null(element(2,Val))
end
].

'dec_Profile_simpleProfile'(Bytes,_) ->
{Choice,Bytes1} = ?RT_PER:getchoice(Bytes,8, 0),
{Cname,{Val,NewBytes}} = case Choice of
0 -> {speech,
?RT_PER:decode_null(Bytes1)};
1 -> {'telephony-3kHz',
?RT_PER:decode_null(Bytes1)};
2 -> {'telephony-7kHz',
?RT_PER:decode_null(Bytes1)};
3 -> {'voice-band',
?RT_PER:decode_null(Bytes1)};
4 -> {frameRelay,
?RT_PER:decode_null(Bytes1)};
5 -> {'t123-pstn-basic',
?RT_PER:decode_null(Bytes1)};
6 -> {'t123-psdn-basic',
?RT_PER:decode_null(Bytes1)};
7 -> {'t123-b-isdn-basic',
?RT_PER:decode_null(Bytes1)}
end,

{{Cname,Val},NewBytes}.
'enc_Profile_multimediaProfile'(Val) ->
Val1 = ?RT_PER:list_to_record('Profile_multimediaProfile', Val),
[

%% attribute number 1 with type CHOICE
'enc_Profile_multimediaProfile_profile'(element(2,Val1)),

%% attribute number 2 with type BOOLEAN
case element(3,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(3,Val1)}}})
end].

'enc_Profile_multimediaProfile_profile'({'Profile_multimediaProfile_profile',Val}) ->
'enc_Profile_multimediaProfile_profile'(Val);

'enc_Profile_multimediaProfile_profile'(Val) ->
[
?RT_PER:set_choice(element(1,Val),[h310,h320,h321,h322,h323,h324,h324m,asvd,dsvd], 9),
case element(1,Val) of
h310 ->
?RT_PER:encode_null(element(2,Val));
h320 ->
?RT_PER:encode_null(element(2,Val));
h321 ->
?RT_PER:encode_null(element(2,Val));
h322 ->
?RT_PER:encode_null(element(2,Val));
h323 ->
?RT_PER:encode_null(element(2,Val));
h324 ->
?RT_PER:encode_null(element(2,Val));
h324m ->
?RT_PER:encode_null(element(2,Val));
asvd ->
?RT_PER:encode_null(element(2,Val));
dsvd ->
?RT_PER:encode_null(element(2,Val))
end
].

'dec_Profile_multimediaProfile_profile'(Bytes,_) ->
{Choice,Bytes1} = ?RT_PER:getchoice(Bytes,9, 0),
{Cname,{Val,NewBytes}} = case Choice of
0 -> {h310,
?RT_PER:decode_null(Bytes1)};
1 -> {h320,
?RT_PER:decode_null(Bytes1)};
2 -> {h321,
?RT_PER:decode_null(Bytes1)};
3 -> {h322,
?RT_PER:decode_null(Bytes1)};
4 -> {h323,
?RT_PER:decode_null(Bytes1)};
5 -> {h324,
?RT_PER:decode_null(Bytes1)};
6 -> {h324m,
?RT_PER:decode_null(Bytes1)};
7 -> {asvd,
?RT_PER:decode_null(Bytes1)};
8 -> {dsvd,
?RT_PER:decode_null(Bytes1)}
end,

{{Cname,Val},NewBytes}.

'dec_Profile_multimediaProfile'(Bytes,_) ->

%% attribute number 1 with type CHOICE
{Term1,Bytes1} = 'dec_Profile_multimediaProfile_profile'(Bytes, telltype),

%% attribute number 2 with type BOOLEAN
{Term2,Bytes2} = ?RT_PER:decode_boolean(Bytes1),
{{'Profile_multimediaProfile',Term1,Term2},Bytes2}.



'dec_Profile'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,4,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*4 of
0 -> {simpleProfile,
'dec_Profile_simpleProfile'(Bytes2, telltype)};
1 -> {multimediaProfile,
'dec_Profile_multimediaProfile'(Bytes2, telltype)};
2 -> {dsmccDownloadProfile,
?RT_PER:decode_null(Bytes2)};
3 -> {nonStandard,
'dec_NonStandardParameter'(Bytes2,telltype)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.
'enc_ExtendedE164NetworkAddress'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt2 = case element(4,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1,Fixopt2]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type NumericString
?RT_PER:encode_known_multiplier_string('NumericString',{1,16},4,{32,57,{0,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,1,2,3,4,5,6,7,8,9,10}},element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 2 with type NumericString
?RT_PER:encode_known_multiplier_string('NumericString',{1,40},4,{32,57,{0,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,1,2,3,4,5,6,7,8,9,10}},Tmpval1)
end,
case element(4,Val1) of
asn1_NOVALUE -> [];
Tmpval2 ->

%% attribute number 3 with type BMPString
?RT_PER:encode_known_multiplier_string('BMPString',{1,255},16,{0,65535,notab},Tmpval2)
end].


'dec_ExtendedE164NetworkAddress'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,2),
%% attribute number 1 with type NumericString
{Term1,Bytes3} = ?RT_PER:decode_known_multiplier_string('NumericString',{1,16},4,{32,57,{32,48,49,50,51,52,53,54,55,56,57}},Bytes2),

%% attribute number 2 with type NumericString
{Term2,Bytes4} = case Opt band (1 bsl 1) of
  _Opt2 when _Opt2 > 0 ->?RT_PER:decode_known_multiplier_string('NumericString',{1,40},4,{32,57,{32,48,49,50,51,52,53,54,55,56,57}},Bytes3);
0 ->{asn1_NOVALUE,Bytes3}

end,

%% attribute number 3 with type BMPString
{Term3,Bytes5} = case Opt band (1 bsl 0) of
  _Opt3 when _Opt3 > 0 ->?RT_PER:decode_known_multiplier_string('BMPString',{1,255},16,{0,65535,notab},Bytes4);
0 ->{asn1_NOVALUE,Bytes4}

end,
{Extensions,Bytes6} = ?RT_PER:getextension(Ext,Bytes5),
Bytes7= ?RT_PER:skipextensions(Bytes6,1,Extensions)
,
{{'ExtendedE164NetworkAddress',Term1,Term2,Term3},Bytes7}.

'enc_TransportAddress'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
Opt,

%% attribute number 1 with type OCTET STRING
  ?RT_PER:encode_octet_string({1,20},false,element(2,Val1))
,
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 2 with type OCTET STRING
  ?RT_PER:encode_octet_string(no,false,Tmpval1)

end].


'dec_TransportAddress'(Bytes,_) ->
{Opt,Bytes1} = ?RT_PER:getoptionals2(Bytes,1),
%% attribute number 1 with type OCTET STRING
{Term1,Bytes2} =   ?RT_PER:decode_octet_string(Bytes1,{1,20},false)
,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = case Opt band (1 bsl 0) of
  _Opt2 when _Opt2 > 0 ->  ?RT_PER:decode_octet_string(Bytes2,no,false)
;
0 ->{asn1_NOVALUE,Bytes2}

end,
{{'TransportAddress',Term1,Term2},Bytes3}.

'enc_GSTNConnection'(Val) ->
Val1 = ?RT_PER:list_to_record('GSTNConnection', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type Externaltypereference285GCC-PROTOCOLExtendedE164NetworkAddress
'enc_ExtendedE164NetworkAddress'(element(2,Val1))].


'dec_GSTNConnection'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%%  attribute number 1 with type ExtendedE164NetworkAddress
{Term1,Bytes2} = 'dec_ExtendedE164NetworkAddress'(Bytes1,telltype),
{Extensions,Bytes3} = ?RT_PER:getextension(Ext,Bytes2),
Bytes4= ?RT_PER:skipextensions(Bytes3,1,Extensions)
,
{{'GSTNConnection',Term1},Bytes4}.

'enc_ISDNConnection'(Val) ->
Fixopt1 = case element(4,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type SET OF
'enc_ISDNConnection_circuitTypes'(element(2,Val1)),

%% attribute number 2 with type Externaltypereference298GCC-PROTOCOLExtendedE164NetworkAddress
'enc_ExtendedE164NetworkAddress'(element(3,Val1)),
case element(4,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 3 with type SEQUENCE
'enc_ISDNConnection_highLayerCompatibility'(Tmpval1)
end].

'enc_ISDNConnection_circuitTypes'({'ISDNConnection_circuitTypes',Val}) ->
'enc_ISDNConnection_circuitTypes'(Val);

'enc_ISDNConnection_circuitTypes'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_ISDNConnection_circuitTypes_components'(Val, [])
].
'enc_ISDNConnection_circuitTypes_components'([], Acc) -> lists:reverse(Acc);

'enc_ISDNConnection_circuitTypes_components'([H|T], Acc) ->
'enc_ISDNConnection_circuitTypes_components'(T, ['enc_ISDNConnection_circuitTypes_SETOF'(H)

 | Acc]).

'enc_ISDNConnection_circuitTypes_SETOF'({'ISDNConnection_circuitTypes_SETOF',Val}) ->
'enc_ISDNConnection_circuitTypes_SETOF'(Val);

'enc_ISDNConnection_circuitTypes_SETOF'(Val) ->
[
?RT_PER:set_choice(element(1,Val),['digital-64k','digital-2x64k','digital-384k','digital-1536','digital-1920k','multirate-base-64k'], 6),
case element(1,Val) of
'digital-64k' ->
?RT_PER:encode_null(element(2,Val));
'digital-2x64k' ->
?RT_PER:encode_null(element(2,Val));
'digital-384k' ->
?RT_PER:encode_null(element(2,Val));
'digital-1536' ->
?RT_PER:encode_null(element(2,Val));
'digital-1920k' ->
?RT_PER:encode_null(element(2,Val));
'multirate-base-64k' ->
  %%INTEGER with effective constraint: [{'ValueRange',{1,30},30,{bits,5}}]
 case element(2,Val) of
    Tmpval1 when Tmpval1=<30,Tmpval1>=1 ->
      [10,5,Tmpval1- 1];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end

end
].

'dec_ISDNConnection_circuitTypes_SETOF'(Bytes,_) ->
{Choice,Bytes1} = ?RT_PER:getchoice(Bytes,6, 0),
{Cname,{Val,NewBytes}} = case Choice of
0 -> {'digital-64k',
?RT_PER:decode_null(Bytes1)};
1 -> {'digital-2x64k',
?RT_PER:decode_null(Bytes1)};
2 -> {'digital-384k',
?RT_PER:decode_null(Bytes1)};
3 -> {'digital-1536',
?RT_PER:decode_null(Bytes1)};
4 -> {'digital-1920k',
?RT_PER:decode_null(Bytes1)};
5 -> {'multirate-base-64k',
  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getbits(Bytes1,5),
    {Tmpterm1+1,Tmpremain1}
  end}
end,

{{Cname,Val},NewBytes}.

'dec_ISDNConnection_circuitTypes'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_ISDNConnection_circuitTypes_components'(Num, Bytes1, telltype, []).
'dec_ISDNConnection_circuitTypes_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ISDNConnection_circuitTypes_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_ISDNConnection_circuitTypes_SETOF'(Bytes, telltype),
   'dec_ISDNConnection_circuitTypes_components'(Num-1, Remain, telltype, [Term|Acc]).
'enc_ISDNConnection_highLayerCompatibility'(Val) ->
Val1 = ?RT_PER:list_to_record('ISDNConnection_highLayerCompatibility', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type BOOLEAN
case element(2,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(2,Val1)}}})
end,

%% attribute number 2 with type BOOLEAN
case element(3,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(3,Val1)}}})
end,

%% attribute number 3 with type BOOLEAN
case element(4,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(4,Val1)}}})
end,

%% attribute number 4 with type BOOLEAN
case element(5,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(5,Val1)}}})
end,

%% attribute number 5 with type BOOLEAN
case element(6,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(6,Val1)}}})
end,

%% attribute number 6 with type BOOLEAN
case element(7,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(7,Val1)}}})
end,

%% attribute number 7 with type BOOLEAN
case element(8,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(8,Val1)}}})
end].

'dec_ISDNConnection_highLayerCompatibility'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = ?RT_PER:decode_boolean(Bytes1),

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = ?RT_PER:decode_boolean(Bytes2),

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = ?RT_PER:decode_boolean(Bytes3),

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = ?RT_PER:decode_boolean(Bytes4),

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = ?RT_PER:decode_boolean(Bytes5),

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = ?RT_PER:decode_boolean(Bytes6),

%% attribute number 7 with type BOOLEAN
{Term7,Bytes8} = ?RT_PER:decode_boolean(Bytes7),
{Extensions,Bytes9} = ?RT_PER:getextension(Ext,Bytes8),
Bytes10= ?RT_PER:skipextensions(Bytes9,1,Extensions)
,
{{'ISDNConnection_highLayerCompatibility',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes10}.



'dec_ISDNConnection'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),
%% attribute number 1 with type SET OF
{Term1,Bytes3} = 'dec_ISDNConnection_circuitTypes'(Bytes2, telltype),

%%  attribute number 2 with type ExtendedE164NetworkAddress
{Term2,Bytes4} = 'dec_ExtendedE164NetworkAddress'(Bytes3,telltype),

%% attribute number 3 with type SEQUENCE
{Term3,Bytes5} = case Opt band (1 bsl 0) of
  _Opt3 when _Opt3 > 0 ->'dec_ISDNConnection_highLayerCompatibility'(Bytes4, telltype);
0 ->{asn1_NOVALUE,Bytes4}

end,
{Extensions,Bytes6} = ?RT_PER:getextension(Ext,Bytes5),
Bytes7= ?RT_PER:skipextensions(Bytes6,1,Extensions)
,
{{'ISDNConnection',Term1,Term2,Term3},Bytes7}.

'enc_CSDNConnection'(Val) ->
Val1 = ?RT_PER:list_to_record('CSDNConnection', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type SET OF
'enc_CSDNConnection_circuitTypes'(element(2,Val1)),

%% attribute number 2 with type Externaltypereference324GCC-PROTOCOLExtendedE164NetworkAddress
'enc_ExtendedE164NetworkAddress'(element(3,Val1))].

'enc_CSDNConnection_circuitTypes'({'CSDNConnection_circuitTypes',Val}) ->
'enc_CSDNConnection_circuitTypes'(Val);

'enc_CSDNConnection_circuitTypes'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_CSDNConnection_circuitTypes_components'(Val, [])
].
'enc_CSDNConnection_circuitTypes_components'([], Acc) -> lists:reverse(Acc);

'enc_CSDNConnection_circuitTypes_components'([H|T], Acc) ->
'enc_CSDNConnection_circuitTypes_components'(T, ['enc_CSDNConnection_circuitTypes_SETOF'(H)

 | Acc]).

'enc_CSDNConnection_circuitTypes_SETOF'({'CSDNConnection_circuitTypes_SETOF',Val}) ->
'enc_CSDNConnection_circuitTypes_SETOF'(Val);

'enc_CSDNConnection_circuitTypes_SETOF'(Val) ->
[
?RT_PER:set_choice(element(1,Val),['digital-56k','digital-64k'], 2),
case element(1,Val) of
'digital-56k' ->
?RT_PER:encode_null(element(2,Val));
'digital-64k' ->
?RT_PER:encode_null(element(2,Val))
end
].

'dec_CSDNConnection_circuitTypes_SETOF'(Bytes,_) ->
{Choice,Bytes1} = ?RT_PER:getchoice(Bytes,2, 0),
{Cname,{Val,NewBytes}} = case Choice of
0 -> {'digital-56k',
?RT_PER:decode_null(Bytes1)};
1 -> {'digital-64k',
?RT_PER:decode_null(Bytes1)}
end,

{{Cname,Val},NewBytes}.

'dec_CSDNConnection_circuitTypes'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_CSDNConnection_circuitTypes_components'(Num, Bytes1, telltype, []).
'dec_CSDNConnection_circuitTypes_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_CSDNConnection_circuitTypes_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_CSDNConnection_circuitTypes_SETOF'(Bytes, telltype),
   'dec_CSDNConnection_circuitTypes_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_CSDNConnection'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type SET OF
{Term1,Bytes2} = 'dec_CSDNConnection_circuitTypes'(Bytes1, telltype),

%%  attribute number 2 with type ExtendedE164NetworkAddress
{Term2,Bytes3} = 'dec_ExtendedE164NetworkAddress'(Bytes2,telltype),
{Extensions,Bytes4} = ?RT_PER:getextension(Ext,Bytes3),
Bytes5= ?RT_PER:skipextensions(Bytes4,1,Extensions)
,
{{'CSDNConnection',Term1,Term2},Bytes5}.

'enc_PSDNConnection'(Val) ->
Val1 = ?RT_PER:list_to_record('PSDNConnection', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type CHOICE
'enc_PSDNConnection_networkAddress'(element(2,Val1))].

'enc_PSDNConnection_networkAddress'({'PSDNConnection_networkAddress',Val}) ->
'enc_PSDNConnection_networkAddress'(Val);

'enc_PSDNConnection_networkAddress'(Val) ->
[
?RT_PER:set_choice(element(1,Val),[extendedE164NetworkAddress,transportAddress,nonStandard], 3),
case element(1,Val) of
extendedE164NetworkAddress ->
'enc_ExtendedE164NetworkAddress'(element(2,Val));
transportAddress ->
'enc_TransportAddress'(element(2,Val));
nonStandard ->
'enc_NonStandardParameter'(element(2,Val))
end
].

'dec_PSDNConnection_networkAddress'(Bytes,_) ->
{Choice,Bytes1} = ?RT_PER:getchoice(Bytes,3, 0),
{Cname,{Val,NewBytes}} = case Choice of
0 -> {extendedE164NetworkAddress,
'dec_ExtendedE164NetworkAddress'(Bytes1,telltype)};
1 -> {transportAddress,
'dec_TransportAddress'(Bytes1,telltype)};
2 -> {nonStandard,
'dec_NonStandardParameter'(Bytes1,telltype)}
end,

{{Cname,Val},NewBytes}.


'dec_PSDNConnection'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_PSDNConnection_networkAddress'(Bytes1, telltype),
{Extensions,Bytes3} = ?RT_PER:getextension(Ext,Bytes2),
Bytes4= ?RT_PER:skipextensions(Bytes3,1,Extensions)
,
{{'PSDNConnection',Term1},Bytes4}.

'enc_ATMConnection'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type CHOICE
'enc_ATMConnection_networkAddress'(element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,'MAX'}}]
  ?RT_PER:encode_integer([{'ValueRange',{0,'MAX'}}],Tmpval1)
end].

'enc_ATMConnection_networkAddress'({'ATMConnection_networkAddress',Val}) ->
'enc_ATMConnection_networkAddress'(Val);

'enc_ATMConnection_networkAddress'(Val) ->
[
?RT_PER:set_choice(element(1,Val),[extendedE164,nsapAddress,nonStandard], 3),
case element(1,Val) of
extendedE164 ->
'enc_ExtendedE164NetworkAddress'(element(2,Val));
nsapAddress ->
'enc_TransportAddress'(element(2,Val));
nonStandard ->
'enc_NonStandardParameter'(element(2,Val))
end
].

'dec_ATMConnection_networkAddress'(Bytes,_) ->
{Choice,Bytes1} = ?RT_PER:getchoice(Bytes,3, 0),
{Cname,{Val,NewBytes}} = case Choice of
0 -> {extendedE164,
'dec_ExtendedE164NetworkAddress'(Bytes1,telltype)};
1 -> {nsapAddress,
'dec_TransportAddress'(Bytes1,telltype)};
2 -> {nonStandard,
'dec_NonStandardParameter'(Bytes1,telltype)}
end,

{{Cname,Val},NewBytes}.


'dec_ATMConnection'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),
%% attribute number 1 with type CHOICE
{Term1,Bytes3} = 'dec_ATMConnection_networkAddress'(Bytes2, telltype),

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case Opt band (1 bsl 0) of
  _Opt2 when _Opt2 > 0 ->?RT_PER:decode_semi_constrained_number(Bytes3,0);
0 ->{asn1_NOVALUE,Bytes3}

end,
{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),
Bytes6= ?RT_PER:skipextensions(Bytes5,1,Extensions)
,
{{'ATMConnection',Term1,Term2},Bytes6}.


'enc_NetworkConnection'({'NetworkConnection',Val}) ->
'enc_NetworkConnection'(Val);

'enc_NetworkConnection'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[gstnConnection,isdnConnection,csdnConnection,psdnConnection,atmConnection,extendedE164NetworkAddress,transportAddress,nonStandard],[]}, {8,0}),
case element(1,Val) of
gstnConnection ->
'enc_GSTNConnection'(element(2,Val));
isdnConnection ->
'enc_ISDNConnection'(element(2,Val));
csdnConnection ->
'enc_CSDNConnection'(element(2,Val));
psdnConnection ->
'enc_PSDNConnection'(element(2,Val));
atmConnection ->
'enc_ATMConnection'(element(2,Val));
extendedE164NetworkAddress ->
'enc_ExtendedE164NetworkAddress'(element(2,Val));
transportAddress ->
'enc_TransportAddress'(element(2,Val));
nonStandard ->
'enc_NonStandardParameter'(element(2,Val))
end
].


'dec_NetworkConnection'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,8,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*8 of
0 -> {gstnConnection,
'dec_GSTNConnection'(Bytes2,telltype)};
1 -> {isdnConnection,
'dec_ISDNConnection'(Bytes2,telltype)};
2 -> {csdnConnection,
'dec_CSDNConnection'(Bytes2,telltype)};
3 -> {psdnConnection,
'dec_PSDNConnection'(Bytes2,telltype)};
4 -> {atmConnection,
'dec_ATMConnection'(Bytes2,telltype)};
5 -> {extendedE164NetworkAddress,
'dec_ExtendedE164NetworkAddress'(Bytes2,telltype)};
6 -> {transportAddress,
'dec_TransportAddress'(Bytes2,telltype)};
7 -> {nonStandard,
'dec_NonStandardParameter'(Bytes2,telltype)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.

'enc_NetworkAddressV2'({'NetworkAddressV2',Val}) ->
'enc_NetworkAddressV2'(Val);

'enc_NetworkAddressV2'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_NetworkAddressV2_components'(Val, [])
].
'enc_NetworkAddressV2_components'([], Acc) -> lists:reverse(Acc);

'enc_NetworkAddressV2_components'([H|T], Acc) ->
'enc_NetworkAddressV2_components'(T, ['enc_NetworkAddressV2_SETOF'(H)

 | Acc]).
'enc_NetworkAddressV2_SETOF'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt2 = case element(4,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1,Fixopt2]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type CHOICE
'enc_NetworkAddressV2_SETOF_networkConnection'(element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 2 with type SET OF
'enc_NetworkAddressV2_SETOF_profiles'(Tmpval1)
end,
case element(4,Val1) of
asn1_NOVALUE -> [];
Tmpval2 ->

%% attribute number 3 with type Externaltypereference377GCC-PROTOCOLMediaList
'enc_MediaList'(Tmpval2)
end].

'enc_NetworkAddressV2_SETOF_networkConnection'({'NetworkAddressV2_SETOF_networkConnection',Val}) ->
'enc_NetworkAddressV2_SETOF_networkConnection'(Val);

'enc_NetworkAddressV2_SETOF_networkConnection'(Val) ->
[
?RT_PER:set_choice(element(1,Val),[singleConnection,aggregatedConnections], 2),
case element(1,Val) of
singleConnection ->
'enc_NetworkConnection'(element(2,Val));
aggregatedConnections ->
'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections'(element(2,Val))
end
].
'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type SET OF
'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList'(element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 2 with type SET OF
'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods'(Tmpval1)
end].

'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList'({'NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList',Val}) ->
'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList'(Val);

'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList'(Val) ->
[

[10,5,(length(Val) - 1)],
   'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_components'(Val, [])
].
'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_components'([], Acc) -> lists:reverse(Acc);

'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_components'([H|T], Acc) ->
'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_components'(T, ['enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_SETOF'(H)

 | Acc]).

'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_SETOF'({'NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_SETOF',Val}) ->
'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_SETOF'(Val);

'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_SETOF'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[isdnConnection,csdnConnection],[]}, {2,0}),
case element(1,Val) of
isdnConnection ->
'enc_ISDNConnection'(element(2,Val));
csdnConnection ->
'enc_CSDNConnection'(element(2,Val))
end
].

'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_SETOF'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,2,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*2 of
0 -> {isdnConnection,
'dec_ISDNConnection'(Bytes2,telltype)};
1 -> {csdnConnection,
'dec_CSDNConnection'(Bytes2,telltype)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.

'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList'(Bytes,_) ->

{Val,Remain} = ?RT_PER:getbits(Bytes,5),

{Num,Bytes1} = {Val+1,Remain},
'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_components'(Num, Bytes1, telltype, []).
'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_SETOF'(Bytes, telltype),
   'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_components'(Num-1, Remain, telltype, [Term|Acc]).

'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods'({'NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods',Val}) ->
'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods'(Val);

'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods_components'(Val, [])
].
'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods_components'([], Acc) -> lists:reverse(Acc);

'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods_components'([H|T], Acc) ->
'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods_components'(T, ['enc_ChannelAggregationMethod'(H)

 | Acc]).

'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods_components'(Num, Bytes1, telltype, []).
'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_ChannelAggregationMethod'(Bytes,telltype),
   'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods_components'(Num-1, Remain, telltype, [Term|Acc]).

'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),
%% attribute number 1 with type SET OF
{Term1,Bytes3} = 'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList'(Bytes2, telltype),

%% attribute number 2 with type SET OF
{Term2,Bytes4} = case Opt band (1 bsl 0) of
  _Opt2 when _Opt2 > 0 ->'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods'(Bytes3, telltype);
0 ->{asn1_NOVALUE,Bytes3}

end,
{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),
Bytes6= ?RT_PER:skipextensions(Bytes5,1,Extensions)
,
{{'NetworkAddressV2_SETOF_networkConnection_aggregatedConnections',Term1,Term2},Bytes6}.


'dec_NetworkAddressV2_SETOF_networkConnection'(Bytes,_) ->
{Choice,Bytes1} = ?RT_PER:getchoice(Bytes,2, 0),
{Cname,{Val,NewBytes}} = case Choice of
0 -> {singleConnection,
'dec_NetworkConnection'(Bytes1,telltype)};
1 -> {aggregatedConnections,
'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections'(Bytes1, telltype)}
end,

{{Cname,Val},NewBytes}.

'enc_NetworkAddressV2_SETOF_profiles'({'NetworkAddressV2_SETOF_profiles',Val}) ->
'enc_NetworkAddressV2_SETOF_profiles'(Val);

'enc_NetworkAddressV2_SETOF_profiles'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_NetworkAddressV2_SETOF_profiles_components'(Val, [])
].
'enc_NetworkAddressV2_SETOF_profiles_components'([], Acc) -> lists:reverse(Acc);

'enc_NetworkAddressV2_SETOF_profiles_components'([H|T], Acc) ->
'enc_NetworkAddressV2_SETOF_profiles_components'(T, ['enc_Profile'(H)

 | Acc]).

'dec_NetworkAddressV2_SETOF_profiles'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_NetworkAddressV2_SETOF_profiles_components'(Num, Bytes1, telltype, []).
'dec_NetworkAddressV2_SETOF_profiles_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_NetworkAddressV2_SETOF_profiles_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_Profile'(Bytes,telltype),
   'dec_NetworkAddressV2_SETOF_profiles_components'(Num-1, Remain, telltype, [Term|Acc]).

'dec_NetworkAddressV2_SETOF'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,2),
%% attribute number 1 with type CHOICE
{Term1,Bytes3} = 'dec_NetworkAddressV2_SETOF_networkConnection'(Bytes2, telltype),

%% attribute number 2 with type SET OF
{Term2,Bytes4} = case Opt band (1 bsl 1) of
  _Opt2 when _Opt2 > 0 ->'dec_NetworkAddressV2_SETOF_profiles'(Bytes3, telltype);
0 ->{asn1_NOVALUE,Bytes3}

end,

%%  attribute number 3 with type MediaList
{Term3,Bytes5} = case Opt band (1 bsl 0) of
  _Opt3 when _Opt3 > 0 ->'dec_MediaList'(Bytes4,telltype);
0 ->{asn1_NOVALUE,Bytes4}

end,
{Extensions,Bytes6} = ?RT_PER:getextension(Ext,Bytes5),
Bytes7= ?RT_PER:skipextensions(Bytes6,1,Extensions)
,
{{'NetworkAddressV2_SETOF',Term1,Term2,Term3},Bytes7}.



'dec_NetworkAddressV2'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_NetworkAddressV2_components'(Num, Bytes1, telltype, []).
'dec_NetworkAddressV2_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_NetworkAddressV2_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_NetworkAddressV2_SETOF'(Bytes, telltype),
   'dec_NetworkAddressV2_components'(Num-1, Remain, telltype, [Term|Acc]).

'enc_NodeType'({'NodeType',Val}) ->
'enc_NodeType'(Val);

'enc_NodeType'(Val) ->
case Val of
'terminal' -> [0,10,2,0];
'multiportTerminal' -> [0,10,2,1];
'mcu' -> [0,10,2,2];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end.


'dec_NodeType'(Bytes,_) ->
?RT_PER:decode_enumerated(Bytes,[{'ValueRange',{0,2}}],{{terminal,multiportTerminal,mcu},{}}).

'enc_NodeProperties'(Val) ->
Val1 = ?RT_PER:list_to_record('NodeProperties', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type BOOLEAN
case element(2,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(2,Val1)}}})
end,

%% attribute number 2 with type BOOLEAN
case element(3,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(3,Val1)}}})
end].


'dec_NodeProperties'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = ?RT_PER:decode_boolean(Bytes1),

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = ?RT_PER:decode_boolean(Bytes2),
{Extensions,Bytes4} = ?RT_PER:getextension(Ext,Bytes3),
Bytes5= ?RT_PER:skipextensions(Bytes4,1,Extensions)
,
{{'NodeProperties',Term1,Term2},Bytes5}.


'enc_AsymmetryIndicator'({'AsymmetryIndicator',Val}) ->
'enc_AsymmetryIndicator'(Val);

'enc_AsymmetryIndicator'(Val) ->
[
?RT_PER:set_choice(element(1,Val),[callingNode,calledNode,unknown], 3),
case element(1,Val) of
callingNode ->
?RT_PER:encode_null(element(2,Val));
calledNode ->
?RT_PER:encode_null(element(2,Val));
unknown ->
  %%INTEGER with effective constraint: [{'ValueRange',{0,4294967295}}]
  ?RT_PER:encode_integer([{'ValueRange',{0,4294967295}}],element(2,Val))
end
].


'dec_AsymmetryIndicator'(Bytes,_) ->
{Choice,Bytes1} = ?RT_PER:getchoice(Bytes,3, 0),
{Cname,{Val,NewBytes}} = case Choice of
0 -> {callingNode,
?RT_PER:decode_null(Bytes1)};
1 -> {calledNode,
?RT_PER:decode_null(Bytes1)};
2 -> {unknown,
?RT_PER:decode_constrained_number(Bytes1,{0,4294967295},4294967296)}
end,

{{Cname,Val},NewBytes}.

'enc_AlternativeNodeID'({'AlternativeNodeID',Val}) ->
'enc_AlternativeNodeID'(Val);

'enc_AlternativeNodeID'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[h243NodeID],[]}, {1,0}),
case element(1,Val) of
h243NodeID ->
  begin
    [Tmpval1,Tmpval2] = element(2,Val),
    [[10,8,Tmpval1],[10,8,Tmpval2]]
  end
end
].


'dec_AlternativeNodeID'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,1,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*1 of
0 -> {h243NodeID,
  ?RT_PER:decode_octet_string(Bytes2,2,false)
};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.
'enc_ConferenceDescriptor'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt2 = case element(4,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt3 = case element(7,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1,Fixopt2,Fixopt3]},
Extensions = ?RT_PER:fixextensions({ext,7,2},Val1),
[
?RT_PER:setext(Extensions =/= []), Opt,

%% attribute number 1 with type Externaltypereference403GCC-PROTOCOLConferenceName
'enc_ConferenceName'(element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval2 ->

%% attribute number 2 with type NumericString
?RT_PER:encode_known_multiplier_string('NumericString',{1,255},4,{32,57,{0,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,1,2,3,4,5,6,7,8,9,10}},Tmpval2)
end,
case element(4,Val1) of
asn1_NOVALUE -> [];
Tmpval3 ->

%% attribute number 3 with type BMPString
?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Tmpval3)
end,

%% attribute number 4 with type BOOLEAN
case element(5,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(5,Val1)}}})
end,

%% attribute number 5 with type BOOLEAN
case element(6,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(6,Val1)}}})
end,
case element(7,Val1) of
asn1_NOVALUE -> [];
Tmpval4 ->

%% attribute number 6 with type Externaltypereference408GCC-PROTOCOLNetworkAddress
'enc_NetworkAddress'(Tmpval4)
end
,Extensions
,
case element(8,Val1) of
asn1_NOVALUE -> [];
Tmpval5 ->

%% attribute number 7 with type BOOLEAN
?RT_PER:encode_open_type(dummy,?RT_PER:complete(case Tmpval5 of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,Tmpval5}}})
end))
end,
case element(9,Val1) of
asn1_NOVALUE -> [];
Tmpval6 ->

%% attribute number 8 with type Externaltypereference411GCC-PROTOCOLConferenceMode
?RT_PER:encode_open_type(dummy,?RT_PER:complete('enc_ConferenceMode'(Tmpval6)))
end].


'dec_ConferenceDescriptor'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,3),
%%  attribute number 1 with type ConferenceName
{Term1,Bytes3} = 'dec_ConferenceName'(Bytes2,telltype),

%% attribute number 2 with type NumericString
{Term2,Bytes4} = case Opt band (1 bsl 2) of
  _Opt2 when _Opt2 > 0 ->?RT_PER:decode_known_multiplier_string('NumericString',{1,255},4,{32,57,{32,48,49,50,51,52,53,54,55,56,57}},Bytes3);
0 ->{asn1_NOVALUE,Bytes3}

end,

%% attribute number 3 with type BMPString
{Term3,Bytes5} = case Opt band (1 bsl 1) of
  _Opt3 when _Opt3 > 0 ->?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Bytes4);
0 ->{asn1_NOVALUE,Bytes4}

end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes6} = ?RT_PER:decode_boolean(Bytes5),

%% attribute number 5 with type BOOLEAN
{Term5,Bytes7} = ?RT_PER:decode_boolean(Bytes6),

%%  attribute number 6 with type NetworkAddress
{Term6,Bytes8} = case Opt band (1 bsl 0) of
  _Opt6 when _Opt6 > 0 ->'dec_NetworkAddress'(Bytes7,telltype);
0 ->{asn1_NOVALUE,Bytes7}

end,
{Extensions,Bytes9} = ?RT_PER:getextension(Ext,Bytes8),

%% attribute number 7 with type BOOLEAN
{Term7,Bytes10} = case Extensions of
  <<_:0,1:1,_/bitstring>> when bit_size(Extensions) >= 1 ->
begin
{TmpVal7,Trem7}=?RT_PER:decode_open_type(Bytes9,[]),
{TmpValx7,_}=?RT_PER:decode_boolean(TmpVal7), {TmpValx7,Trem7}
end;
_  ->
{asn1_NOVALUE,Bytes9}

end,

%%  attribute number 8 with type ConferenceMode
{Term8,Bytes11} = case Extensions of
  <<_:1,1:1,_/bitstring>> when bit_size(Extensions) >= 2 ->
begin
{TmpVal8,Trem8}=?RT_PER:decode_open_type(Bytes10,[]),
{TmpValx8,_}='dec_ConferenceMode'(TmpVal8,telltype), {TmpValx8,Trem8}
end;
_  ->
{asn1_NOVALUE,Bytes10}

end,
Bytes12= ?RT_PER:skipextensions(Bytes11,3,Extensions)
,
{{'ConferenceDescriptor',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes12}.

'enc_NodeRecord'(Val) ->
Fixopt1 = case element(2,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt2 = case element(5,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt3 = case element(6,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt4 = case element(7,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt5 = case element(8,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt6 = case element(9,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt7 = case element(10,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1,Fixopt2,Fixopt3,Fixopt4,Fixopt5,Fixopt6,Fixopt7]},
Extensions = ?RT_PER:fixextensions({ext,10,2},Val1),
[
?RT_PER:setext(Extensions =/= []), Opt,
case element(2,Val1) of
asn1_NOVALUE -> [];
Tmpval2 ->

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  case Tmpval2 of
    Tmpval3 when Tmpval3=<65535,Tmpval3>=1001 ->
      [20,2,<<(Tmpval3- 1001):16>>];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end
end,

%% attribute number 2 with type ENUMERATED
case element(3,Val1) of
'terminal' -> [0,10,2,0];
'multiportTerminal' -> [0,10,2,1];
'mcu' -> [0,10,2,2];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end,

%% attribute number 3 with type Externaltypereference418GCC-PROTOCOLNodeProperties
'enc_NodeProperties'(element(4,Val1)),
case element(5,Val1) of
asn1_NOVALUE -> [];
Tmpval4 ->

%% attribute number 4 with type BMPString
?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Tmpval4)
end,
case element(6,Val1) of
asn1_NOVALUE -> [];
Tmpval5 ->

%% attribute number 5 with type SEQUENCE OF
'enc_NodeRecord_participantsList'(Tmpval5)
end,
case element(7,Val1) of
asn1_NOVALUE -> [];
Tmpval6 ->

%% attribute number 6 with type BMPString
?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Tmpval6)
end,
case element(8,Val1) of
asn1_NOVALUE -> [];
Tmpval7 ->

%% attribute number 7 with type Externaltypereference422GCC-PROTOCOLNetworkAddress
'enc_NetworkAddress'(Tmpval7)
end,
case element(9,Val1) of
asn1_NOVALUE -> [];
Tmpval8 ->

%% attribute number 8 with type Externaltypereference423GCC-PROTOCOLAlternativeNodeID
'enc_AlternativeNodeID'(Tmpval8)
end,
case element(10,Val1) of
asn1_NOVALUE -> [];
Tmpval9 ->

%% attribute number 9 with type Externaltypereference424GCC-PROTOCOLUserData
'enc_UserData'(Tmpval9)
end
,Extensions
,
case element(11,Val1) of
asn1_NOVALUE -> [];
Tmpval10 ->

%% attribute number 10 with type Externaltypereference426GCC-PROTOCOLNodeCategory
?RT_PER:encode_open_type(dummy,?RT_PER:complete('enc_NodeCategory'(Tmpval10)))
end,
case element(12,Val1) of
asn1_NOVALUE -> [];
Tmpval11 ->

%% attribute number 11 with type Externaltypereference427GCC-PROTOCOLNetworkAddressV2
?RT_PER:encode_open_type(dummy,?RT_PER:complete('enc_NetworkAddressV2'(Tmpval11)))
end].

'enc_NodeRecord_participantsList'({'NodeRecord_participantsList',Val}) ->
'enc_NodeRecord_participantsList'(Val);

'enc_NodeRecord_participantsList'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_NodeRecord_participantsList_components'(Val, [])
].
'enc_NodeRecord_participantsList_components'([], Acc) -> lists:reverse(Acc);

'enc_NodeRecord_participantsList_components'([H|T], Acc) ->
'enc_NodeRecord_participantsList_components'(T, [?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},H) | Acc]).

'dec_NodeRecord_participantsList'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_NodeRecord_participantsList_components'(Num, Bytes1, telltype, []).
'dec_NodeRecord_participantsList_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_NodeRecord_participantsList_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = ?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Bytes),
   'dec_NodeRecord_participantsList_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_NodeRecord'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,7),
%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case Opt band (1 bsl 6) of
  _Opt1 when _Opt1 > 0 ->  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm1+1001,Tmpremain1}
  end;
0 ->{asn1_NOVALUE,Bytes2}

end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = ?RT_PER:decode_enumerated(Bytes3,[{'ValueRange',{0,2}}],{{terminal,multiportTerminal,mcu},{}}),

%%  attribute number 3 with type NodeProperties
{Term3,Bytes5} = 'dec_NodeProperties'(Bytes4,telltype),

%% attribute number 4 with type BMPString
{Term4,Bytes6} = case Opt band (1 bsl 5) of
  _Opt4 when _Opt4 > 0 ->?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Bytes5);
0 ->{asn1_NOVALUE,Bytes5}

end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case Opt band (1 bsl 4) of
  _Opt5 when _Opt5 > 0 ->'dec_NodeRecord_participantsList'(Bytes6, telltype);
0 ->{asn1_NOVALUE,Bytes6}

end,

%% attribute number 6 with type BMPString
{Term6,Bytes8} = case Opt band (1 bsl 3) of
  _Opt6 when _Opt6 > 0 ->?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Bytes7);
0 ->{asn1_NOVALUE,Bytes7}

end,

%%  attribute number 7 with type NetworkAddress
{Term7,Bytes9} = case Opt band (1 bsl 2) of
  _Opt7 when _Opt7 > 0 ->'dec_NetworkAddress'(Bytes8,telltype);
0 ->{asn1_NOVALUE,Bytes8}

end,

%%  attribute number 8 with type AlternativeNodeID
{Term8,Bytes10} = case Opt band (1 bsl 1) of
  _Opt8 when _Opt8 > 0 ->'dec_AlternativeNodeID'(Bytes9,telltype);
0 ->{asn1_NOVALUE,Bytes9}

end,

%%  attribute number 9 with type UserData
{Term9,Bytes11} = case Opt band (1 bsl 0) of
  _Opt9 when _Opt9 > 0 ->'dec_UserData'(Bytes10,telltype);
0 ->{asn1_NOVALUE,Bytes10}

end,
{Extensions,Bytes12} = ?RT_PER:getextension(Ext,Bytes11),

%%  attribute number 10 with type NodeCategory
{Term10,Bytes13} = case Extensions of
  <<_:0,1:1,_/bitstring>> when bit_size(Extensions) >= 1 ->
begin
{TmpVal10,Trem10}=?RT_PER:decode_open_type(Bytes12,[]),
{TmpValx10,_}='dec_NodeCategory'(TmpVal10,telltype), {TmpValx10,Trem10}
end;
_  ->
{asn1_NOVALUE,Bytes12}

end,

%%  attribute number 11 with type NetworkAddressV2
{Term11,Bytes14} = case Extensions of
  <<_:1,1:1,_/bitstring>> when bit_size(Extensions) >= 2 ->
begin
{TmpVal11,Trem11}=?RT_PER:decode_open_type(Bytes13,[]),
{TmpValx11,_}='dec_NetworkAddressV2'(TmpVal11,telltype), {TmpValx11,Trem11}
end;
_  ->
{asn1_NOVALUE,Bytes13}

end,
Bytes15= ?RT_PER:skipextensions(Bytes14,3,Extensions)
,
{{'NodeRecord',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11},Bytes15}.

'enc_SessionKey'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
Opt,

%% attribute number 1 with type Externaltypereference432GCC-PROTOCOLKey
'enc_Key'(element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65535},65535,{octets,2}}]
  begin
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=1 ->
      [20,2,<<(Tmpval2- 1):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end
end].


'dec_SessionKey'(Bytes,_) ->
{Opt,Bytes1} = ?RT_PER:getoptionals2(Bytes,1),
%%  attribute number 1 with type Key
{Term1,Bytes2} = 'dec_Key'(Bytes1,telltype),

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = case Opt band (1 bsl 0) of
  _Opt2 when _Opt2 > 0 ->  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm1+1,Tmpremain1}
  end;
0 ->{asn1_NOVALUE,Bytes2}

end,
{{'SessionKey',Term1,Term2},Bytes3}.


'enc_ChannelType'({'ChannelType',Val}) ->
'enc_ChannelType'(Val);

'enc_ChannelType'(Val) ->
 case (case Val of static->0;dynamicMulticast->1;dynamicPrivate->2;dynamicUserId->3;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end) of
    Tmpval2 when Tmpval2=<3,Tmpval2>=0 ->
      [10,2,Tmpval2- 0];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end
.


'dec_ChannelType'(Bytes,_) ->
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes,2),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{static,Tmpremain1};1->{dynamicMulticast,Tmpremain1};2->{dynamicPrivate,Tmpremain1};3->{dynamicUserId,Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,[static,dynamicMulticast,dynamicPrivate,dynamicUserId]}}}}) end
.

'enc_ApplicationRecord'(Val) ->
Fixopt1 = case element(4,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt2 = case element(5,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt3 = case element(6,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1,Fixopt2,Fixopt3]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type BOOLEAN
case element(2,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(2,Val1)}}})
end,

%% attribute number 2 with type BOOLEAN
case element(3,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(3,Val1)}}})
end,
case element(4,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 3 with type ENUMERATED
  begin
  case (case Tmpval1 of static->0;dynamicMulticast->1;dynamicPrivate->2;dynamicUserId->3;Tmpval2 ->exit({error,{asn1,{enumerated,Tmpval2}}}) end) of
    Tmpval3 when Tmpval3=<3,Tmpval3>=0 ->
      [10,2,Tmpval3- 0];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end
end,
case element(5,Val1) of
asn1_NOVALUE -> [];
Tmpval4 ->

%% attribute number 4 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  case Tmpval4 of
    Tmpval5 when Tmpval5=<65535,Tmpval5>=1001 ->
      [20,2,<<(Tmpval5- 1001):16>>];
    Tmpval5 ->
      exit({error,{value_out_of_bounds,Tmpval5}})
  end

  end
end,
case element(6,Val1) of
asn1_NOVALUE -> [];
Tmpval6 ->

%% attribute number 5 with type SET OF
'enc_ApplicationRecord_nonCollapsingCapabilities'(Tmpval6)
end].

'enc_ApplicationRecord_nonCollapsingCapabilities'({'ApplicationRecord_nonCollapsingCapabilities',Val}) ->
'enc_ApplicationRecord_nonCollapsingCapabilities'(Val);

'enc_ApplicationRecord_nonCollapsingCapabilities'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_ApplicationRecord_nonCollapsingCapabilities_components'(Val, [])
].
'enc_ApplicationRecord_nonCollapsingCapabilities_components'([], Acc) -> lists:reverse(Acc);

'enc_ApplicationRecord_nonCollapsingCapabilities_components'([H|T], Acc) ->
'enc_ApplicationRecord_nonCollapsingCapabilities_components'(T, ['enc_ApplicationRecord_nonCollapsingCapabilities_SETOF'(H)

 | Acc]).
'enc_ApplicationRecord_nonCollapsingCapabilities_SETOF'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
Opt,

%% attribute number 1 with type ExternaltypereferenceundefinedGCC-PROTOCOLCapabilityID
'enc_CapabilityID'(element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 2 with type OCTET STRING
  ?RT_PER:encode_octet_string(no,false,Tmpval1)

end].

'dec_ApplicationRecord_nonCollapsingCapabilities_SETOF'(Bytes,_) ->
{Opt,Bytes1} = ?RT_PER:getoptionals2(Bytes,1),
%%  attribute number 1 with type CapabilityID
{Term1,Bytes2} = 'dec_CapabilityID'(Bytes1,telltype),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = case Opt band (1 bsl 0) of
  _Opt2 when _Opt2 > 0 ->  ?RT_PER:decode_octet_string(Bytes2,no,false)
;
0 ->{asn1_NOVALUE,Bytes2}

end,
{{'ApplicationRecord_nonCollapsingCapabilities_SETOF',Term1,Term2},Bytes3}.


'dec_ApplicationRecord_nonCollapsingCapabilities'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_ApplicationRecord_nonCollapsingCapabilities_components'(Num, Bytes1, telltype, []).
'dec_ApplicationRecord_nonCollapsingCapabilities_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ApplicationRecord_nonCollapsingCapabilities_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_ApplicationRecord_nonCollapsingCapabilities_SETOF'(Bytes, telltype),
   'dec_ApplicationRecord_nonCollapsingCapabilities_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_ApplicationRecord'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,3),
%% attribute number 1 with type BOOLEAN
{Term1,Bytes3} = ?RT_PER:decode_boolean(Bytes2),

%% attribute number 2 with type BOOLEAN
{Term2,Bytes4} = ?RT_PER:decode_boolean(Bytes3),

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = case Opt band (1 bsl 2) of
  _Opt3 when _Opt3 > 0 ->  begin
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes4,2),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{static,Tmpremain1};1->{dynamicMulticast,Tmpremain1};2->{dynamicPrivate,Tmpremain1};3->{dynamicUserId,Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,[static,dynamicMulticast,dynamicPrivate,dynamicUserId]}}}}) end
  end;
0 ->{asn1_NOVALUE,Bytes4}

end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = case Opt band (1 bsl 1) of
  _Opt4 when _Opt4 > 0 ->  begin
    {Tmpterm3,Tmpremain3}=?RT_PER:getoctets(Bytes5,2),
    {Tmpterm3+1001,Tmpremain3}
  end;
0 ->{asn1_NOVALUE,Bytes5}

end,

%% attribute number 5 with type SET OF
{Term5,Bytes7} = case Opt band (1 bsl 0) of
  _Opt5 when _Opt5 > 0 ->'dec_ApplicationRecord_nonCollapsingCapabilities'(Bytes6, telltype);
0 ->{asn1_NOVALUE,Bytes6}

end,
{Extensions,Bytes8} = ?RT_PER:getextension(Ext,Bytes7),
Bytes9= ?RT_PER:skipextensions(Bytes8,1,Extensions)
,
{{'ApplicationRecord',Term1,Term2,Term3,Term4,Term5},Bytes9}.


'enc_CapabilityID'({'CapabilityID',Val}) ->
'enc_CapabilityID'(Val);

'enc_CapabilityID'(Val) ->
[
?RT_PER:set_choice(element(1,Val),[standard,nonStandard], 2),
case element(1,Val) of
standard ->
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case element(2,Val) of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
;
nonStandard ->
'enc_Key'(element(2,Val))
end
].


'dec_CapabilityID'(Bytes,_) ->
{Choice,Bytes1} = ?RT_PER:getchoice(Bytes,2, 0),
{Cname,{Val,NewBytes}} = case Choice of
0 -> {standard,
  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm1+0,Tmpremain1}
  end};
1 -> {nonStandard,
'dec_Key'(Bytes1,telltype)}
end,

{{Cname,Val},NewBytes}.

'enc_CapabilityClass'({'CapabilityClass',Val}) ->
'enc_CapabilityClass'(Val);

'enc_CapabilityClass'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[logical,unsignedMin,unsignedMax],[]}, {3,0}),
case element(1,Val) of
logical ->
?RT_PER:encode_null(element(2,Val));
unsignedMin ->
  %%INTEGER with effective constraint: [{'ValueRange',{0,'MAX'}}]
  ?RT_PER:encode_integer([{'ValueRange',{0,'MAX'}}],element(2,Val));
unsignedMax ->
  %%INTEGER with effective constraint: [{'ValueRange',{0,'MAX'}}]
  ?RT_PER:encode_integer([{'ValueRange',{0,'MAX'}}],element(2,Val))
end
].


'dec_CapabilityClass'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,3,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*3 of
0 -> {logical,
?RT_PER:decode_null(Bytes2)};
1 -> {unsignedMin,
?RT_PER:decode_semi_constrained_number(Bytes2,0)};
2 -> {unsignedMax,
?RT_PER:decode_semi_constrained_number(Bytes2,0)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.

'enc_EntityID'({'EntityID',Val}) ->
'enc_EntityID'(Val);

'enc_EntityID'(Val) ->
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
 case Val of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=0 ->
      [20,2,<<(Tmpval1- 0):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
.


'dec_EntityID'(Bytes,_) ->
  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+0,Tmpremain1}
  end.

'enc_ApplicationInvokeSpecifier'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt2 = case element(4,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1,Fixopt2]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type Externaltypereference471GCC-PROTOCOLSessionKey
'enc_SessionKey'(element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 2 with type SET OF
'enc_ApplicationInvokeSpecifier_expectedCapabilitySet'(Tmpval1)
end,
case element(4,Val1) of
asn1_NOVALUE -> [];
Tmpval2 ->

%% attribute number 3 with type ENUMERATED
  begin
  case (case Tmpval2 of static->0;dynamicMulticast->1;dynamicPrivate->2;dynamicUserId->3;Tmpval3 ->exit({error,{asn1,{enumerated,Tmpval3}}}) end) of
    Tmpval4 when Tmpval4=<3,Tmpval4>=0 ->
      [10,2,Tmpval4- 0];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end
end,

%% attribute number 4 with type BOOLEAN
case element(5,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(5,Val1)}}})
end].

'enc_ApplicationInvokeSpecifier_expectedCapabilitySet'({'ApplicationInvokeSpecifier_expectedCapabilitySet',Val}) ->
'enc_ApplicationInvokeSpecifier_expectedCapabilitySet'(Val);

'enc_ApplicationInvokeSpecifier_expectedCapabilitySet'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_ApplicationInvokeSpecifier_expectedCapabilitySet_components'(Val, [])
].
'enc_ApplicationInvokeSpecifier_expectedCapabilitySet_components'([], Acc) -> lists:reverse(Acc);

'enc_ApplicationInvokeSpecifier_expectedCapabilitySet_components'([H|T], Acc) ->
'enc_ApplicationInvokeSpecifier_expectedCapabilitySet_components'(T, ['enc_ApplicationInvokeSpecifier_expectedCapabilitySet_SETOF'(H)

 | Acc]).
'enc_ApplicationInvokeSpecifier_expectedCapabilitySet_SETOF'(Val) ->
Val1 = ?RT_PER:list_to_record('ApplicationInvokeSpecifier_expectedCapabilitySet_SETOF', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type Externaltypereference474GCC-PROTOCOLCapabilityID
'enc_CapabilityID'(element(2,Val1)),

%% attribute number 2 with type Externaltypereference475GCC-PROTOCOLCapabilityClass
'enc_CapabilityClass'(element(3,Val1))].

'dec_ApplicationInvokeSpecifier_expectedCapabilitySet_SETOF'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%%  attribute number 1 with type CapabilityID
{Term1,Bytes2} = 'dec_CapabilityID'(Bytes1,telltype),

%%  attribute number 2 with type CapabilityClass
{Term2,Bytes3} = 'dec_CapabilityClass'(Bytes2,telltype),
{Extensions,Bytes4} = ?RT_PER:getextension(Ext,Bytes3),
Bytes5= ?RT_PER:skipextensions(Bytes4,1,Extensions)
,
{{'ApplicationInvokeSpecifier_expectedCapabilitySet_SETOF',Term1,Term2},Bytes5}.


'dec_ApplicationInvokeSpecifier_expectedCapabilitySet'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_ApplicationInvokeSpecifier_expectedCapabilitySet_components'(Num, Bytes1, telltype, []).
'dec_ApplicationInvokeSpecifier_expectedCapabilitySet_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ApplicationInvokeSpecifier_expectedCapabilitySet_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_ApplicationInvokeSpecifier_expectedCapabilitySet_SETOF'(Bytes, telltype),
   'dec_ApplicationInvokeSpecifier_expectedCapabilitySet_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_ApplicationInvokeSpecifier'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,2),
%%  attribute number 1 with type SessionKey
{Term1,Bytes3} = 'dec_SessionKey'(Bytes2,telltype),

%% attribute number 2 with type SET OF
{Term2,Bytes4} = case Opt band (1 bsl 1) of
  _Opt2 when _Opt2 > 0 ->'dec_ApplicationInvokeSpecifier_expectedCapabilitySet'(Bytes3, telltype);
0 ->{asn1_NOVALUE,Bytes3}

end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = case Opt band (1 bsl 0) of
  _Opt3 when _Opt3 > 0 ->  begin
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes4,2),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{static,Tmpremain1};1->{dynamicMulticast,Tmpremain1};2->{dynamicPrivate,Tmpremain1};3->{dynamicUserId,Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,[static,dynamicMulticast,dynamicPrivate,dynamicUserId]}}}}) end
  end;
0 ->{asn1_NOVALUE,Bytes4}

end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes6} = ?RT_PER:decode_boolean(Bytes5),
{Extensions,Bytes7} = ?RT_PER:getextension(Ext,Bytes6),
Bytes8= ?RT_PER:skipextensions(Bytes7,1,Extensions)
,
{{'ApplicationInvokeSpecifier',Term1,Term2,Term3,Term4},Bytes8}.

'enc_RegistryKey'(Val) ->
Val1 = ?RT_PER:list_to_record('RegistryKey', Val),
[

%% attribute number 1 with type Externaltypereference484GCC-PROTOCOLSessionKey
'enc_SessionKey'(element(2,Val1)),

%% attribute number 2 with type OCTET STRING
  ?RT_PER:encode_octet_string({0,64},false,element(3,Val1))
].


'dec_RegistryKey'(Bytes,_) ->

%%  attribute number 1 with type SessionKey
{Term1,Bytes1} = 'dec_SessionKey'(Bytes,telltype),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes2} =   ?RT_PER:decode_octet_string(Bytes1,{0,64},false)
,
{{'RegistryKey',Term1,Term2},Bytes2}.


'enc_RegistryItem'({'RegistryItem',Val}) ->
'enc_RegistryItem'(Val);

'enc_RegistryItem'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[channelID,tokenID,parameter,vacant],[]}, {4,0}),
case element(1,Val) of
channelID ->
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
 case element(2,Val) of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=1001 ->
      [20,2,<<(Tmpval1- 1001):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
;
tokenID ->
  %%INTEGER with effective constraint: [{'ValueRange',{16384,65535},49152,{octets,2}}]
 case element(2,Val) of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=16384 ->
      [20,2,<<(Tmpval2- 16384):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end
;
parameter ->
  ?RT_PER:encode_octet_string({0,64},false,element(2,Val))
;
vacant ->
?RT_PER:encode_null(element(2,Val))
end
].


'dec_RegistryItem'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,4,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*4 of
0 -> {channelID,
  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm1+1001,Tmpremain1}
  end};
1 -> {tokenID,
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm2+16384,Tmpremain2}
  end};
2 -> {parameter,
  ?RT_PER:decode_octet_string(Bytes2,{0,64},false)
};
3 -> {vacant,
?RT_PER:decode_null(Bytes2)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.

'enc_RegistryEntryOwner'({'RegistryEntryOwner',Val}) ->
'enc_RegistryEntryOwner'(Val);

'enc_RegistryEntryOwner'(Val) ->
[
?RT_PER:set_choice(element(1,Val),[owned,notOwned], 2),
case element(1,Val) of
owned ->
'enc_RegistryEntryOwner_owned'(element(2,Val));
notOwned ->
?RT_PER:encode_null(element(2,Val))
end
].
'enc_RegistryEntryOwner_owned'(Val) ->
Val1 = ?RT_PER:list_to_record('RegistryEntryOwner_owned', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=1001 ->
      [20,2,<<(Tmpval2- 1001):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=0 ->
      [20,2,<<(Tmpval4- 0):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end].

'dec_RegistryEntryOwner_owned'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1001,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+0,Tmpremain2}
  end,
{{'RegistryEntryOwner_owned',Term1,Term2},Bytes2}.



'dec_RegistryEntryOwner'(Bytes,_) ->
{Choice,Bytes1} = ?RT_PER:getchoice(Bytes,2, 0),
{Cname,{Val,NewBytes}} = case Choice of
0 -> {owned,
'dec_RegistryEntryOwner_owned'(Bytes1, telltype)};
1 -> {notOwned,
?RT_PER:decode_null(Bytes1)}
end,

{{Cname,Val},NewBytes}.

'enc_RegistryModificationRights'({'RegistryModificationRights',Val}) ->
'enc_RegistryModificationRights'(Val);

'enc_RegistryModificationRights'(Val) ->
 case (case Val of owner->0;session->1;public->2;Tmpval1 ->exit({error,{asn1,{enumerated,Tmpval1}}}) end) of
    Tmpval2 when Tmpval2=<2,Tmpval2>=0 ->
      [10,2,Tmpval2- 0];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end
.


'dec_RegistryModificationRights'(Bytes,_) ->
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes,2),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{owner,Tmpremain1};1->{session,Tmpremain1};2->{public,Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,[owner,session,public]}}}}) end
.

'enc_UserIDIndication'(Val) ->
Val1 = ?RT_PER:list_to_record('UserIDIndication', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: []
  ?RT_PER:encode_integer([],element(2,Val1))].


'dec_UserIDIndication'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = ?RT_PER:decode_unconstrained_number(Bytes1),
{Extensions,Bytes3} = ?RT_PER:getextension(Ext,Bytes2),
Bytes4= ?RT_PER:skipextensions(Bytes3,1,Extensions)
,
{{'UserIDIndication',Term1},Bytes4}.

'enc_ConferenceCreateRequest'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt2 = case element(4,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt3 = case element(9,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt4 = case element(10,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt5 = case element(11,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt6 = case element(12,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt7 = case element(13,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt8 = case element(14,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1,Fixopt2,Fixopt3,Fixopt4,Fixopt5,Fixopt6,Fixopt7,Fixopt8]},
Extensions = ?RT_PER:fixextensions({ext,14,2},Val1),
[
?RT_PER:setext(Extensions =/= []), Opt,

%% attribute number 1 with type Externaltypereference514GCC-PROTOCOLConferenceName
'enc_ConferenceName'(element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval2 ->

%% attribute number 2 with type Externaltypereference515GCC-PROTOCOLPassword
'enc_Password'(Tmpval2)
end,
case element(4,Val1) of
asn1_NOVALUE -> [];
Tmpval3 ->

%% attribute number 3 with type Externaltypereference516GCC-PROTOCOLPassword
'enc_Password'(Tmpval3)
end,

%% attribute number 4 with type BOOLEAN
case element(5,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(5,Val1)}}})
end,

%% attribute number 5 with type BOOLEAN
case element(6,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(6,Val1)}}})
end,

%% attribute number 6 with type BOOLEAN
case element(7,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(7,Val1)}}})
end,

%% attribute number 7 with type ENUMERATED
case element(8,Val1) of
'automatic' -> [0,0];
'manual' -> [0,1];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end,
case element(9,Val1) of
asn1_NOVALUE -> [];
Tmpval4 ->

%% attribute number 8 with type SET OF
'enc_ConferenceCreateRequest_conductorPrivileges'(Tmpval4)
end,
case element(10,Val1) of
asn1_NOVALUE -> [];
Tmpval5 ->

%% attribute number 9 with type SET OF
'enc_ConferenceCreateRequest_conductedPrivileges'(Tmpval5)
end,
case element(11,Val1) of
asn1_NOVALUE -> [];
Tmpval6 ->

%% attribute number 10 with type SET OF
'enc_ConferenceCreateRequest_nonConductedPrivileges'(Tmpval6)
end,
case element(12,Val1) of
asn1_NOVALUE -> [];
Tmpval7 ->

%% attribute number 11 with type BMPString
?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Tmpval7)
end,
case element(13,Val1) of
asn1_NOVALUE -> [];
Tmpval8 ->

%% attribute number 12 with type BMPString
?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Tmpval8)
end,
case element(14,Val1) of
asn1_NOVALUE -> [];
Tmpval9 ->

%% attribute number 13 with type Externaltypereference526GCC-PROTOCOLUserData
'enc_UserData'(Tmpval9)
end
,Extensions
,
case element(15,Val1) of
asn1_NOVALUE -> [];
Tmpval10 ->

%% attribute number 14 with type Externaltypereference528GCC-PROTOCOLConferencePriority
?RT_PER:encode_open_type(dummy,?RT_PER:complete('enc_ConferencePriority'(Tmpval10)))
end,
case element(16,Val1) of
asn1_NOVALUE -> [];
Tmpval11 ->

%% attribute number 15 with type Externaltypereference529GCC-PROTOCOLConferenceMode
?RT_PER:encode_open_type(dummy,?RT_PER:complete('enc_ConferenceMode'(Tmpval11)))
end].

'enc_ConferenceCreateRequest_conductorPrivileges'({'ConferenceCreateRequest_conductorPrivileges',Val}) ->
'enc_ConferenceCreateRequest_conductorPrivileges'(Val);

'enc_ConferenceCreateRequest_conductorPrivileges'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_ConferenceCreateRequest_conductorPrivileges_components'(Val, [])
].
'enc_ConferenceCreateRequest_conductorPrivileges_components'([], Acc) -> lists:reverse(Acc);

'enc_ConferenceCreateRequest_conductorPrivileges_components'([H|T], Acc) ->
'enc_ConferenceCreateRequest_conductorPrivileges_components'(T, [case H of
'terminate' -> [0,10,3,0];
'ejectUser' -> [0,10,3,1];
'add' -> [0,10,3,2];
'lockUnlock' -> [0,10,3,3];
'transfer' -> [0,10,3,4];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end | Acc]).

'dec_ConferenceCreateRequest_conductorPrivileges'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_ConferenceCreateRequest_conductorPrivileges_components'(Num, Bytes1, telltype, []).
'dec_ConferenceCreateRequest_conductorPrivileges_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ConferenceCreateRequest_conductorPrivileges_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = ?RT_PER:decode_enumerated(Bytes,[{'ValueRange',{0,4}}],{{terminate,ejectUser,add,lockUnlock,transfer},{}}),
   'dec_ConferenceCreateRequest_conductorPrivileges_components'(Num-1, Remain, telltype, [Term|Acc]).

'enc_ConferenceCreateRequest_conductedPrivileges'({'ConferenceCreateRequest_conductedPrivileges',Val}) ->
'enc_ConferenceCreateRequest_conductedPrivileges'(Val);

'enc_ConferenceCreateRequest_conductedPrivileges'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_ConferenceCreateRequest_conductedPrivileges_components'(Val, [])
].
'enc_ConferenceCreateRequest_conductedPrivileges_components'([], Acc) -> lists:reverse(Acc);

'enc_ConferenceCreateRequest_conductedPrivileges_components'([H|T], Acc) ->
'enc_ConferenceCreateRequest_conductedPrivileges_components'(T, [case H of
'terminate' -> [0,10,3,0];
'ejectUser' -> [0,10,3,1];
'add' -> [0,10,3,2];
'lockUnlock' -> [0,10,3,3];
'transfer' -> [0,10,3,4];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end | Acc]).

'dec_ConferenceCreateRequest_conductedPrivileges'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_ConferenceCreateRequest_conductedPrivileges_components'(Num, Bytes1, telltype, []).
'dec_ConferenceCreateRequest_conductedPrivileges_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ConferenceCreateRequest_conductedPrivileges_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = ?RT_PER:decode_enumerated(Bytes,[{'ValueRange',{0,4}}],{{terminate,ejectUser,add,lockUnlock,transfer},{}}),
   'dec_ConferenceCreateRequest_conductedPrivileges_components'(Num-1, Remain, telltype, [Term|Acc]).

'enc_ConferenceCreateRequest_nonConductedPrivileges'({'ConferenceCreateRequest_nonConductedPrivileges',Val}) ->
'enc_ConferenceCreateRequest_nonConductedPrivileges'(Val);

'enc_ConferenceCreateRequest_nonConductedPrivileges'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_ConferenceCreateRequest_nonConductedPrivileges_components'(Val, [])
].
'enc_ConferenceCreateRequest_nonConductedPrivileges_components'([], Acc) -> lists:reverse(Acc);

'enc_ConferenceCreateRequest_nonConductedPrivileges_components'([H|T], Acc) ->
'enc_ConferenceCreateRequest_nonConductedPrivileges_components'(T, [case H of
'terminate' -> [0,10,3,0];
'ejectUser' -> [0,10,3,1];
'add' -> [0,10,3,2];
'lockUnlock' -> [0,10,3,3];
'transfer' -> [0,10,3,4];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end | Acc]).

'dec_ConferenceCreateRequest_nonConductedPrivileges'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_ConferenceCreateRequest_nonConductedPrivileges_components'(Num, Bytes1, telltype, []).
'dec_ConferenceCreateRequest_nonConductedPrivileges_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ConferenceCreateRequest_nonConductedPrivileges_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = ?RT_PER:decode_enumerated(Bytes,[{'ValueRange',{0,4}}],{{terminate,ejectUser,add,lockUnlock,transfer},{}}),
   'dec_ConferenceCreateRequest_nonConductedPrivileges_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_ConferenceCreateRequest'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,8),
%%  attribute number 1 with type ConferenceName
{Term1,Bytes3} = 'dec_ConferenceName'(Bytes2,telltype),

%%  attribute number 2 with type Password
{Term2,Bytes4} = case Opt band (1 bsl 7) of
  _Opt2 when _Opt2 > 0 ->'dec_Password'(Bytes3,telltype);
0 ->{asn1_NOVALUE,Bytes3}

end,

%%  attribute number 3 with type Password
{Term3,Bytes5} = case Opt band (1 bsl 6) of
  _Opt3 when _Opt3 > 0 ->'dec_Password'(Bytes4,telltype);
0 ->{asn1_NOVALUE,Bytes4}

end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes6} = ?RT_PER:decode_boolean(Bytes5),

%% attribute number 5 with type BOOLEAN
{Term5,Bytes7} = ?RT_PER:decode_boolean(Bytes6),

%% attribute number 6 with type BOOLEAN
{Term6,Bytes8} = ?RT_PER:decode_boolean(Bytes7),

%% attribute number 7 with type ENUMERATED
{Term7,Bytes9} = ?RT_PER:decode_enumerated(Bytes8,[{'ValueRange',{0,1}}],{{automatic,manual},{}}),

%% attribute number 8 with type SET OF
{Term8,Bytes10} = case Opt band (1 bsl 5) of
  _Opt8 when _Opt8 > 0 ->'dec_ConferenceCreateRequest_conductorPrivileges'(Bytes9, telltype);
0 ->{asn1_NOVALUE,Bytes9}

end,

%% attribute number 9 with type SET OF
{Term9,Bytes11} = case Opt band (1 bsl 4) of
  _Opt9 when _Opt9 > 0 ->'dec_ConferenceCreateRequest_conductedPrivileges'(Bytes10, telltype);
0 ->{asn1_NOVALUE,Bytes10}

end,

%% attribute number 10 with type SET OF
{Term10,Bytes12} = case Opt band (1 bsl 3) of
  _Opt10 when _Opt10 > 0 ->'dec_ConferenceCreateRequest_nonConductedPrivileges'(Bytes11, telltype);
0 ->{asn1_NOVALUE,Bytes11}

end,

%% attribute number 11 with type BMPString
{Term11,Bytes13} = case Opt band (1 bsl 2) of
  _Opt11 when _Opt11 > 0 ->?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Bytes12);
0 ->{asn1_NOVALUE,Bytes12}

end,

%% attribute number 12 with type BMPString
{Term12,Bytes14} = case Opt band (1 bsl 1) of
  _Opt12 when _Opt12 > 0 ->?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Bytes13);
0 ->{asn1_NOVALUE,Bytes13}

end,

%%  attribute number 13 with type UserData
{Term13,Bytes15} = case Opt band (1 bsl 0) of
  _Opt13 when _Opt13 > 0 ->'dec_UserData'(Bytes14,telltype);
0 ->{asn1_NOVALUE,Bytes14}

end,
{Extensions,Bytes16} = ?RT_PER:getextension(Ext,Bytes15),

%%  attribute number 14 with type ConferencePriority
{Term14,Bytes17} = case Extensions of
  <<_:0,1:1,_/bitstring>> when bit_size(Extensions) >= 1 ->
begin
{TmpVal14,Trem14}=?RT_PER:decode_open_type(Bytes16,[]),
{TmpValx14,_}='dec_ConferencePriority'(TmpVal14,telltype), {TmpValx14,Trem14}
end;
_  ->
{asn1_NOVALUE,Bytes16}

end,

%%  attribute number 15 with type ConferenceMode
{Term15,Bytes18} = case Extensions of
  <<_:1,1:1,_/bitstring>> when bit_size(Extensions) >= 2 ->
begin
{TmpVal15,Trem15}=?RT_PER:decode_open_type(Bytes17,[]),
{TmpValx15,_}='dec_ConferenceMode'(TmpVal15,telltype), {TmpValx15,Trem15}
end;
_  ->
{asn1_NOVALUE,Bytes17}

end,
Bytes19= ?RT_PER:skipextensions(Bytes18,3,Extensions)
,
{{'ConferenceCreateRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15},Bytes19}.

'enc_ConferenceCreateResponse'(Val) ->
Fixopt1 = case element(5,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=1001 ->
      [20,2,<<(Tmpval2- 1001):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: []
  ?RT_PER:encode_integer([],element(3,Val1)),

%% attribute number 3 with type ENUMERATED
case element(4,Val1) of
'success' -> [0,10,3,0];
'userRejected' -> [0,10,3,1];
'resourcesNotAvailable' -> [0,10,3,2];
'rejectedForSymmetryBreaking' -> [0,10,3,3];
'lockedConferenceNotSupported' -> [0,10,3,4];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end,
case element(5,Val1) of
asn1_NOVALUE -> [];
Tmpval3 ->

%% attribute number 4 with type Externaltypereference541GCC-PROTOCOLUserData
'enc_UserData'(Tmpval3)
end].


'dec_ConferenceCreateResponse'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),
%% attribute number 1 with type INTEGER
{Term1,Bytes3} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm1+1001,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = ?RT_PER:decode_unconstrained_number(Bytes3),

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = ?RT_PER:decode_enumerated(Bytes4,[{'ValueRange',{0,4}}],{{success,userRejected,resourcesNotAvailable,rejectedForSymmetryBreaking,lockedConferenceNotSupported},{}}),

%%  attribute number 4 with type UserData
{Term4,Bytes6} = case Opt band (1 bsl 0) of
  _Opt4 when _Opt4 > 0 ->'dec_UserData'(Bytes5,telltype);
0 ->{asn1_NOVALUE,Bytes5}

end,
{Extensions,Bytes7} = ?RT_PER:getextension(Ext,Bytes6),
Bytes8= ?RT_PER:skipextensions(Bytes7,1,Extensions)
,
{{'ConferenceCreateResponse',Term1,Term2,Term3,Term4},Bytes8}.

'enc_ConferenceQueryRequest'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt2 = case element(4,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1,Fixopt2]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type ENUMERATED
case element(2,Val1) of
'terminal' -> [0,10,2,0];
'multiportTerminal' -> [0,10,2,1];
'mcu' -> [0,10,2,2];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end,
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 2 with type Externaltypereference547GCC-PROTOCOLAsymmetryIndicator
'enc_AsymmetryIndicator'(Tmpval1)
end,
case element(4,Val1) of
asn1_NOVALUE -> [];
Tmpval2 ->

%% attribute number 3 with type Externaltypereference548GCC-PROTOCOLUserData
'enc_UserData'(Tmpval2)
end].


'dec_ConferenceQueryRequest'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,2),
%% attribute number 1 with type ENUMERATED
{Term1,Bytes3} = ?RT_PER:decode_enumerated(Bytes2,[{'ValueRange',{0,2}}],{{terminal,multiportTerminal,mcu},{}}),

%%  attribute number 2 with type AsymmetryIndicator
{Term2,Bytes4} = case Opt band (1 bsl 1) of
  _Opt2 when _Opt2 > 0 ->'dec_AsymmetryIndicator'(Bytes3,telltype);
0 ->{asn1_NOVALUE,Bytes3}

end,

%%  attribute number 3 with type UserData
{Term3,Bytes5} = case Opt band (1 bsl 0) of
  _Opt3 when _Opt3 > 0 ->'dec_UserData'(Bytes4,telltype);
0 ->{asn1_NOVALUE,Bytes4}

end,
{Extensions,Bytes6} = ?RT_PER:getextension(Ext,Bytes5),
Bytes7= ?RT_PER:skipextensions(Bytes6,1,Extensions)
,
{{'ConferenceQueryRequest',Term1,Term2,Term3},Bytes7}.

'enc_ConferenceQueryResponse'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt2 = case element(6,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1,Fixopt2]},
Extensions = ?RT_PER:fixextensions({ext,6,2},Val1),
[
?RT_PER:setext(Extensions =/= []), Opt,

%% attribute number 1 with type ENUMERATED
case element(2,Val1) of
'terminal' -> [0,10,2,0];
'multiportTerminal' -> [0,10,2,1];
'mcu' -> [0,10,2,2];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end,
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval2 ->

%% attribute number 2 with type Externaltypereference555GCC-PROTOCOLAsymmetryIndicator
'enc_AsymmetryIndicator'(Tmpval2)
end,

%% attribute number 3 with type SET OF
'enc_ConferenceQueryResponse_conferenceList'(element(4,Val1)),

%% attribute number 4 with type ENUMERATED
case element(5,Val1) of
'success' -> [0,0];
'userRejected' -> [0,1];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end,
case element(6,Val1) of
asn1_NOVALUE -> [];
Tmpval3 ->

%% attribute number 5 with type Externaltypereference559GCC-PROTOCOLUserData
'enc_UserData'(Tmpval3)
end
,Extensions
,
case element(7,Val1) of
asn1_NOVALUE -> [];
Tmpval4 ->

%% attribute number 6 with type BOOLEAN
?RT_PER:encode_open_type(dummy,?RT_PER:complete(case Tmpval4 of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,Tmpval4}}})
end))
end,
case element(8,Val1) of
asn1_NOVALUE -> [];
Tmpval5 ->

%% attribute number 7 with type BOOLEAN
?RT_PER:encode_open_type(dummy,?RT_PER:complete(case Tmpval5 of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,Tmpval5}}})
end))
end].

'enc_ConferenceQueryResponse_conferenceList'({'ConferenceQueryResponse_conferenceList',Val}) ->
'enc_ConferenceQueryResponse_conferenceList'(Val);

'enc_ConferenceQueryResponse_conferenceList'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_ConferenceQueryResponse_conferenceList_components'(Val, [])
].
'enc_ConferenceQueryResponse_conferenceList_components'([], Acc) -> lists:reverse(Acc);

'enc_ConferenceQueryResponse_conferenceList_components'([H|T], Acc) ->
'enc_ConferenceQueryResponse_conferenceList_components'(T, ['enc_ConferenceDescriptor'(H)

 | Acc]).

'dec_ConferenceQueryResponse_conferenceList'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_ConferenceQueryResponse_conferenceList_components'(Num, Bytes1, telltype, []).
'dec_ConferenceQueryResponse_conferenceList_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ConferenceQueryResponse_conferenceList_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_ConferenceDescriptor'(Bytes,telltype),
   'dec_ConferenceQueryResponse_conferenceList_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_ConferenceQueryResponse'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,2),
%% attribute number 1 with type ENUMERATED
{Term1,Bytes3} = ?RT_PER:decode_enumerated(Bytes2,[{'ValueRange',{0,2}}],{{terminal,multiportTerminal,mcu},{}}),

%%  attribute number 2 with type AsymmetryIndicator
{Term2,Bytes4} = case Opt band (1 bsl 1) of
  _Opt2 when _Opt2 > 0 ->'dec_AsymmetryIndicator'(Bytes3,telltype);
0 ->{asn1_NOVALUE,Bytes3}

end,

%% attribute number 3 with type SET OF
{Term3,Bytes5} = 'dec_ConferenceQueryResponse_conferenceList'(Bytes4, telltype),

%% attribute number 4 with type ENUMERATED
{Term4,Bytes6} = ?RT_PER:decode_enumerated(Bytes5,[{'ValueRange',{0,1}}],{{success,userRejected},{}}),

%%  attribute number 5 with type UserData
{Term5,Bytes7} = case Opt band (1 bsl 0) of
  _Opt5 when _Opt5 > 0 ->'dec_UserData'(Bytes6,telltype);
0 ->{asn1_NOVALUE,Bytes6}

end,
{Extensions,Bytes8} = ?RT_PER:getextension(Ext,Bytes7),

%% attribute number 6 with type BOOLEAN
{Term6,Bytes9} = case Extensions of
  <<_:0,1:1,_/bitstring>> when bit_size(Extensions) >= 1 ->
begin
{TmpVal6,Trem6}=?RT_PER:decode_open_type(Bytes8,[]),
{TmpValx6,_}=?RT_PER:decode_boolean(TmpVal6), {TmpValx6,Trem6}
end;
_  ->
{asn1_NOVALUE,Bytes8}

end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes10} = case Extensions of
  <<_:1,1:1,_/bitstring>> when bit_size(Extensions) >= 2 ->
begin
{TmpVal7,Trem7}=?RT_PER:decode_open_type(Bytes9,[]),
{TmpValx7,_}=?RT_PER:decode_boolean(TmpVal7), {TmpValx7,Trem7}
end;
_  ->
{asn1_NOVALUE,Bytes9}

end,
Bytes11= ?RT_PER:skipextensions(Bytes10,3,Extensions)
,
{{'ConferenceQueryResponse',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes11}.

'enc_ConferenceJoinRequest'(Val) ->
Fixopt1 = case element(2,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt2 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt3 = case element(4,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt4 = case element(5,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt5 = case element(6,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt6 = case element(7,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt7 = case element(8,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1,Fixopt2,Fixopt3,Fixopt4,Fixopt5,Fixopt6,Fixopt7]},
Extensions = ?RT_PER:fixextensions({ext,8,1},Val1),
[
?RT_PER:setext(Extensions =/= []), Opt,
case element(2,Val1) of
asn1_NOVALUE -> [];
Tmpval2 ->

%% attribute number 1 with type Externaltypereference569GCC-PROTOCOLConferenceNameSelector
'enc_ConferenceNameSelector'(Tmpval2)
end,
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval3 ->

%% attribute number 2 with type NumericString
?RT_PER:encode_known_multiplier_string('NumericString',{1,255},4,{32,57,{0,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,1,2,3,4,5,6,7,8,9,10}},Tmpval3)
end,
case element(4,Val1) of
asn1_NOVALUE -> [];
Tmpval4 ->

%% attribute number 3 with type INTEGER
  %%INTEGER with effective constraint: []
  ?RT_PER:encode_integer([],Tmpval4)
end,
case element(5,Val1) of
asn1_NOVALUE -> [];
Tmpval5 ->

%% attribute number 4 with type Externaltypereference574GCC-PROTOCOLPasswordChallengeRequestResponse
'enc_PasswordChallengeRequestResponse'(Tmpval5)
end,
case element(6,Val1) of
asn1_NOVALUE -> [];
Tmpval6 ->

%% attribute number 5 with type Externaltypereference575GCC-PROTOCOLPasswordSelector
'enc_PasswordSelector'(Tmpval6)
end,
case element(7,Val1) of
asn1_NOVALUE -> [];
Tmpval7 ->

%% attribute number 6 with type BMPString
?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Tmpval7)
end,
case element(8,Val1) of
asn1_NOVALUE -> [];
Tmpval8 ->

%% attribute number 7 with type Externaltypereference577GCC-PROTOCOLUserData
'enc_UserData'(Tmpval8)
end
,Extensions
,
case element(9,Val1) of
asn1_NOVALUE -> [];
Tmpval9 ->

%% attribute number 8 with type Externaltypereference579GCC-PROTOCOLNodeCategory
?RT_PER:encode_open_type(dummy,?RT_PER:complete('enc_NodeCategory'(Tmpval9)))
end].


'dec_ConferenceJoinRequest'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,7),
%%  attribute number 1 with type ConferenceNameSelector
{Term1,Bytes3} = case Opt band (1 bsl 6) of
  _Opt1 when _Opt1 > 0 ->'dec_ConferenceNameSelector'(Bytes2,telltype);
0 ->{asn1_NOVALUE,Bytes2}

end,

%% attribute number 2 with type NumericString
{Term2,Bytes4} = case Opt band (1 bsl 5) of
  _Opt2 when _Opt2 > 0 ->?RT_PER:decode_known_multiplier_string('NumericString',{1,255},4,{32,57,{32,48,49,50,51,52,53,54,55,56,57}},Bytes3);
0 ->{asn1_NOVALUE,Bytes3}

end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = case Opt band (1 bsl 4) of
  _Opt3 when _Opt3 > 0 ->?RT_PER:decode_unconstrained_number(Bytes4);
0 ->{asn1_NOVALUE,Bytes4}

end,

%%  attribute number 4 with type PasswordChallengeRequestResponse
{Term4,Bytes6} = case Opt band (1 bsl 3) of
  _Opt4 when _Opt4 > 0 ->'dec_PasswordChallengeRequestResponse'(Bytes5,telltype);
0 ->{asn1_NOVALUE,Bytes5}

end,

%%  attribute number 5 with type PasswordSelector
{Term5,Bytes7} = case Opt band (1 bsl 2) of
  _Opt5 when _Opt5 > 0 ->'dec_PasswordSelector'(Bytes6,telltype);
0 ->{asn1_NOVALUE,Bytes6}

end,

%% attribute number 6 with type BMPString
{Term6,Bytes8} = case Opt band (1 bsl 1) of
  _Opt6 when _Opt6 > 0 ->?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Bytes7);
0 ->{asn1_NOVALUE,Bytes7}

end,

%%  attribute number 7 with type UserData
{Term7,Bytes9} = case Opt band (1 bsl 0) of
  _Opt7 when _Opt7 > 0 ->'dec_UserData'(Bytes8,telltype);
0 ->{asn1_NOVALUE,Bytes8}

end,
{Extensions,Bytes10} = ?RT_PER:getextension(Ext,Bytes9),

%%  attribute number 8 with type NodeCategory
{Term8,Bytes11} = case Extensions of
  <<_:0,1:1,_/bitstring>> when bit_size(Extensions) >= 1 ->
begin
{TmpVal8,Trem8}=?RT_PER:decode_open_type(Bytes10,[]),
{TmpValx8,_}='dec_NodeCategory'(TmpVal8,telltype), {TmpValx8,Trem8}
end;
_  ->
{asn1_NOVALUE,Bytes10}

end,
Bytes12= ?RT_PER:skipextensions(Bytes11,2,Extensions)
,
{{'ConferenceJoinRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes12}.

'enc_ConferenceJoinResponse'(Val) ->
Fixopt1 = case element(2,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt2 = case element(5,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt3 = case element(11,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt4 = case element(12,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt5 = case element(13,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt6 = case element(14,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt7 = case element(15,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt8 = case element(17,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1,Fixopt2,Fixopt3,Fixopt4,Fixopt5,Fixopt6,Fixopt7,Fixopt8]},
Extensions = ?RT_PER:fixextensions({ext,17,2},Val1),
[
?RT_PER:setext(Extensions =/= []), Opt,
case element(2,Val1) of
asn1_NOVALUE -> [];
Tmpval2 ->

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  case Tmpval2 of
    Tmpval3 when Tmpval3=<65535,Tmpval3>=1001 ->
      [20,2,<<(Tmpval3- 1001):16>>];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end
end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  Tmpval4=element(3,Val1),
  case Tmpval4 of
    Tmpval5 when Tmpval5=<65535,Tmpval5>=1001 ->
      [20,2,<<(Tmpval5- 1001):16>>];
    Tmpval5 ->
      exit({error,{value_out_of_bounds,Tmpval5}})
  end

  end,

%% attribute number 3 with type INTEGER
  %%INTEGER with effective constraint: []
  ?RT_PER:encode_integer([],element(4,Val1)),
case element(5,Val1) of
asn1_NOVALUE -> [];
Tmpval6 ->

%% attribute number 4 with type Externaltypereference591GCC-PROTOCOLConferenceNameSelector
'enc_ConferenceNameSelector'(Tmpval6)
end,

%% attribute number 5 with type BOOLEAN
case element(6,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(6,Val1)}}})
end,

%% attribute number 6 with type BOOLEAN
case element(7,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(7,Val1)}}})
end,

%% attribute number 7 with type BOOLEAN
case element(8,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(8,Val1)}}})
end,

%% attribute number 8 with type BOOLEAN
case element(9,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(9,Val1)}}})
end,

%% attribute number 9 with type ENUMERATED
case element(10,Val1) of
'automatic' -> [0,0];
'manual' -> [0,1];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end,
case element(11,Val1) of
asn1_NOVALUE -> [];
Tmpval7 ->

%% attribute number 10 with type SET OF
'enc_ConferenceJoinResponse_conductorPrivileges'(Tmpval7)
end,
case element(12,Val1) of
asn1_NOVALUE -> [];
Tmpval8 ->

%% attribute number 11 with type SET OF
'enc_ConferenceJoinResponse_conductedPrivileges'(Tmpval8)
end,
case element(13,Val1) of
asn1_NOVALUE -> [];
Tmpval9 ->

%% attribute number 12 with type SET OF
'enc_ConferenceJoinResponse_nonConductedPrivileges'(Tmpval9)
end,
case element(14,Val1) of
asn1_NOVALUE -> [];
Tmpval10 ->

%% attribute number 13 with type BMPString
?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Tmpval10)
end,
case element(15,Val1) of
asn1_NOVALUE -> [];
Tmpval11 ->

%% attribute number 14 with type Externaltypereference604GCC-PROTOCOLPasswordChallengeRequestResponse
'enc_PasswordChallengeRequestResponse'(Tmpval11)
end,

%% attribute number 15 with type ENUMERATED
case element(16,Val1) of
'success' -> [0,10,3,0];
'userRejected' -> [0,10,3,1];
'invalidConference' -> [0,10,3,2];
'invalidPassword' -> [0,10,3,3];
'invalidConvenerPassword' -> [0,10,3,4];
'challengeResponseRequired' -> [0,10,3,5];
'invalidChallengeResponse' -> [0,10,3,6];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end,
case element(17,Val1) of
asn1_NOVALUE -> [];
Tmpval12 ->

%% attribute number 16 with type Externaltypereference611GCC-PROTOCOLUserData
'enc_UserData'(Tmpval12)
end
,Extensions
,
case element(18,Val1) of
asn1_NOVALUE -> [];
Tmpval13 ->

%% attribute number 17 with type Externaltypereference613GCC-PROTOCOLNodeCategory
?RT_PER:encode_open_type(dummy,?RT_PER:complete('enc_NodeCategory'(Tmpval13)))
end,
case element(19,Val1) of
asn1_NOVALUE -> [];
Tmpval14 ->

%% attribute number 18 with type Externaltypereference614GCC-PROTOCOLConferenceMode
?RT_PER:encode_open_type(dummy,?RT_PER:complete('enc_ConferenceMode'(Tmpval14)))
end].

'enc_ConferenceJoinResponse_conductorPrivileges'({'ConferenceJoinResponse_conductorPrivileges',Val}) ->
'enc_ConferenceJoinResponse_conductorPrivileges'(Val);

'enc_ConferenceJoinResponse_conductorPrivileges'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_ConferenceJoinResponse_conductorPrivileges_components'(Val, [])
].
'enc_ConferenceJoinResponse_conductorPrivileges_components'([], Acc) -> lists:reverse(Acc);

'enc_ConferenceJoinResponse_conductorPrivileges_components'([H|T], Acc) ->
'enc_ConferenceJoinResponse_conductorPrivileges_components'(T, [case H of
'terminate' -> [0,10,3,0];
'ejectUser' -> [0,10,3,1];
'add' -> [0,10,3,2];
'lockUnlock' -> [0,10,3,3];
'transfer' -> [0,10,3,4];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end | Acc]).

'dec_ConferenceJoinResponse_conductorPrivileges'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_ConferenceJoinResponse_conductorPrivileges_components'(Num, Bytes1, telltype, []).
'dec_ConferenceJoinResponse_conductorPrivileges_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ConferenceJoinResponse_conductorPrivileges_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = ?RT_PER:decode_enumerated(Bytes,[{'ValueRange',{0,4}}],{{terminate,ejectUser,add,lockUnlock,transfer},{}}),
   'dec_ConferenceJoinResponse_conductorPrivileges_components'(Num-1, Remain, telltype, [Term|Acc]).

'enc_ConferenceJoinResponse_conductedPrivileges'({'ConferenceJoinResponse_conductedPrivileges',Val}) ->
'enc_ConferenceJoinResponse_conductedPrivileges'(Val);

'enc_ConferenceJoinResponse_conductedPrivileges'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_ConferenceJoinResponse_conductedPrivileges_components'(Val, [])
].
'enc_ConferenceJoinResponse_conductedPrivileges_components'([], Acc) -> lists:reverse(Acc);

'enc_ConferenceJoinResponse_conductedPrivileges_components'([H|T], Acc) ->
'enc_ConferenceJoinResponse_conductedPrivileges_components'(T, [case H of
'terminate' -> [0,10,3,0];
'ejectUser' -> [0,10,3,1];
'add' -> [0,10,3,2];
'lockUnlock' -> [0,10,3,3];
'transfer' -> [0,10,3,4];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end | Acc]).

'dec_ConferenceJoinResponse_conductedPrivileges'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_ConferenceJoinResponse_conductedPrivileges_components'(Num, Bytes1, telltype, []).
'dec_ConferenceJoinResponse_conductedPrivileges_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ConferenceJoinResponse_conductedPrivileges_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = ?RT_PER:decode_enumerated(Bytes,[{'ValueRange',{0,4}}],{{terminate,ejectUser,add,lockUnlock,transfer},{}}),
   'dec_ConferenceJoinResponse_conductedPrivileges_components'(Num-1, Remain, telltype, [Term|Acc]).

'enc_ConferenceJoinResponse_nonConductedPrivileges'({'ConferenceJoinResponse_nonConductedPrivileges',Val}) ->
'enc_ConferenceJoinResponse_nonConductedPrivileges'(Val);

'enc_ConferenceJoinResponse_nonConductedPrivileges'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_ConferenceJoinResponse_nonConductedPrivileges_components'(Val, [])
].
'enc_ConferenceJoinResponse_nonConductedPrivileges_components'([], Acc) -> lists:reverse(Acc);

'enc_ConferenceJoinResponse_nonConductedPrivileges_components'([H|T], Acc) ->
'enc_ConferenceJoinResponse_nonConductedPrivileges_components'(T, [case H of
'terminate' -> [0,10,3,0];
'ejectUser' -> [0,10,3,1];
'add' -> [0,10,3,2];
'lockUnlock' -> [0,10,3,3];
'transfer' -> [0,10,3,4];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end | Acc]).

'dec_ConferenceJoinResponse_nonConductedPrivileges'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_ConferenceJoinResponse_nonConductedPrivileges_components'(Num, Bytes1, telltype, []).
'dec_ConferenceJoinResponse_nonConductedPrivileges_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ConferenceJoinResponse_nonConductedPrivileges_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = ?RT_PER:decode_enumerated(Bytes,[{'ValueRange',{0,4}}],{{terminate,ejectUser,add,lockUnlock,transfer},{}}),
   'dec_ConferenceJoinResponse_nonConductedPrivileges_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_ConferenceJoinResponse'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,8),
%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case Opt band (1 bsl 7) of
  _Opt1 when _Opt1 > 0 ->  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm1+1001,Tmpremain1}
  end;
0 ->{asn1_NOVALUE,Bytes2}

end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes3,2),
    {Tmpterm2+1001,Tmpremain2}
  end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = ?RT_PER:decode_unconstrained_number(Bytes4),

%%  attribute number 4 with type ConferenceNameSelector
{Term4,Bytes6} = case Opt band (1 bsl 6) of
  _Opt4 when _Opt4 > 0 ->'dec_ConferenceNameSelector'(Bytes5,telltype);
0 ->{asn1_NOVALUE,Bytes5}

end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes7} = ?RT_PER:decode_boolean(Bytes6),

%% attribute number 6 with type BOOLEAN
{Term6,Bytes8} = ?RT_PER:decode_boolean(Bytes7),

%% attribute number 7 with type BOOLEAN
{Term7,Bytes9} = ?RT_PER:decode_boolean(Bytes8),

%% attribute number 8 with type BOOLEAN
{Term8,Bytes10} = ?RT_PER:decode_boolean(Bytes9),

%% attribute number 9 with type ENUMERATED
{Term9,Bytes11} = ?RT_PER:decode_enumerated(Bytes10,[{'ValueRange',{0,1}}],{{automatic,manual},{}}),

%% attribute number 10 with type SET OF
{Term10,Bytes12} = case Opt band (1 bsl 5) of
  _Opt10 when _Opt10 > 0 ->'dec_ConferenceJoinResponse_conductorPrivileges'(Bytes11, telltype);
0 ->{asn1_NOVALUE,Bytes11}

end,

%% attribute number 11 with type SET OF
{Term11,Bytes13} = case Opt band (1 bsl 4) of
  _Opt11 when _Opt11 > 0 ->'dec_ConferenceJoinResponse_conductedPrivileges'(Bytes12, telltype);
0 ->{asn1_NOVALUE,Bytes12}

end,

%% attribute number 12 with type SET OF
{Term12,Bytes14} = case Opt band (1 bsl 3) of
  _Opt12 when _Opt12 > 0 ->'dec_ConferenceJoinResponse_nonConductedPrivileges'(Bytes13, telltype);
0 ->{asn1_NOVALUE,Bytes13}

end,

%% attribute number 13 with type BMPString
{Term13,Bytes15} = case Opt band (1 bsl 2) of
  _Opt13 when _Opt13 > 0 ->?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Bytes14);
0 ->{asn1_NOVALUE,Bytes14}

end,

%%  attribute number 14 with type PasswordChallengeRequestResponse
{Term14,Bytes16} = case Opt band (1 bsl 1) of
  _Opt14 when _Opt14 > 0 ->'dec_PasswordChallengeRequestResponse'(Bytes15,telltype);
0 ->{asn1_NOVALUE,Bytes15}

end,

%% attribute number 15 with type ENUMERATED
{Term15,Bytes17} = ?RT_PER:decode_enumerated(Bytes16,[{'ValueRange',{0,6}}],{{success,userRejected,invalidConference,invalidPassword,invalidConvenerPassword,challengeResponseRequired,invalidChallengeResponse},{}}),

%%  attribute number 16 with type UserData
{Term16,Bytes18} = case Opt band (1 bsl 0) of
  _Opt16 when _Opt16 > 0 ->'dec_UserData'(Bytes17,telltype);
0 ->{asn1_NOVALUE,Bytes17}

end,
{Extensions,Bytes19} = ?RT_PER:getextension(Ext,Bytes18),

%%  attribute number 17 with type NodeCategory
{Term17,Bytes20} = case Extensions of
  <<_:0,1:1,_/bitstring>> when bit_size(Extensions) >= 1 ->
begin
{TmpVal17,Trem17}=?RT_PER:decode_open_type(Bytes19,[]),
{TmpValx17,_}='dec_NodeCategory'(TmpVal17,telltype), {TmpValx17,Trem17}
end;
_  ->
{asn1_NOVALUE,Bytes19}

end,

%%  attribute number 18 with type ConferenceMode
{Term18,Bytes21} = case Extensions of
  <<_:1,1:1,_/bitstring>> when bit_size(Extensions) >= 2 ->
begin
{TmpVal18,Trem18}=?RT_PER:decode_open_type(Bytes20,[]),
{TmpValx18,_}='dec_ConferenceMode'(TmpVal18,telltype), {TmpValx18,Trem18}
end;
_  ->
{asn1_NOVALUE,Bytes20}

end,
Bytes22= ?RT_PER:skipextensions(Bytes21,3,Extensions)
,
{{'ConferenceJoinResponse',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18},Bytes22}.

'enc_ConferenceInviteRequest'(Val) ->
Fixopt1 = case element(11,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt2 = case element(12,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt3 = case element(13,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt4 = case element(14,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt5 = case element(15,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt6 = case element(16,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1,Fixopt2,Fixopt3,Fixopt4,Fixopt5,Fixopt6]},
Extensions = ?RT_PER:fixextensions({ext,16,3},Val1),
[
?RT_PER:setext(Extensions =/= []), Opt,

%% attribute number 1 with type Externaltypereference619GCC-PROTOCOLConferenceName
'enc_ConferenceName'(element(2,Val1)),

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  Tmpval2=element(3,Val1),
  case Tmpval2 of
    Tmpval3 when Tmpval3=<65535,Tmpval3>=1001 ->
      [20,2,<<(Tmpval3- 1001):16>>];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end,

%% attribute number 3 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  Tmpval4=element(4,Val1),
  case Tmpval4 of
    Tmpval5 when Tmpval5=<65535,Tmpval5>=1001 ->
      [20,2,<<(Tmpval5- 1001):16>>];
    Tmpval5 ->
      exit({error,{value_out_of_bounds,Tmpval5}})
  end

  end,

%% attribute number 4 with type INTEGER
  %%INTEGER with effective constraint: []
  ?RT_PER:encode_integer([],element(5,Val1)),

%% attribute number 5 with type BOOLEAN
case element(6,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(6,Val1)}}})
end,

%% attribute number 6 with type BOOLEAN
case element(7,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(7,Val1)}}})
end,

%% attribute number 7 with type BOOLEAN
case element(8,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(8,Val1)}}})
end,

%% attribute number 8 with type BOOLEAN
case element(9,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(9,Val1)}}})
end,

%% attribute number 9 with type ENUMERATED
case element(10,Val1) of
'automatic' -> [0,0];
'manual' -> [0,1];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end,
case element(11,Val1) of
asn1_NOVALUE -> [];
Tmpval6 ->

%% attribute number 10 with type SET OF
'enc_ConferenceInviteRequest_conductorPrivileges'(Tmpval6)
end,
case element(12,Val1) of
asn1_NOVALUE -> [];
Tmpval7 ->

%% attribute number 11 with type SET OF
'enc_ConferenceInviteRequest_conductedPrivileges'(Tmpval7)
end,
case element(13,Val1) of
asn1_NOVALUE -> [];
Tmpval8 ->

%% attribute number 12 with type SET OF
'enc_ConferenceInviteRequest_nonConductedPrivileges'(Tmpval8)
end,
case element(14,Val1) of
asn1_NOVALUE -> [];
Tmpval9 ->

%% attribute number 13 with type BMPString
?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Tmpval9)
end,
case element(15,Val1) of
asn1_NOVALUE -> [];
Tmpval10 ->

%% attribute number 14 with type BMPString
?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Tmpval10)
end,
case element(16,Val1) of
asn1_NOVALUE -> [];
Tmpval11 ->

%% attribute number 15 with type Externaltypereference636GCC-PROTOCOLUserData
'enc_UserData'(Tmpval11)
end
,Extensions
,
case element(17,Val1) of
asn1_NOVALUE -> [];
Tmpval12 ->

%% attribute number 16 with type Externaltypereference638GCC-PROTOCOLConferencePriority
?RT_PER:encode_open_type(dummy,?RT_PER:complete('enc_ConferencePriority'(Tmpval12)))
end,
case element(18,Val1) of
asn1_NOVALUE -> [];
Tmpval13 ->

%% attribute number 17 with type Externaltypereference639GCC-PROTOCOLNodeCategory
?RT_PER:encode_open_type(dummy,?RT_PER:complete('enc_NodeCategory'(Tmpval13)))
end,
case element(19,Val1) of
asn1_NOVALUE -> [];
Tmpval14 ->

%% attribute number 18 with type Externaltypereference640GCC-PROTOCOLConferenceMode
?RT_PER:encode_open_type(dummy,?RT_PER:complete('enc_ConferenceMode'(Tmpval14)))
end].

'enc_ConferenceInviteRequest_conductorPrivileges'({'ConferenceInviteRequest_conductorPrivileges',Val}) ->
'enc_ConferenceInviteRequest_conductorPrivileges'(Val);

'enc_ConferenceInviteRequest_conductorPrivileges'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_ConferenceInviteRequest_conductorPrivileges_components'(Val, [])
].
'enc_ConferenceInviteRequest_conductorPrivileges_components'([], Acc) -> lists:reverse(Acc);

'enc_ConferenceInviteRequest_conductorPrivileges_components'([H|T], Acc) ->
'enc_ConferenceInviteRequest_conductorPrivileges_components'(T, [case H of
'terminate' -> [0,10,3,0];
'ejectUser' -> [0,10,3,1];
'add' -> [0,10,3,2];
'lockUnlock' -> [0,10,3,3];
'transfer' -> [0,10,3,4];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end | Acc]).

'dec_ConferenceInviteRequest_conductorPrivileges'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_ConferenceInviteRequest_conductorPrivileges_components'(Num, Bytes1, telltype, []).
'dec_ConferenceInviteRequest_conductorPrivileges_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ConferenceInviteRequest_conductorPrivileges_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = ?RT_PER:decode_enumerated(Bytes,[{'ValueRange',{0,4}}],{{terminate,ejectUser,add,lockUnlock,transfer},{}}),
   'dec_ConferenceInviteRequest_conductorPrivileges_components'(Num-1, Remain, telltype, [Term|Acc]).

'enc_ConferenceInviteRequest_conductedPrivileges'({'ConferenceInviteRequest_conductedPrivileges',Val}) ->
'enc_ConferenceInviteRequest_conductedPrivileges'(Val);

'enc_ConferenceInviteRequest_conductedPrivileges'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_ConferenceInviteRequest_conductedPrivileges_components'(Val, [])
].
'enc_ConferenceInviteRequest_conductedPrivileges_components'([], Acc) -> lists:reverse(Acc);

'enc_ConferenceInviteRequest_conductedPrivileges_components'([H|T], Acc) ->
'enc_ConferenceInviteRequest_conductedPrivileges_components'(T, [case H of
'terminate' -> [0,10,3,0];
'ejectUser' -> [0,10,3,1];
'add' -> [0,10,3,2];
'lockUnlock' -> [0,10,3,3];
'transfer' -> [0,10,3,4];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end | Acc]).

'dec_ConferenceInviteRequest_conductedPrivileges'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_ConferenceInviteRequest_conductedPrivileges_components'(Num, Bytes1, telltype, []).
'dec_ConferenceInviteRequest_conductedPrivileges_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ConferenceInviteRequest_conductedPrivileges_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = ?RT_PER:decode_enumerated(Bytes,[{'ValueRange',{0,4}}],{{terminate,ejectUser,add,lockUnlock,transfer},{}}),
   'dec_ConferenceInviteRequest_conductedPrivileges_components'(Num-1, Remain, telltype, [Term|Acc]).

'enc_ConferenceInviteRequest_nonConductedPrivileges'({'ConferenceInviteRequest_nonConductedPrivileges',Val}) ->
'enc_ConferenceInviteRequest_nonConductedPrivileges'(Val);

'enc_ConferenceInviteRequest_nonConductedPrivileges'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_ConferenceInviteRequest_nonConductedPrivileges_components'(Val, [])
].
'enc_ConferenceInviteRequest_nonConductedPrivileges_components'([], Acc) -> lists:reverse(Acc);

'enc_ConferenceInviteRequest_nonConductedPrivileges_components'([H|T], Acc) ->
'enc_ConferenceInviteRequest_nonConductedPrivileges_components'(T, [case H of
'terminate' -> [0,10,3,0];
'ejectUser' -> [0,10,3,1];
'add' -> [0,10,3,2];
'lockUnlock' -> [0,10,3,3];
'transfer' -> [0,10,3,4];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end | Acc]).

'dec_ConferenceInviteRequest_nonConductedPrivileges'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_ConferenceInviteRequest_nonConductedPrivileges_components'(Num, Bytes1, telltype, []).
'dec_ConferenceInviteRequest_nonConductedPrivileges_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ConferenceInviteRequest_nonConductedPrivileges_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = ?RT_PER:decode_enumerated(Bytes,[{'ValueRange',{0,4}}],{{terminate,ejectUser,add,lockUnlock,transfer},{}}),
   'dec_ConferenceInviteRequest_nonConductedPrivileges_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_ConferenceInviteRequest'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,6),
%%  attribute number 1 with type ConferenceName
{Term1,Bytes3} = 'dec_ConferenceName'(Bytes2,telltype),

%% attribute number 2 with type INTEGER
{Term2,Bytes4} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes3,2),
    {Tmpterm1+1001,Tmpremain1}
  end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes4,2),
    {Tmpterm2+1001,Tmpremain2}
  end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = ?RT_PER:decode_unconstrained_number(Bytes5),

%% attribute number 5 with type BOOLEAN
{Term5,Bytes7} = ?RT_PER:decode_boolean(Bytes6),

%% attribute number 6 with type BOOLEAN
{Term6,Bytes8} = ?RT_PER:decode_boolean(Bytes7),

%% attribute number 7 with type BOOLEAN
{Term7,Bytes9} = ?RT_PER:decode_boolean(Bytes8),

%% attribute number 8 with type BOOLEAN
{Term8,Bytes10} = ?RT_PER:decode_boolean(Bytes9),

%% attribute number 9 with type ENUMERATED
{Term9,Bytes11} = ?RT_PER:decode_enumerated(Bytes10,[{'ValueRange',{0,1}}],{{automatic,manual},{}}),

%% attribute number 10 with type SET OF
{Term10,Bytes12} = case Opt band (1 bsl 5) of
  _Opt10 when _Opt10 > 0 ->'dec_ConferenceInviteRequest_conductorPrivileges'(Bytes11, telltype);
0 ->{asn1_NOVALUE,Bytes11}

end,

%% attribute number 11 with type SET OF
{Term11,Bytes13} = case Opt band (1 bsl 4) of
  _Opt11 when _Opt11 > 0 ->'dec_ConferenceInviteRequest_conductedPrivileges'(Bytes12, telltype);
0 ->{asn1_NOVALUE,Bytes12}

end,

%% attribute number 12 with type SET OF
{Term12,Bytes14} = case Opt band (1 bsl 3) of
  _Opt12 when _Opt12 > 0 ->'dec_ConferenceInviteRequest_nonConductedPrivileges'(Bytes13, telltype);
0 ->{asn1_NOVALUE,Bytes13}

end,

%% attribute number 13 with type BMPString
{Term13,Bytes15} = case Opt band (1 bsl 2) of
  _Opt13 when _Opt13 > 0 ->?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Bytes14);
0 ->{asn1_NOVALUE,Bytes14}

end,

%% attribute number 14 with type BMPString
{Term14,Bytes16} = case Opt band (1 bsl 1) of
  _Opt14 when _Opt14 > 0 ->?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Bytes15);
0 ->{asn1_NOVALUE,Bytes15}

end,

%%  attribute number 15 with type UserData
{Term15,Bytes17} = case Opt band (1 bsl 0) of
  _Opt15 when _Opt15 > 0 ->'dec_UserData'(Bytes16,telltype);
0 ->{asn1_NOVALUE,Bytes16}

end,
{Extensions,Bytes18} = ?RT_PER:getextension(Ext,Bytes17),

%%  attribute number 16 with type ConferencePriority
{Term16,Bytes19} = case Extensions of
  <<_:0,1:1,_/bitstring>> when bit_size(Extensions) >= 1 ->
begin
{TmpVal16,Trem16}=?RT_PER:decode_open_type(Bytes18,[]),
{TmpValx16,_}='dec_ConferencePriority'(TmpVal16,telltype), {TmpValx16,Trem16}
end;
_  ->
{asn1_NOVALUE,Bytes18}

end,

%%  attribute number 17 with type NodeCategory
{Term17,Bytes20} = case Extensions of
  <<_:1,1:1,_/bitstring>> when bit_size(Extensions) >= 2 ->
begin
{TmpVal17,Trem17}=?RT_PER:decode_open_type(Bytes19,[]),
{TmpValx17,_}='dec_NodeCategory'(TmpVal17,telltype), {TmpValx17,Trem17}
end;
_  ->
{asn1_NOVALUE,Bytes19}

end,

%%  attribute number 18 with type ConferenceMode
{Term18,Bytes21} = case Extensions of
  <<_:2,1:1,_/bitstring>> when bit_size(Extensions) >= 3 ->
begin
{TmpVal18,Trem18}=?RT_PER:decode_open_type(Bytes20,[]),
{TmpValx18,_}='dec_ConferenceMode'(TmpVal18,telltype), {TmpValx18,Trem18}
end;
_  ->
{asn1_NOVALUE,Bytes20}

end,
Bytes22= ?RT_PER:skipextensions(Bytes21,4,Extensions)
,
{{'ConferenceInviteRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18},Bytes22}.

'enc_ConferenceInviteResponse'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type ENUMERATED
case element(2,Val1) of
'success' -> [0,0];
'userRejected' -> [0,1];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end,
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 2 with type Externaltypereference647GCC-PROTOCOLUserData
'enc_UserData'(Tmpval1)
end].


'dec_ConferenceInviteResponse'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),
%% attribute number 1 with type ENUMERATED
{Term1,Bytes3} = ?RT_PER:decode_enumerated(Bytes2,[{'ValueRange',{0,1}}],{{success,userRejected},{}}),

%%  attribute number 2 with type UserData
{Term2,Bytes4} = case Opt band (1 bsl 0) of
  _Opt2 when _Opt2 > 0 ->'dec_UserData'(Bytes3,telltype);
0 ->{asn1_NOVALUE,Bytes3}

end,
{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),
Bytes6= ?RT_PER:skipextensions(Bytes5,1,Extensions)
,
{{'ConferenceInviteResponse',Term1,Term2},Bytes6}.

'enc_ConferenceAddRequest'(Val) ->
Fixopt1 = case element(5,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt2 = case element(6,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1,Fixopt2]},
Extensions = ?RT_PER:fixextensions({ext,6,2},Val1),
[
?RT_PER:setext(Extensions =/= []), Opt,

%% attribute number 1 with type Externaltypereference654GCC-PROTOCOLNetworkAddress
'enc_NetworkAddress'(element(2,Val1)),

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  Tmpval2=element(3,Val1),
  case Tmpval2 of
    Tmpval3 when Tmpval3=<65535,Tmpval3>=1001 ->
      [20,2,<<(Tmpval3- 1001):16>>];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end,

%% attribute number 3 with type INTEGER
  %%INTEGER with effective constraint: []
  ?RT_PER:encode_integer([],element(4,Val1)),
case element(5,Val1) of
asn1_NOVALUE -> [];
Tmpval4 ->

%% attribute number 4 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  case Tmpval4 of
    Tmpval5 when Tmpval5=<65535,Tmpval5>=1001 ->
      [20,2,<<(Tmpval5- 1001):16>>];
    Tmpval5 ->
      exit({error,{value_out_of_bounds,Tmpval5}})
  end

  end
end,
case element(6,Val1) of
asn1_NOVALUE -> [];
Tmpval6 ->

%% attribute number 5 with type Externaltypereference658GCC-PROTOCOLUserData
'enc_UserData'(Tmpval6)
end
,Extensions
,
case element(7,Val1) of
asn1_NOVALUE -> [];
Tmpval7 ->

%% attribute number 6 with type Externaltypereference660GCC-PROTOCOLNodeCategory
?RT_PER:encode_open_type(dummy,?RT_PER:complete('enc_NodeCategory'(Tmpval7)))
end,
case element(8,Val1) of
asn1_NOVALUE -> [];
Tmpval8 ->

%% attribute number 7 with type Externaltypereference661GCC-PROTOCOLNetworkAddressV2
?RT_PER:encode_open_type(dummy,?RT_PER:complete('enc_NetworkAddressV2'(Tmpval8)))
end].


'dec_ConferenceAddRequest'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,2),
%%  attribute number 1 with type NetworkAddress
{Term1,Bytes3} = 'dec_NetworkAddress'(Bytes2,telltype),

%% attribute number 2 with type INTEGER
{Term2,Bytes4} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes3,2),
    {Tmpterm1+1001,Tmpremain1}
  end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = ?RT_PER:decode_unconstrained_number(Bytes4),

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = case Opt band (1 bsl 1) of
  _Opt4 when _Opt4 > 0 ->  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes5,2),
    {Tmpterm2+1001,Tmpremain2}
  end;
0 ->{asn1_NOVALUE,Bytes5}

end,

%%  attribute number 5 with type UserData
{Term5,Bytes7} = case Opt band (1 bsl 0) of
  _Opt5 when _Opt5 > 0 ->'dec_UserData'(Bytes6,telltype);
0 ->{asn1_NOVALUE,Bytes6}

end,
{Extensions,Bytes8} = ?RT_PER:getextension(Ext,Bytes7),

%%  attribute number 6 with type NodeCategory
{Term6,Bytes9} = case Extensions of
  <<_:0,1:1,_/bitstring>> when bit_size(Extensions) >= 1 ->
begin
{TmpVal6,Trem6}=?RT_PER:decode_open_type(Bytes8,[]),
{TmpValx6,_}='dec_NodeCategory'(TmpVal6,telltype), {TmpValx6,Trem6}
end;
_  ->
{asn1_NOVALUE,Bytes8}

end,

%%  attribute number 7 with type NetworkAddressV2
{Term7,Bytes10} = case Extensions of
  <<_:1,1:1,_/bitstring>> when bit_size(Extensions) >= 2 ->
begin
{TmpVal7,Trem7}=?RT_PER:decode_open_type(Bytes9,[]),
{TmpValx7,_}='dec_NetworkAddressV2'(TmpVal7,telltype), {TmpValx7,Trem7}
end;
_  ->
{asn1_NOVALUE,Bytes9}

end,
Bytes11= ?RT_PER:skipextensions(Bytes10,3,Extensions)
,
{{'ConferenceAddRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes11}.

'enc_ConferenceAddResponse'(Val) ->
Fixopt1 = case element(4,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: []
  ?RT_PER:encode_integer([],element(2,Val1)),

%% attribute number 2 with type ENUMERATED
case element(3,Val1) of
'success' -> [0,10,3,0];
'invalidRequester' -> [0,10,3,1];
'invalidNetworkType' -> [0,10,3,2];
'invalidNetworkAddress' -> [0,10,3,3];
'addedNodeBusy' -> [0,10,3,4];
'networkBusy' -> [0,10,3,5];
'noPortsAvailable' -> [0,10,3,6];
'connectionUnsuccessful' -> [0,10,3,7];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end,
case element(4,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 3 with type Externaltypereference672GCC-PROTOCOLUserData
'enc_UserData'(Tmpval1)
end].


'dec_ConferenceAddResponse'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),
%% attribute number 1 with type INTEGER
{Term1,Bytes3} = ?RT_PER:decode_unconstrained_number(Bytes2),

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = ?RT_PER:decode_enumerated(Bytes3,[{'ValueRange',{0,7}}],{{success,invalidRequester,invalidNetworkType,invalidNetworkAddress,addedNodeBusy,networkBusy,noPortsAvailable,connectionUnsuccessful},{}}),

%%  attribute number 3 with type UserData
{Term3,Bytes5} = case Opt band (1 bsl 0) of
  _Opt3 when _Opt3 > 0 ->'dec_UserData'(Bytes4,telltype);
0 ->{asn1_NOVALUE,Bytes4}

end,
{Extensions,Bytes6} = ?RT_PER:getextension(Ext,Bytes5),
Bytes7= ?RT_PER:skipextensions(Bytes6,1,Extensions)
,
{{'ConferenceAddResponse',Term1,Term2,Term3},Bytes7}.

'enc_ConferenceLockRequest'(Val) ->
%%Variable setting just to eliminate compiler warning for unused vars!
_Val = Val,
[
?RT_PER:setext(false)].


'dec_ConferenceLockRequest'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Extensions,Bytes2} = ?RT_PER:getextension(Ext,Bytes1),
Bytes3= ?RT_PER:skipextensions(Bytes2,1,Extensions)
,
{{'ConferenceLockRequest'},Bytes3}.

'enc_ConferenceLockResponse'(Val) ->
Val1 = ?RT_PER:list_to_record('ConferenceLockResponse', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type ENUMERATED
case element(2,Val1) of
'success' -> [0,10,2,0];
'invalidRequester' -> [0,10,2,1];
'alreadyLocked' -> [0,10,2,2];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end].


'dec_ConferenceLockResponse'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = ?RT_PER:decode_enumerated(Bytes1,[{'ValueRange',{0,2}}],{{success,invalidRequester,alreadyLocked},{}}),
{Extensions,Bytes3} = ?RT_PER:getextension(Ext,Bytes2),
Bytes4= ?RT_PER:skipextensions(Bytes3,1,Extensions)
,
{{'ConferenceLockResponse',Term1},Bytes4}.

'enc_ConferenceLockIndication'(Val) ->
%%Variable setting just to eliminate compiler warning for unused vars!
_Val = Val,
[
?RT_PER:setext(false)].


'dec_ConferenceLockIndication'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Extensions,Bytes2} = ?RT_PER:getextension(Ext,Bytes1),
Bytes3= ?RT_PER:skipextensions(Bytes2,1,Extensions)
,
{{'ConferenceLockIndication'},Bytes3}.

'enc_ConferenceUnlockRequest'(Val) ->
%%Variable setting just to eliminate compiler warning for unused vars!
_Val = Val,
[
?RT_PER:setext(false)].


'dec_ConferenceUnlockRequest'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Extensions,Bytes2} = ?RT_PER:getextension(Ext,Bytes1),
Bytes3= ?RT_PER:skipextensions(Bytes2,1,Extensions)
,
{{'ConferenceUnlockRequest'},Bytes3}.

'enc_ConferenceUnlockResponse'(Val) ->
Val1 = ?RT_PER:list_to_record('ConferenceUnlockResponse', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type ENUMERATED
case element(2,Val1) of
'success' -> [0,10,2,0];
'invalidRequester' -> [0,10,2,1];
'alreadyUnlocked' -> [0,10,2,2];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end].


'dec_ConferenceUnlockResponse'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = ?RT_PER:decode_enumerated(Bytes1,[{'ValueRange',{0,2}}],{{success,invalidRequester,alreadyUnlocked},{}}),
{Extensions,Bytes3} = ?RT_PER:getextension(Ext,Bytes2),
Bytes4= ?RT_PER:skipextensions(Bytes3,1,Extensions)
,
{{'ConferenceUnlockResponse',Term1},Bytes4}.

'enc_ConferenceUnlockIndication'(Val) ->
%%Variable setting just to eliminate compiler warning for unused vars!
_Val = Val,
[
?RT_PER:setext(false)].


'dec_ConferenceUnlockIndication'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Extensions,Bytes2} = ?RT_PER:getextension(Ext,Bytes1),
Bytes3= ?RT_PER:skipextensions(Bytes2,1,Extensions)
,
{{'ConferenceUnlockIndication'},Bytes3}.

'enc_ConferenceTerminateRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('ConferenceTerminateRequest', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type ENUMERATED
case element(2,Val1) of
'userInitiated' -> [0,0];
'timedConferenceTermination' -> [0,1];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end].


'dec_ConferenceTerminateRequest'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = ?RT_PER:decode_enumerated(Bytes1,[{'ValueRange',{0,1}}],{{userInitiated,timedConferenceTermination},{}}),
{Extensions,Bytes3} = ?RT_PER:getextension(Ext,Bytes2),
Bytes4= ?RT_PER:skipextensions(Bytes3,1,Extensions)
,
{{'ConferenceTerminateRequest',Term1},Bytes4}.

'enc_ConferenceTerminateResponse'(Val) ->
Val1 = ?RT_PER:list_to_record('ConferenceTerminateResponse', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type ENUMERATED
case element(2,Val1) of
'success' -> [0,0];
'invalidRequester' -> [0,1];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end].


'dec_ConferenceTerminateResponse'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = ?RT_PER:decode_enumerated(Bytes1,[{'ValueRange',{0,1}}],{{success,invalidRequester},{}}),
{Extensions,Bytes3} = ?RT_PER:getextension(Ext,Bytes2),
Bytes4= ?RT_PER:skipextensions(Bytes3,1,Extensions)
,
{{'ConferenceTerminateResponse',Term1},Bytes4}.

'enc_ConferenceTerminateIndication'(Val) ->
Val1 = ?RT_PER:list_to_record('ConferenceTerminateIndication', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type ENUMERATED
case element(2,Val1) of
'userInitiated' -> [0,0];
'timedConferenceTermination' -> [0,1];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end].


'dec_ConferenceTerminateIndication'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = ?RT_PER:decode_enumerated(Bytes1,[{'ValueRange',{0,1}}],{{userInitiated,timedConferenceTermination},{}}),
{Extensions,Bytes3} = ?RT_PER:getextension(Ext,Bytes2),
Bytes4= ?RT_PER:skipextensions(Bytes3,1,Extensions)
,
{{'ConferenceTerminateIndication',Term1},Bytes4}.

'enc_ConferenceEjectUserRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('ConferenceEjectUserRequest', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=1001 ->
      [20,2,<<(Tmpval2- 1001):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type ENUMERATED
case element(3,Val1) of
'userInitiated' -> [0];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end].


'dec_ConferenceEjectUserRequest'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type INTEGER
{Term1,Bytes2} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm1+1001,Tmpremain1}
  end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = ?RT_PER:decode_enumerated(Bytes2,[{'ValueRange',{0,0}}],{{userInitiated},{}}),
{Extensions,Bytes4} = ?RT_PER:getextension(Ext,Bytes3),
Bytes5= ?RT_PER:skipextensions(Bytes4,1,Extensions)
,
{{'ConferenceEjectUserRequest',Term1,Term2},Bytes5}.

'enc_ConferenceEjectUserResponse'(Val) ->
Val1 = ?RT_PER:list_to_record('ConferenceEjectUserResponse', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=1001 ->
      [20,2,<<(Tmpval2- 1001):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type ENUMERATED
case element(3,Val1) of
'success' -> [0,10,2,0];
'invalidRequester' -> [0,10,2,1];
'invalidNode' -> [0,10,2,2];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end].


'dec_ConferenceEjectUserResponse'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type INTEGER
{Term1,Bytes2} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm1+1001,Tmpremain1}
  end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = ?RT_PER:decode_enumerated(Bytes2,[{'ValueRange',{0,2}}],{{success,invalidRequester,invalidNode},{}}),
{Extensions,Bytes4} = ?RT_PER:getextension(Ext,Bytes3),
Bytes5= ?RT_PER:skipextensions(Bytes4,1,Extensions)
,
{{'ConferenceEjectUserResponse',Term1,Term2},Bytes5}.

'enc_ConferenceEjectUserIndication'(Val) ->
Val1 = ?RT_PER:list_to_record('ConferenceEjectUserIndication', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=1001 ->
      [20,2,<<(Tmpval2- 1001):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type ENUMERATED
case element(3,Val1) of
'userInitiated' -> [0,10,2,0];
'higherNodeDisconnected' -> [0,10,2,1];
'higherNodeEjected' -> [0,10,2,2];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end].


'dec_ConferenceEjectUserIndication'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type INTEGER
{Term1,Bytes2} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm1+1001,Tmpremain1}
  end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = ?RT_PER:decode_enumerated(Bytes2,[{'ValueRange',{0,2}}],{{userInitiated,higherNodeDisconnected,higherNodeEjected},{}}),
{Extensions,Bytes4} = ?RT_PER:getextension(Ext,Bytes3),
Bytes5= ?RT_PER:skipextensions(Bytes4,1,Extensions)
,
{{'ConferenceEjectUserIndication',Term1,Term2},Bytes5}.

'enc_ConferenceTransferRequest'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt2 = case element(4,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt3 = case element(5,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt4 = case element(6,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1,Fixopt2,Fixopt3,Fixopt4]},
Extensions = ?RT_PER:fixextensions({ext,6,1},Val1),
[
?RT_PER:setext(Extensions =/= []), Opt,

%% attribute number 1 with type Externaltypereference766GCC-PROTOCOLConferenceNameSelector
'enc_ConferenceNameSelector'(element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval2 ->

%% attribute number 2 with type NumericString
?RT_PER:encode_known_multiplier_string('NumericString',{1,255},4,{32,57,{0,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,1,2,3,4,5,6,7,8,9,10}},Tmpval2)
end,
case element(4,Val1) of
asn1_NOVALUE -> [];
Tmpval3 ->

%% attribute number 3 with type Externaltypereference769GCC-PROTOCOLNetworkAddress
'enc_NetworkAddress'(Tmpval3)
end,
case element(5,Val1) of
asn1_NOVALUE -> [];
Tmpval4 ->

%% attribute number 4 with type SET OF
'enc_ConferenceTransferRequest_transferringNodes'(Tmpval4)
end,
case element(6,Val1) of
asn1_NOVALUE -> [];
Tmpval5 ->

%% attribute number 5 with type Externaltypereference771GCC-PROTOCOLPasswordSelector
'enc_PasswordSelector'(Tmpval5)
end
,Extensions
,
case element(7,Val1) of
asn1_NOVALUE -> [];
Tmpval6 ->

%% attribute number 6 with type Externaltypereference773GCC-PROTOCOLNetworkAddressV2
?RT_PER:encode_open_type(dummy,?RT_PER:complete('enc_NetworkAddressV2'(Tmpval6)))
end].

'enc_ConferenceTransferRequest_transferringNodes'({'ConferenceTransferRequest_transferringNodes',Val}) ->
'enc_ConferenceTransferRequest_transferringNodes'(Val);

'enc_ConferenceTransferRequest_transferringNodes'(Val) ->
[

   ?RT_PER:encode_length({1,65536},length(Val)),
   'enc_ConferenceTransferRequest_transferringNodes_components'(Val, [])
].
'enc_ConferenceTransferRequest_transferringNodes_components'([], Acc) -> lists:reverse(Acc);

'enc_ConferenceTransferRequest_transferringNodes_components'([H|T], Acc) ->
'enc_ConferenceTransferRequest_transferringNodes_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=1001 ->
      [20,2,<<(Tmpval1- 1001):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_ConferenceTransferRequest_transferringNodes'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,{1,65536}),
'dec_ConferenceTransferRequest_transferringNodes_components'(Num, Bytes1, telltype, []).
'dec_ConferenceTransferRequest_transferringNodes_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ConferenceTransferRequest_transferringNodes_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1001,Tmpremain1}
  end,
   'dec_ConferenceTransferRequest_transferringNodes_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_ConferenceTransferRequest'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,4),
%%  attribute number 1 with type ConferenceNameSelector
{Term1,Bytes3} = 'dec_ConferenceNameSelector'(Bytes2,telltype),

%% attribute number 2 with type NumericString
{Term2,Bytes4} = case Opt band (1 bsl 3) of
  _Opt2 when _Opt2 > 0 ->?RT_PER:decode_known_multiplier_string('NumericString',{1,255},4,{32,57,{32,48,49,50,51,52,53,54,55,56,57}},Bytes3);
0 ->{asn1_NOVALUE,Bytes3}

end,

%%  attribute number 3 with type NetworkAddress
{Term3,Bytes5} = case Opt band (1 bsl 2) of
  _Opt3 when _Opt3 > 0 ->'dec_NetworkAddress'(Bytes4,telltype);
0 ->{asn1_NOVALUE,Bytes4}

end,

%% attribute number 4 with type SET OF
{Term4,Bytes6} = case Opt band (1 bsl 1) of
  _Opt4 when _Opt4 > 0 ->'dec_ConferenceTransferRequest_transferringNodes'(Bytes5, telltype);
0 ->{asn1_NOVALUE,Bytes5}

end,

%%  attribute number 5 with type PasswordSelector
{Term5,Bytes7} = case Opt band (1 bsl 0) of
  _Opt5 when _Opt5 > 0 ->'dec_PasswordSelector'(Bytes6,telltype);
0 ->{asn1_NOVALUE,Bytes6}

end,
{Extensions,Bytes8} = ?RT_PER:getextension(Ext,Bytes7),

%%  attribute number 6 with type NetworkAddressV2
{Term6,Bytes9} = case Extensions of
  <<_:0,1:1,_/bitstring>> when bit_size(Extensions) >= 1 ->
begin
{TmpVal6,Trem6}=?RT_PER:decode_open_type(Bytes8,[]),
{TmpValx6,_}='dec_NetworkAddressV2'(TmpVal6,telltype), {TmpValx6,Trem6}
end;
_  ->
{asn1_NOVALUE,Bytes8}

end,
Bytes10= ?RT_PER:skipextensions(Bytes9,2,Extensions)
,
{{'ConferenceTransferRequest',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_ConferenceTransferResponse'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt2 = case element(4,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1,Fixopt2]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type Externaltypereference778GCC-PROTOCOLConferenceNameSelector
'enc_ConferenceNameSelector'(element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 2 with type NumericString
?RT_PER:encode_known_multiplier_string('NumericString',{1,255},4,{32,57,{0,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,1,2,3,4,5,6,7,8,9,10}},Tmpval1)
end,
case element(4,Val1) of
asn1_NOVALUE -> [];
Tmpval2 ->

%% attribute number 3 with type SET OF
'enc_ConferenceTransferResponse_transferringNodes'(Tmpval2)
end,

%% attribute number 4 with type ENUMERATED
case element(5,Val1) of
'success' -> [0,0];
'invalidRequester' -> [0,1];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end].

'enc_ConferenceTransferResponse_transferringNodes'({'ConferenceTransferResponse_transferringNodes',Val}) ->
'enc_ConferenceTransferResponse_transferringNodes'(Val);

'enc_ConferenceTransferResponse_transferringNodes'(Val) ->
[

   ?RT_PER:encode_length({1,65536},length(Val)),
   'enc_ConferenceTransferResponse_transferringNodes_components'(Val, [])
].
'enc_ConferenceTransferResponse_transferringNodes_components'([], Acc) -> lists:reverse(Acc);

'enc_ConferenceTransferResponse_transferringNodes_components'([H|T], Acc) ->
'enc_ConferenceTransferResponse_transferringNodes_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=1001 ->
      [20,2,<<(Tmpval1- 1001):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_ConferenceTransferResponse_transferringNodes'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,{1,65536}),
'dec_ConferenceTransferResponse_transferringNodes_components'(Num, Bytes1, telltype, []).
'dec_ConferenceTransferResponse_transferringNodes_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ConferenceTransferResponse_transferringNodes_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1001,Tmpremain1}
  end,
   'dec_ConferenceTransferResponse_transferringNodes_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_ConferenceTransferResponse'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,2),
%%  attribute number 1 with type ConferenceNameSelector
{Term1,Bytes3} = 'dec_ConferenceNameSelector'(Bytes2,telltype),

%% attribute number 2 with type NumericString
{Term2,Bytes4} = case Opt band (1 bsl 1) of
  _Opt2 when _Opt2 > 0 ->?RT_PER:decode_known_multiplier_string('NumericString',{1,255},4,{32,57,{32,48,49,50,51,52,53,54,55,56,57}},Bytes3);
0 ->{asn1_NOVALUE,Bytes3}

end,

%% attribute number 3 with type SET OF
{Term3,Bytes5} = case Opt band (1 bsl 0) of
  _Opt3 when _Opt3 > 0 ->'dec_ConferenceTransferResponse_transferringNodes'(Bytes4, telltype);
0 ->{asn1_NOVALUE,Bytes4}

end,

%% attribute number 4 with type ENUMERATED
{Term4,Bytes6} = ?RT_PER:decode_enumerated(Bytes5,[{'ValueRange',{0,1}}],{{success,invalidRequester},{}}),
{Extensions,Bytes7} = ?RT_PER:getextension(Ext,Bytes6),
Bytes8= ?RT_PER:skipextensions(Bytes7,1,Extensions)
,
{{'ConferenceTransferResponse',Term1,Term2,Term3,Term4},Bytes8}.

'enc_ConferenceTransferIndication'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt2 = case element(4,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt3 = case element(5,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt4 = case element(6,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1,Fixopt2,Fixopt3,Fixopt4]},
Extensions = ?RT_PER:fixextensions({ext,6,1},Val1),
[
?RT_PER:setext(Extensions =/= []), Opt,

%% attribute number 1 with type Externaltypereference789GCC-PROTOCOLConferenceNameSelector
'enc_ConferenceNameSelector'(element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval2 ->

%% attribute number 2 with type NumericString
?RT_PER:encode_known_multiplier_string('NumericString',{1,255},4,{32,57,{0,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,1,2,3,4,5,6,7,8,9,10}},Tmpval2)
end,
case element(4,Val1) of
asn1_NOVALUE -> [];
Tmpval3 ->

%% attribute number 3 with type Externaltypereference792GCC-PROTOCOLNetworkAddress
'enc_NetworkAddress'(Tmpval3)
end,
case element(5,Val1) of
asn1_NOVALUE -> [];
Tmpval4 ->

%% attribute number 4 with type SET OF
'enc_ConferenceTransferIndication_transferringNodes'(Tmpval4)
end,
case element(6,Val1) of
asn1_NOVALUE -> [];
Tmpval5 ->

%% attribute number 5 with type Externaltypereference796GCC-PROTOCOLPasswordSelector
'enc_PasswordSelector'(Tmpval5)
end
,Extensions
,
case element(7,Val1) of
asn1_NOVALUE -> [];
Tmpval6 ->

%% attribute number 6 with type Externaltypereference798GCC-PROTOCOLNetworkAddressV2
?RT_PER:encode_open_type(dummy,?RT_PER:complete('enc_NetworkAddressV2'(Tmpval6)))
end].

'enc_ConferenceTransferIndication_transferringNodes'({'ConferenceTransferIndication_transferringNodes',Val}) ->
'enc_ConferenceTransferIndication_transferringNodes'(Val);

'enc_ConferenceTransferIndication_transferringNodes'(Val) ->
[

   ?RT_PER:encode_length({1,65536},length(Val)),
   'enc_ConferenceTransferIndication_transferringNodes_components'(Val, [])
].
'enc_ConferenceTransferIndication_transferringNodes_components'([], Acc) -> lists:reverse(Acc);

'enc_ConferenceTransferIndication_transferringNodes_components'([H|T], Acc) ->
'enc_ConferenceTransferIndication_transferringNodes_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=1001 ->
      [20,2,<<(Tmpval1- 1001):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_ConferenceTransferIndication_transferringNodes'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,{1,65536}),
'dec_ConferenceTransferIndication_transferringNodes_components'(Num, Bytes1, telltype, []).
'dec_ConferenceTransferIndication_transferringNodes_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ConferenceTransferIndication_transferringNodes_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1001,Tmpremain1}
  end,
   'dec_ConferenceTransferIndication_transferringNodes_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_ConferenceTransferIndication'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,4),
%%  attribute number 1 with type ConferenceNameSelector
{Term1,Bytes3} = 'dec_ConferenceNameSelector'(Bytes2,telltype),

%% attribute number 2 with type NumericString
{Term2,Bytes4} = case Opt band (1 bsl 3) of
  _Opt2 when _Opt2 > 0 ->?RT_PER:decode_known_multiplier_string('NumericString',{1,255},4,{32,57,{32,48,49,50,51,52,53,54,55,56,57}},Bytes3);
0 ->{asn1_NOVALUE,Bytes3}

end,

%%  attribute number 3 with type NetworkAddress
{Term3,Bytes5} = case Opt band (1 bsl 2) of
  _Opt3 when _Opt3 > 0 ->'dec_NetworkAddress'(Bytes4,telltype);
0 ->{asn1_NOVALUE,Bytes4}

end,

%% attribute number 4 with type SET OF
{Term4,Bytes6} = case Opt band (1 bsl 1) of
  _Opt4 when _Opt4 > 0 ->'dec_ConferenceTransferIndication_transferringNodes'(Bytes5, telltype);
0 ->{asn1_NOVALUE,Bytes5}

end,

%%  attribute number 5 with type PasswordSelector
{Term5,Bytes7} = case Opt band (1 bsl 0) of
  _Opt5 when _Opt5 > 0 ->'dec_PasswordSelector'(Bytes6,telltype);
0 ->{asn1_NOVALUE,Bytes6}

end,
{Extensions,Bytes8} = ?RT_PER:getextension(Ext,Bytes7),

%%  attribute number 6 with type NetworkAddressV2
{Term6,Bytes9} = case Extensions of
  <<_:0,1:1,_/bitstring>> when bit_size(Extensions) >= 1 ->
begin
{TmpVal6,Trem6}=?RT_PER:decode_open_type(Bytes8,[]),
{TmpValx6,_}='dec_NetworkAddressV2'(TmpVal6,telltype), {TmpValx6,Trem6}
end;
_  ->
{asn1_NOVALUE,Bytes8}

end,
Bytes10= ?RT_PER:skipextensions(Bytes9,2,Extensions)
,
{{'ConferenceTransferIndication',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_RosterUpdateIndication'(Val) ->
Val1 = ?RT_PER:list_to_record('RosterUpdateIndication', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type BOOLEAN
case element(2,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(2,Val1)}}})
end,

%% attribute number 2 with type SEQUENCE
'enc_RosterUpdateIndication_nodeInformation'(element(3,Val1)),

%% attribute number 3 with type SET OF
'enc_RosterUpdateIndication_applicationInformation'(element(4,Val1))].
'enc_RosterUpdateIndication_nodeInformation'(Val) ->
Val1 = ?RT_PER:list_to_record('RosterUpdateIndication_nodeInformation', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type CHOICE
'enc_RosterUpdateIndication_nodeInformation_nodeRecordList'(element(2,Val1)),

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(3,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 3 with type BOOLEAN
case element(4,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(4,Val1)}}})
end,

%% attribute number 4 with type BOOLEAN
case element(5,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(5,Val1)}}})
end].

'enc_RosterUpdateIndication_nodeInformation_nodeRecordList'({'RosterUpdateIndication_nodeInformation_nodeRecordList',Val}) ->
'enc_RosterUpdateIndication_nodeInformation_nodeRecordList'(Val);

'enc_RosterUpdateIndication_nodeInformation_nodeRecordList'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[noChange,refresh,update],[]}, {3,0}),
case element(1,Val) of
noChange ->
?RT_PER:encode_null(element(2,Val));
refresh ->
'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh'(element(2,Val));
update ->
'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update'(element(2,Val))
end
].

'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh'({'RosterUpdateIndication_nodeInformation_nodeRecordList_refresh',Val}) ->
'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh'(Val);

'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh'(Val) ->
[

   ?RT_PER:encode_length({1,65536},length(Val)),
   'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_components'(Val, [])
].
'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_components'([], Acc) -> lists:reverse(Acc);

'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_components'([H|T], Acc) ->
'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_components'(T, ['enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_SETOF'(H)

 | Acc]).
'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_SETOF'(Val) ->
Val1 = ?RT_PER:list_to_record('RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_SETOF', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=1001 ->
      [20,2,<<(Tmpval2- 1001):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type Externaltypereference815GCC-PROTOCOLNodeRecord
'enc_NodeRecord'(element(3,Val1))].

'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_SETOF'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1001,Tmpremain1}
  end,

%%  attribute number 2 with type NodeRecord
{Term2,Bytes2} = 'dec_NodeRecord'(Bytes1,telltype),
{{'RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_SETOF',Term1,Term2},Bytes2}.


'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,{1,65536}),
'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_components'(Num, Bytes1, telltype, []).
'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_SETOF'(Bytes, telltype),
   'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_components'(Num-1, Remain, telltype, [Term|Acc]).

'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update'({'RosterUpdateIndication_nodeInformation_nodeRecordList_update',Val}) ->
'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update'(Val);

'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update'(Val) ->
[

   ?RT_PER:encode_length({1,65536},length(Val)),
   'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_components'(Val, [])
].
'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_components'([], Acc) -> lists:reverse(Acc);

'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_components'([H|T], Acc) ->
'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_components'(T, ['enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF'(H)

 | Acc]).
'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF'(Val) ->
Val1 = ?RT_PER:list_to_record('RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=1001 ->
      [20,2,<<(Tmpval2- 1001):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type CHOICE
'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF_nodeUpdate'(element(3,Val1))].

'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF_nodeUpdate'({'RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF_nodeUpdate',Val}) ->
'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF_nodeUpdate'(Val);

'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF_nodeUpdate'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[addRecord,replaceRecord,removeRecord],[]}, {3,0}),
case element(1,Val) of
addRecord ->
'enc_NodeRecord'(element(2,Val));
replaceRecord ->
'enc_NodeRecord'(element(2,Val));
removeRecord ->
?RT_PER:encode_null(element(2,Val))
end
].

'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF_nodeUpdate'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,3,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*3 of
0 -> {addRecord,
'dec_NodeRecord'(Bytes2,telltype)};
1 -> {replaceRecord,
'dec_NodeRecord'(Bytes2,telltype)};
2 -> {removeRecord,
?RT_PER:decode_null(Bytes2)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.

'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1001,Tmpremain1}
  end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF_nodeUpdate'(Bytes1, telltype),
{{'RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF',Term1,Term2},Bytes2}.


'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,{1,65536}),
'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update_components'(Num, Bytes1, telltype, []).
'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF'(Bytes, telltype),
   'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update_components'(Num-1, Remain, telltype, [Term|Acc]).

'dec_RosterUpdateIndication_nodeInformation_nodeRecordList'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,3,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*3 of
0 -> {noChange,
?RT_PER:decode_null(Bytes2)};
1 -> {refresh,
'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh'(Bytes2, telltype)};
2 -> {update,
'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update'(Bytes2, telltype)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.

'dec_RosterUpdateIndication_nodeInformation'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_RosterUpdateIndication_nodeInformation_nodeRecordList'(Bytes1, telltype),

%% attribute number 2 with type INTEGER
{Term2,Bytes3} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = ?RT_PER:decode_boolean(Bytes3),

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = ?RT_PER:decode_boolean(Bytes4),
{Extensions,Bytes6} = ?RT_PER:getextension(Ext,Bytes5),
Bytes7= ?RT_PER:skipextensions(Bytes6,1,Extensions)
,
{{'RosterUpdateIndication_nodeInformation',Term1,Term2,Term3,Term4},Bytes7}.


'enc_RosterUpdateIndication_applicationInformation'({'RosterUpdateIndication_applicationInformation',Val}) ->
'enc_RosterUpdateIndication_applicationInformation'(Val);

'enc_RosterUpdateIndication_applicationInformation'(Val) ->
[

[20,2,<<(length(Val) - 0):16>>],
   'enc_RosterUpdateIndication_applicationInformation_components'(Val, [])
].
'enc_RosterUpdateIndication_applicationInformation_components'([], Acc) -> lists:reverse(Acc);

'enc_RosterUpdateIndication_applicationInformation_components'([H|T], Acc) ->
'enc_RosterUpdateIndication_applicationInformation_components'(T, ['enc_RosterUpdateIndication_applicationInformation_SETOF'(H)

 | Acc]).
'enc_RosterUpdateIndication_applicationInformation_SETOF'(Val) ->
Val1 = ?RT_PER:list_to_record('RosterUpdateIndication_applicationInformation_SETOF', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type Externaltypereference842GCC-PROTOCOLSessionKey
'enc_SessionKey'(element(2,Val1)),

%% attribute number 2 with type CHOICE
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList'(element(3,Val1)),

%% attribute number 3 with type CHOICE
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList'(element(4,Val1)),

%% attribute number 4 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(5,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 5 with type BOOLEAN
case element(6,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(6,Val1)}}})
end,

%% attribute number 6 with type BOOLEAN
case element(7,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(7,Val1)}}})
end].

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList'({'RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList',Val}) ->
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList'(Val);

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[noChange,refresh,update],[]}, {3,0}),
case element(1,Val) of
noChange ->
?RT_PER:encode_null(element(2,Val));
refresh ->
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh'(element(2,Val));
update ->
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update'(element(2,Val))
end
].

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh'({'RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh',Val}) ->
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh'(Val);

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh'(Val) ->
[

[20,2,<<(length(Val) - 0):16>>],
   'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_components'(Val, [])
].
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_components'([], Acc) -> lists:reverse(Acc);

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_components'([H|T], Acc) ->
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_components'(T, ['enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_SETOF'(H)

 | Acc]).
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_SETOF'(Val) ->
Val1 = ?RT_PER:list_to_record('RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_SETOF', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=1001 ->
      [20,2,<<(Tmpval2- 1001):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=0 ->
      [20,2,<<(Tmpval4- 0):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end,

%% attribute number 3 with type Externaltypereference855GCC-PROTOCOLApplicationRecord
'enc_ApplicationRecord'(element(4,Val1))].

'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_SETOF'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1001,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+0,Tmpremain2}
  end,

%%  attribute number 3 with type ApplicationRecord
{Term3,Bytes3} = 'dec_ApplicationRecord'(Bytes2,telltype),
{{'RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_SETOF',Term1,Term2,Term3},Bytes3}.


'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh'(Bytes,_) ->

{Val,Remain} = ?RT_PER:getoctets(Bytes,2),

{Num,Bytes1} = {Val+0,Remain},
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_components'(Num, Bytes1, telltype, []).
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_SETOF'(Bytes, telltype),
   'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_components'(Num-1, Remain, telltype, [Term|Acc]).

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update'({'RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update',Val}) ->
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update'(Val);

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update'(Val) ->
[

   ?RT_PER:encode_length({1,65536},length(Val)),
   'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_components'(Val, [])
].
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_components'([], Acc) -> lists:reverse(Acc);

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_components'([H|T], Acc) ->
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_components'(T, ['enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF'(H)

 | Acc]).
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF'(Val) ->
Val1 = ?RT_PER:list_to_record('RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF', Val),
[

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=1001 ->
      [20,2,<<(Tmpval2- 1001):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=0 ->
      [20,2,<<(Tmpval4- 0):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end,

%% attribute number 3 with type CHOICE
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF_applicationUpdate'(element(4,Val1))].

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF_applicationUpdate'({'RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF_applicationUpdate',Val}) ->
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF_applicationUpdate'(Val);

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF_applicationUpdate'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[addRecord,replaceRecord,removeRecord],[]}, {3,0}),
case element(1,Val) of
addRecord ->
'enc_ApplicationRecord'(element(2,Val));
replaceRecord ->
'enc_ApplicationRecord'(element(2,Val));
removeRecord ->
?RT_PER:encode_null(element(2,Val))
end
].

'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF_applicationUpdate'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,3,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*3 of
0 -> {addRecord,
'dec_ApplicationRecord'(Bytes2,telltype)};
1 -> {replaceRecord,
'dec_ApplicationRecord'(Bytes2,telltype)};
2 -> {removeRecord,
?RT_PER:decode_null(Bytes2)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.

'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF'(Bytes,_) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1001,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm2+0,Tmpremain2}
  end,

%% attribute number 3 with type CHOICE
{Term3,Bytes3} = 'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF_applicationUpdate'(Bytes2, telltype),
{{'RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF',Term1,Term2,Term3},Bytes3}.


'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,{1,65536}),
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_components'(Num, Bytes1, telltype, []).
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF'(Bytes, telltype),
   'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_components'(Num-1, Remain, telltype, [Term|Acc]).

'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,3,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*3 of
0 -> {noChange,
?RT_PER:decode_null(Bytes2)};
1 -> {refresh,
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh'(Bytes2, telltype)};
2 -> {update,
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update'(Bytes2, telltype)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList'({'RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList',Val}) ->
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList'(Val);

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[noChange,refresh],[]}, {2,0}),
case element(1,Val) of
noChange ->
?RT_PER:encode_null(element(2,Val));
refresh ->
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh'(element(2,Val))
end
].

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh'({'RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh',Val}) ->
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh'(Val);

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_components'(Val, [])
].
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_components'([], Acc) -> lists:reverse(Acc);

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_components'([H|T], Acc) ->
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_components'(T, ['enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_SETOF'(H)

 | Acc]).
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_SETOF'(Val) ->
Val1 = ?RT_PER:list_to_record('RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_SETOF', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type Externaltypereference875GCC-PROTOCOLCapabilityID
'enc_CapabilityID'(element(2,Val1)),

%% attribute number 2 with type Externaltypereference876GCC-PROTOCOLCapabilityClass
'enc_CapabilityClass'(element(3,Val1)),

%% attribute number 3 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,65536},65536,{octets,2}}]
  begin
  Tmpval1=element(4,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65536,Tmpval2>=1 ->
      [20,2,<<(Tmpval2- 1):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end].

'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_SETOF'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%%  attribute number 1 with type CapabilityID
{Term1,Bytes2} = 'dec_CapabilityID'(Bytes1,telltype),

%%  attribute number 2 with type CapabilityClass
{Term2,Bytes3} = 'dec_CapabilityClass'(Bytes2,telltype),

%% attribute number 3 with type INTEGER
{Term3,Bytes4} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes3,2),
    {Tmpterm1+1,Tmpremain1}
  end,
{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),
Bytes6= ?RT_PER:skipextensions(Bytes5,1,Extensions)
,
{{'RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_SETOF',Term1,Term2,Term3},Bytes6}.


'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_components'(Num, Bytes1, telltype, []).
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_SETOF'(Bytes, telltype),
   'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_components'(Num-1, Remain, telltype, [Term|Acc]).

'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,2,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*2 of
0 -> {noChange,
?RT_PER:decode_null(Bytes2)};
1 -> {refresh,
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh'(Bytes2, telltype)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.

'dec_RosterUpdateIndication_applicationInformation_SETOF'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%%  attribute number 1 with type SessionKey
{Term1,Bytes2} = 'dec_SessionKey'(Bytes1,telltype),

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList'(Bytes2, telltype),

%% attribute number 3 with type CHOICE
{Term3,Bytes4} = 'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList'(Bytes3, telltype),

%% attribute number 4 with type INTEGER
{Term4,Bytes5} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes4,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = ?RT_PER:decode_boolean(Bytes5),

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = ?RT_PER:decode_boolean(Bytes6),
{Extensions,Bytes8} = ?RT_PER:getextension(Ext,Bytes7),
Bytes9= ?RT_PER:skipextensions(Bytes8,1,Extensions)
,
{{'RosterUpdateIndication_applicationInformation_SETOF',Term1,Term2,Term3,Term4,Term5,Term6},Bytes9}.


'dec_RosterUpdateIndication_applicationInformation'(Bytes,_) ->

{Val,Remain} = ?RT_PER:getoctets(Bytes,2),

{Num,Bytes1} = {Val+0,Remain},
'dec_RosterUpdateIndication_applicationInformation_components'(Num, Bytes1, telltype, []).
'dec_RosterUpdateIndication_applicationInformation_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_RosterUpdateIndication_applicationInformation_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_RosterUpdateIndication_applicationInformation_SETOF'(Bytes, telltype),
   'dec_RosterUpdateIndication_applicationInformation_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_RosterUpdateIndication'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = ?RT_PER:decode_boolean(Bytes1),

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = 'dec_RosterUpdateIndication_nodeInformation'(Bytes2, telltype),

%% attribute number 3 with type SET OF
{Term3,Bytes4} = 'dec_RosterUpdateIndication_applicationInformation'(Bytes3, telltype),
{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),
Bytes6= ?RT_PER:skipextensions(Bytes5,1,Extensions)
,
{{'RosterUpdateIndication',Term1,Term2,Term3},Bytes6}.

'enc_ApplicationInvokeIndication'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type SET OF
'enc_ApplicationInvokeIndication_applicationProtocolEntiyList'(element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 2 with type SET OF
'enc_ApplicationInvokeIndication_destinationNodes'(Tmpval1)
end].

'enc_ApplicationInvokeIndication_applicationProtocolEntiyList'({'ApplicationInvokeIndication_applicationProtocolEntiyList',Val}) ->
'enc_ApplicationInvokeIndication_applicationProtocolEntiyList'(Val);

'enc_ApplicationInvokeIndication_applicationProtocolEntiyList'(Val) ->
[

   ?RT_PER:encode_length({1,65536},length(Val)),
   'enc_ApplicationInvokeIndication_applicationProtocolEntiyList_components'(Val, [])
].
'enc_ApplicationInvokeIndication_applicationProtocolEntiyList_components'([], Acc) -> lists:reverse(Acc);

'enc_ApplicationInvokeIndication_applicationProtocolEntiyList_components'([H|T], Acc) ->
'enc_ApplicationInvokeIndication_applicationProtocolEntiyList_components'(T, ['enc_ApplicationInvokeSpecifier'(H)

 | Acc]).

'dec_ApplicationInvokeIndication_applicationProtocolEntiyList'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,{1,65536}),
'dec_ApplicationInvokeIndication_applicationProtocolEntiyList_components'(Num, Bytes1, telltype, []).
'dec_ApplicationInvokeIndication_applicationProtocolEntiyList_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ApplicationInvokeIndication_applicationProtocolEntiyList_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_ApplicationInvokeSpecifier'(Bytes,telltype),
   'dec_ApplicationInvokeIndication_applicationProtocolEntiyList_components'(Num-1, Remain, telltype, [Term|Acc]).

'enc_ApplicationInvokeIndication_destinationNodes'({'ApplicationInvokeIndication_destinationNodes',Val}) ->
'enc_ApplicationInvokeIndication_destinationNodes'(Val);

'enc_ApplicationInvokeIndication_destinationNodes'(Val) ->
[

   ?RT_PER:encode_length({1,65536},length(Val)),
   'enc_ApplicationInvokeIndication_destinationNodes_components'(Val, [])
].
'enc_ApplicationInvokeIndication_destinationNodes_components'([], Acc) -> lists:reverse(Acc);

'enc_ApplicationInvokeIndication_destinationNodes_components'([H|T], Acc) ->
'enc_ApplicationInvokeIndication_destinationNodes_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=1001 ->
      [20,2,<<(Tmpval1- 1001):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_ApplicationInvokeIndication_destinationNodes'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,{1,65536}),
'dec_ApplicationInvokeIndication_destinationNodes_components'(Num, Bytes1, telltype, []).
'dec_ApplicationInvokeIndication_destinationNodes_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ApplicationInvokeIndication_destinationNodes_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1001,Tmpremain1}
  end,
   'dec_ApplicationInvokeIndication_destinationNodes_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_ApplicationInvokeIndication'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),
%% attribute number 1 with type SET OF
{Term1,Bytes3} = 'dec_ApplicationInvokeIndication_applicationProtocolEntiyList'(Bytes2, telltype),

%% attribute number 2 with type SET OF
{Term2,Bytes4} = case Opt band (1 bsl 0) of
  _Opt2 when _Opt2 > 0 ->'dec_ApplicationInvokeIndication_destinationNodes'(Bytes3, telltype);
0 ->{asn1_NOVALUE,Bytes3}

end,
{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),
Bytes6= ?RT_PER:skipextensions(Bytes5,1,Extensions)
,
{{'ApplicationInvokeIndication',Term1,Term2},Bytes6}.

'enc_RegistryRegisterChannelRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('RegistryRegisterChannelRequest', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type Externaltypereference905GCC-PROTOCOLRegistryKey
'enc_RegistryKey'(element(3,Val1)),

%% attribute number 3 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  Tmpval3=element(4,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<65535,Tmpval4>=1001 ->
      [20,2,<<(Tmpval4- 1001):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end].


'dec_RegistryRegisterChannelRequest'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type INTEGER
{Term1,Bytes2} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%%  attribute number 2 with type RegistryKey
{Term2,Bytes3} = 'dec_RegistryKey'(Bytes2,telltype),

%% attribute number 3 with type INTEGER
{Term3,Bytes4} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes3,2),
    {Tmpterm2+1001,Tmpremain2}
  end,
{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),
Bytes6= ?RT_PER:skipextensions(Bytes5,1,Extensions)
,
{{'RegistryRegisterChannelRequest',Term1,Term2,Term3},Bytes6}.

'enc_RegistryAssignTokenRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('RegistryAssignTokenRequest', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type Externaltypereference913GCC-PROTOCOLRegistryKey
'enc_RegistryKey'(element(3,Val1))].


'dec_RegistryAssignTokenRequest'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type INTEGER
{Term1,Bytes2} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%%  attribute number 2 with type RegistryKey
{Term2,Bytes3} = 'dec_RegistryKey'(Bytes2,telltype),
{Extensions,Bytes4} = ?RT_PER:getextension(Ext,Bytes3),
Bytes5= ?RT_PER:skipextensions(Bytes4,1,Extensions)
,
{{'RegistryAssignTokenRequest',Term1,Term2},Bytes5}.

'enc_RegistrySetParameterRequest'(Val) ->
Fixopt1 = case element(5,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type Externaltypereference920GCC-PROTOCOLRegistryKey
'enc_RegistryKey'(element(3,Val1)),

%% attribute number 3 with type OCTET STRING
  ?RT_PER:encode_octet_string({0,64},false,element(4,Val1))
,
case element(5,Val1) of
asn1_NOVALUE -> [];
Tmpval3 ->

%% attribute number 4 with type ENUMERATED
  begin
  case (case Tmpval3 of owner->0;session->1;public->2;Tmpval4 ->exit({error,{asn1,{enumerated,Tmpval4}}}) end) of
    Tmpval5 when Tmpval5=<2,Tmpval5>=0 ->
      [10,2,Tmpval5- 0];
    Tmpval5 ->
      exit({error,{value_out_of_bounds,Tmpval5}})
  end

  end
end].


'dec_RegistrySetParameterRequest'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),
%% attribute number 1 with type INTEGER
{Term1,Bytes3} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%%  attribute number 2 with type RegistryKey
{Term2,Bytes4} = 'dec_RegistryKey'(Bytes3,telltype),

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} =   ?RT_PER:decode_octet_string(Bytes4,{0,64},false)
,

%% attribute number 4 with type ENUMERATED
{Term4,Bytes6} = case Opt band (1 bsl 0) of
  _Opt4 when _Opt4 > 0 ->  begin
    {Tmpterm2,Tmpremain2} =
  begin
    {Tmpterm3,Tmpremain3}=?RT_PER:getbits(Bytes5,2),
    {Tmpterm3+0,Tmpremain3}
  end,
    case Tmpterm2 of 0->{owner,Tmpremain2};1->{session,Tmpremain2};2->{public,Tmpremain2};_->exit({error,{asn1,{decode_enumerated,{Tmpterm2,[owner,session,public]}}}}) end
  end;
0 ->{asn1_NOVALUE,Bytes5}

end,
{Extensions,Bytes7} = ?RT_PER:getextension(Ext,Bytes6),
Bytes8= ?RT_PER:skipextensions(Bytes7,1,Extensions)
,
{{'RegistrySetParameterRequest',Term1,Term2,Term3,Term4},Bytes8}.

'enc_RegistryRetrieveEntryRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('RegistryRetrieveEntryRequest', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type Externaltypereference929GCC-PROTOCOLRegistryKey
'enc_RegistryKey'(element(3,Val1))].


'dec_RegistryRetrieveEntryRequest'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type INTEGER
{Term1,Bytes2} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%%  attribute number 2 with type RegistryKey
{Term2,Bytes3} = 'dec_RegistryKey'(Bytes2,telltype),
{Extensions,Bytes4} = ?RT_PER:getextension(Ext,Bytes3),
Bytes5= ?RT_PER:skipextensions(Bytes4,1,Extensions)
,
{{'RegistryRetrieveEntryRequest',Term1,Term2},Bytes5}.

'enc_RegistryDeleteEntryRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('RegistryDeleteEntryRequest', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type Externaltypereference936GCC-PROTOCOLRegistryKey
'enc_RegistryKey'(element(3,Val1))].


'dec_RegistryDeleteEntryRequest'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type INTEGER
{Term1,Bytes2} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%%  attribute number 2 with type RegistryKey
{Term2,Bytes3} = 'dec_RegistryKey'(Bytes2,telltype),
{Extensions,Bytes4} = ?RT_PER:getextension(Ext,Bytes3),
Bytes5= ?RT_PER:skipextensions(Bytes4,1,Extensions)
,
{{'RegistryDeleteEntryRequest',Term1,Term2},Bytes5}.

'enc_RegistryMonitorEntryRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('RegistryMonitorEntryRequest', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type Externaltypereference943GCC-PROTOCOLRegistryKey
'enc_RegistryKey'(element(3,Val1))].


'dec_RegistryMonitorEntryRequest'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type INTEGER
{Term1,Bytes2} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%%  attribute number 2 with type RegistryKey
{Term2,Bytes3} = 'dec_RegistryKey'(Bytes2,telltype),
{Extensions,Bytes4} = ?RT_PER:getextension(Ext,Bytes3),
Bytes5= ?RT_PER:skipextensions(Bytes4,1,Extensions)
,
{{'RegistryMonitorEntryRequest',Term1,Term2},Bytes5}.

'enc_RegistryMonitorEntryIndication'(Val) ->
Fixopt1 = case element(5,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type Externaltypereference949GCC-PROTOCOLRegistryKey
'enc_RegistryKey'(element(2,Val1)),

%% attribute number 2 with type Externaltypereference950GCC-PROTOCOLRegistryItem
'enc_RegistryItem'(element(3,Val1)),

%% attribute number 3 with type Externaltypereference952GCC-PROTOCOLRegistryEntryOwner
'enc_RegistryEntryOwner'(element(4,Val1)),
case element(5,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 4 with type ENUMERATED
  begin
  case (case Tmpval1 of owner->0;session->1;public->2;Tmpval2 ->exit({error,{asn1,{enumerated,Tmpval2}}}) end) of
    Tmpval3 when Tmpval3=<2,Tmpval3>=0 ->
      [10,2,Tmpval3- 0];
    Tmpval3 ->
      exit({error,{value_out_of_bounds,Tmpval3}})
  end

  end
end].


'dec_RegistryMonitorEntryIndication'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),
%%  attribute number 1 with type RegistryKey
{Term1,Bytes3} = 'dec_RegistryKey'(Bytes2,telltype),

%%  attribute number 2 with type RegistryItem
{Term2,Bytes4} = 'dec_RegistryItem'(Bytes3,telltype),

%%  attribute number 3 with type RegistryEntryOwner
{Term3,Bytes5} = 'dec_RegistryEntryOwner'(Bytes4,telltype),

%% attribute number 4 with type ENUMERATED
{Term4,Bytes6} = case Opt band (1 bsl 0) of
  _Opt4 when _Opt4 > 0 ->  begin
    {Tmpterm1,Tmpremain1} =
  begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getbits(Bytes5,2),
    {Tmpterm2+0,Tmpremain2}
  end,
    case Tmpterm1 of 0->{owner,Tmpremain1};1->{session,Tmpremain1};2->{public,Tmpremain1};_->exit({error,{asn1,{decode_enumerated,{Tmpterm1,[owner,session,public]}}}}) end
  end;
0 ->{asn1_NOVALUE,Bytes5}

end,
{Extensions,Bytes7} = ?RT_PER:getextension(Ext,Bytes6),
Bytes8= ?RT_PER:skipextensions(Bytes7,1,Extensions)
,
{{'RegistryMonitorEntryIndication',Term1,Term2,Term3,Term4},Bytes8}.

'enc_RegistryAllocateHandleRequest'(Val) ->
Val1 = ?RT_PER:list_to_record('RegistryAllocateHandleRequest', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,1024},1024,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<1024,Tmpval4>=1 ->
      [20,2,<<(Tmpval4- 1):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end].


'dec_RegistryAllocateHandleRequest'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type INTEGER
{Term1,Bytes2} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm2+1,Tmpremain2}
  end,
{Extensions,Bytes4} = ?RT_PER:getextension(Ext,Bytes3),
Bytes5= ?RT_PER:skipextensions(Bytes4,1,Extensions)
,
{{'RegistryAllocateHandleRequest',Term1,Term2},Bytes5}.

'enc_RegistryAllocateHandleResponse'(Val) ->
Val1 = ?RT_PER:list_to_record('RegistryAllocateHandleResponse', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1,1024},1024,{octets,2}}]
  begin
  Tmpval3=element(3,Val1),
  case Tmpval3 of
    Tmpval4 when Tmpval4=<1024,Tmpval4>=1 ->
      [20,2,<<(Tmpval4- 1):16>>];
    Tmpval4 ->
      exit({error,{value_out_of_bounds,Tmpval4}})
  end

  end,

%% attribute number 3 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,4294967295}}]
  ?RT_PER:encode_integer([{'ValueRange',{0,4294967295}}],element(4,Val1)),

%% attribute number 4 with type ENUMERATED
case element(5,Val1) of
'successful' -> [0,0];
'noHandlesAvailable' -> [0,1];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end].


'dec_RegistryAllocateHandleResponse'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type INTEGER
{Term1,Bytes2} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} =   begin
    {Tmpterm2,Tmpremain2}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm2+1,Tmpremain2}
  end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = ?RT_PER:decode_constrained_number(Bytes3,{0,4294967295},4294967296),

%% attribute number 4 with type ENUMERATED
{Term4,Bytes5} = ?RT_PER:decode_enumerated(Bytes4,[{'ValueRange',{0,1}}],{{successful,noHandlesAvailable},{}}),
{Extensions,Bytes6} = ?RT_PER:getextension(Ext,Bytes5),
Bytes7= ?RT_PER:skipextensions(Bytes6,1,Extensions)
,
{{'RegistryAllocateHandleResponse',Term1,Term2,Term3,Term4},Bytes7}.

'enc_RegistryResponse'(Val) ->
Fixopt1 = case element(7,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{0,65535},65536,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=0 ->
      [20,2,<<(Tmpval2- 0):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type ENUMERATED
case element(3,Val1) of
'registerChannel' -> [0,10,3,0];
'assignToken' -> [0,10,3,1];
'setParameter' -> [0,10,3,2];
'retrieveEntry' -> [0,10,3,3];
'deleteEntry' -> [0,10,3,4];
'monitorEntry' -> [0,10,3,5];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end,

%% attribute number 3 with type Externaltypereference982GCC-PROTOCOLRegistryKey
'enc_RegistryKey'(element(4,Val1)),

%% attribute number 4 with type Externaltypereference984GCC-PROTOCOLRegistryItem
'enc_RegistryItem'(element(5,Val1)),

%% attribute number 5 with type Externaltypereference986GCC-PROTOCOLRegistryEntryOwner
'enc_RegistryEntryOwner'(element(6,Val1)),
case element(7,Val1) of
asn1_NOVALUE -> [];
Tmpval3 ->

%% attribute number 6 with type ENUMERATED
  begin
  case (case Tmpval3 of owner->0;session->1;public->2;Tmpval4 ->exit({error,{asn1,{enumerated,Tmpval4}}}) end) of
    Tmpval5 when Tmpval5=<2,Tmpval5>=0 ->
      [10,2,Tmpval5- 0];
    Tmpval5 ->
      exit({error,{value_out_of_bounds,Tmpval5}})
  end

  end
end,

%% attribute number 7 with type ENUMERATED
case element(8,Val1) of
'successful' -> [0,10,3,0];
'belongsToOther' -> [0,10,3,1];
'tooManyEntries' -> [0,10,3,2];
'inconsistentType' -> [0,10,3,3];
'entryNotFound' -> [0,10,3,4];
'entryAlreadyExists' -> [0,10,3,5];
'invalidRequester' -> [0,10,3,6];

EnumVal -> exit({error,{asn1, {enumerated_not_in_range, EnumVal}}})
end].


'dec_RegistryResponse'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),
%% attribute number 1 with type INTEGER
{Term1,Bytes3} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm1+0,Tmpremain1}
  end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = ?RT_PER:decode_enumerated(Bytes3,[{'ValueRange',{0,5}}],{{registerChannel,assignToken,setParameter,retrieveEntry,deleteEntry,monitorEntry},{}}),

%%  attribute number 3 with type RegistryKey
{Term3,Bytes5} = 'dec_RegistryKey'(Bytes4,telltype),

%%  attribute number 4 with type RegistryItem
{Term4,Bytes6} = 'dec_RegistryItem'(Bytes5,telltype),

%%  attribute number 5 with type RegistryEntryOwner
{Term5,Bytes7} = 'dec_RegistryEntryOwner'(Bytes6,telltype),

%% attribute number 6 with type ENUMERATED
{Term6,Bytes8} = case Opt band (1 bsl 0) of
  _Opt6 when _Opt6 > 0 ->  begin
    {Tmpterm2,Tmpremain2} =
  begin
    {Tmpterm3,Tmpremain3}=?RT_PER:getbits(Bytes7,2),
    {Tmpterm3+0,Tmpremain3}
  end,
    case Tmpterm2 of 0->{owner,Tmpremain2};1->{session,Tmpremain2};2->{public,Tmpremain2};_->exit({error,{asn1,{decode_enumerated,{Tmpterm2,[owner,session,public]}}}}) end
  end;
0 ->{asn1_NOVALUE,Bytes7}

end,

%% attribute number 7 with type ENUMERATED
{Term7,Bytes9} = ?RT_PER:decode_enumerated(Bytes8,[{'ValueRange',{0,6}}],{{successful,belongsToOther,tooManyEntries,inconsistentType,entryNotFound,entryAlreadyExists,invalidRequester},{}}),
{Extensions,Bytes10} = ?RT_PER:getextension(Ext,Bytes9),
Bytes11= ?RT_PER:skipextensions(Bytes10,1,Extensions)
,
{{'RegistryResponse',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes11}.

'enc_ConductorAssignIndication'(Val) ->
Val1 = ?RT_PER:list_to_record('ConductorAssignIndication', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=1001 ->
      [20,2,<<(Tmpval2- 1001):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end].


'dec_ConductorAssignIndication'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type INTEGER
{Term1,Bytes2} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes1,2),
    {Tmpterm1+1001,Tmpremain1}
  end,
{Extensions,Bytes3} = ?RT_PER:getextension(Ext,Bytes2),
Bytes4= ?RT_PER:skipextensions(Bytes3,1,Extensions)
,
{{'ConductorAssignIndication',Term1},Bytes4}.

'enc_ConductorReleaseIndication'(Val) ->
%%Variable setting just to eliminate compiler warning for unused vars!
_Val = Val,
[
?RT_PER:setext(false)].


'dec_ConductorReleaseIndication'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Extensions,Bytes2} = ?RT_PER:getextension(Ext,Bytes1),
Bytes3= ?RT_PER:skipextensions(Bytes2,1,Extensions)
,
{{'ConductorReleaseIndication'},Bytes3}.

'enc_ConductorPermissionAskIndication'(Val) ->
Val1 = ?RT_PER:list_to_record('ConductorPermissionAskIndication', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type BOOLEAN
case element(2,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(2,Val1)}}})
end].


'dec_ConductorPermissionAskIndication'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = ?RT_PER:decode_boolean(Bytes1),
{Extensions,Bytes3} = ?RT_PER:getextension(Ext,Bytes2),
Bytes4= ?RT_PER:skipextensions(Bytes3,1,Extensions)
,
{{'ConductorPermissionAskIndication',Term1},Bytes4}.

'enc_ConductorPermissionGrantIndication'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type SEQUENCE OF
'enc_ConductorPermissionGrantIndication_permissionList'(element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 2 with type SEQUENCE OF
'enc_ConductorPermissionGrantIndication_waitingList'(Tmpval1)
end].

'enc_ConductorPermissionGrantIndication_permissionList'({'ConductorPermissionGrantIndication_permissionList',Val}) ->
'enc_ConductorPermissionGrantIndication_permissionList'(Val);

'enc_ConductorPermissionGrantIndication_permissionList'(Val) ->
[

[20,2,<<(length(Val) - 0):16>>],
   'enc_ConductorPermissionGrantIndication_permissionList_components'(Val, [])
].
'enc_ConductorPermissionGrantIndication_permissionList_components'([], Acc) -> lists:reverse(Acc);

'enc_ConductorPermissionGrantIndication_permissionList_components'([H|T], Acc) ->
'enc_ConductorPermissionGrantIndication_permissionList_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=1001 ->
      [20,2,<<(Tmpval1- 1001):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_ConductorPermissionGrantIndication_permissionList'(Bytes,_) ->

{Val,Remain} = ?RT_PER:getoctets(Bytes,2),

{Num,Bytes1} = {Val+0,Remain},
'dec_ConductorPermissionGrantIndication_permissionList_components'(Num, Bytes1, telltype, []).
'dec_ConductorPermissionGrantIndication_permissionList_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ConductorPermissionGrantIndication_permissionList_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1001,Tmpremain1}
  end,
   'dec_ConductorPermissionGrantIndication_permissionList_components'(Num-1, Remain, telltype, [Term|Acc]).

'enc_ConductorPermissionGrantIndication_waitingList'({'ConductorPermissionGrantIndication_waitingList',Val}) ->
'enc_ConductorPermissionGrantIndication_waitingList'(Val);

'enc_ConductorPermissionGrantIndication_waitingList'(Val) ->
[

   ?RT_PER:encode_length({1,65536},length(Val)),
   'enc_ConductorPermissionGrantIndication_waitingList_components'(Val, [])
].
'enc_ConductorPermissionGrantIndication_waitingList_components'([], Acc) -> lists:reverse(Acc);

'enc_ConductorPermissionGrantIndication_waitingList_components'([H|T], Acc) ->
'enc_ConductorPermissionGrantIndication_waitingList_components'(T, [  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
 case H of
    Tmpval1 when Tmpval1=<65535,Tmpval1>=1001 ->
      [20,2,<<(Tmpval1- 1001):16>>];
    Tmpval1 ->
      exit({error,{value_out_of_bounds,Tmpval1}})
  end
 | Acc]).

'dec_ConductorPermissionGrantIndication_waitingList'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,{1,65536}),
'dec_ConductorPermissionGrantIndication_waitingList_components'(Num, Bytes1, telltype, []).
'dec_ConductorPermissionGrantIndication_waitingList_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_ConductorPermissionGrantIndication_waitingList_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes,2),
    {Tmpterm1+1001,Tmpremain1}
  end,
   'dec_ConductorPermissionGrantIndication_waitingList_components'(Num-1, Remain, telltype, [Term|Acc]).


'dec_ConductorPermissionGrantIndication'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),
%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes3} = 'dec_ConductorPermissionGrantIndication_permissionList'(Bytes2, telltype),

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band (1 bsl 0) of
  _Opt2 when _Opt2 > 0 ->'dec_ConductorPermissionGrantIndication_waitingList'(Bytes3, telltype);
0 ->{asn1_NOVALUE,Bytes3}

end,
{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),
Bytes6= ?RT_PER:skipextensions(Bytes5,1,Extensions)
,
{{'ConductorPermissionGrantIndication',Term1,Term2},Bytes6}.

'enc_ConferenceTimeRemainingIndication'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{-2147483648,2147483647}}]
  ?RT_PER:encode_integer([{'ValueRange',{-2147483648,2147483647}}],element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 2 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=1001 ->
      [20,2,<<(Tmpval2- 1001):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end
end].


'dec_ConferenceTimeRemainingIndication'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),
%% attribute number 1 with type INTEGER
{Term1,Bytes3} = ?RT_PER:decode_constrained_number(Bytes2,{-2147483648,2147483647},4294967296),

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case Opt band (1 bsl 0) of
  _Opt2 when _Opt2 > 0 ->  begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes3,2),
    {Tmpterm1+1001,Tmpremain1}
  end;
0 ->{asn1_NOVALUE,Bytes3}

end,
{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),
Bytes6= ?RT_PER:skipextensions(Bytes5,1,Extensions)
,
{{'ConferenceTimeRemainingIndication',Term1,Term2},Bytes6}.

'enc_ConferenceTimeInquireIndication'(Val) ->
Val1 = ?RT_PER:list_to_record('ConferenceTimeInquireIndication', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type BOOLEAN
case element(2,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(2,Val1)}}})
end].


'dec_ConferenceTimeInquireIndication'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = ?RT_PER:decode_boolean(Bytes1),
{Extensions,Bytes3} = ?RT_PER:getextension(Ext,Bytes2),
Bytes4= ?RT_PER:skipextensions(Bytes3,1,Extensions)
,
{{'ConferenceTimeInquireIndication',Term1},Bytes4}.

'enc_ConferenceTimeExtendIndication'(Val) ->
Val1 = ?RT_PER:list_to_record('ConferenceTimeExtendIndication', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{-2147483648,2147483647}}]
  ?RT_PER:encode_integer([{'ValueRange',{-2147483648,2147483647}}],element(2,Val1)),

%% attribute number 2 with type BOOLEAN
case element(3,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(3,Val1)}}})
end].


'dec_ConferenceTimeExtendIndication'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = ?RT_PER:decode_constrained_number(Bytes1,{-2147483648,2147483647},4294967296),

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = ?RT_PER:decode_boolean(Bytes2),
{Extensions,Bytes4} = ?RT_PER:getextension(Ext,Bytes3),
Bytes5= ?RT_PER:skipextensions(Bytes4,1,Extensions)
,
{{'ConferenceTimeExtendIndication',Term1,Term2},Bytes5}.

'enc_ConferenceAssistanceIndication'(Val) ->
Fixopt1 = case element(2,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
?RT_PER:setext(false), Opt,
case element(2,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 1 with type Externaltypereference1048GCC-PROTOCOLUserData
'enc_UserData'(Tmpval1)
end].


'dec_ConferenceAssistanceIndication'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),
%%  attribute number 1 with type UserData
{Term1,Bytes3} = case Opt band (1 bsl 0) of
  _Opt1 when _Opt1 > 0 ->'dec_UserData'(Bytes2,telltype);
0 ->{asn1_NOVALUE,Bytes2}

end,
{Extensions,Bytes4} = ?RT_PER:getextension(Ext,Bytes3),
Bytes5= ?RT_PER:skipextensions(Bytes4,1,Extensions)
,
{{'ConferenceAssistanceIndication',Term1},Bytes5}.

'enc_TextMessageIndication'(Val) ->
Val1 = ?RT_PER:list_to_record('TextMessageIndication', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type BMPString
?RT_PER:encode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},element(2,Val1))].


'dec_TextMessageIndication'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%% attribute number 1 with type BMPString
{Term1,Bytes2} = ?RT_PER:decode_known_multiplier_string('BMPString',{0,255},16,{0,65535,notab},Bytes1),
{Extensions,Bytes3} = ?RT_PER:getextension(Ext,Bytes2),
Bytes4= ?RT_PER:skipextensions(Bytes3,1,Extensions)
,
{{'TextMessageIndication',Term1},Bytes4}.

'enc_RosterRefreshRequest'(Val) ->
Fixopt1 = case element(5,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt2 = case element(6,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt3 = case element(7,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
Fixopt4 = case element(8,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1,Fixopt2,Fixopt3,Fixopt4]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type INTEGER
  %%INTEGER with effective constraint: [{'ValueRange',{1001,65535},64535,{octets,2}}]
  begin
  Tmpval1=element(2,Val1),
  case Tmpval1 of
    Tmpval2 when Tmpval2=<65535,Tmpval2>=1001 ->
      [20,2,<<(Tmpval2- 1001):16>>];
    Tmpval2 ->
      exit({error,{value_out_of_bounds,Tmpval2}})
  end

  end,

%% attribute number 2 with type Externaltypereference1060GCC-PROTOCOLNodeCategory
'enc_NodeCategory'(element(3,Val1)),

%% attribute number 3 with type BOOLEAN
case element(4,Val1) of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,element(4,Val1)}}})
end,
case element(5,Val1) of
asn1_NOVALUE -> [];
Tmpval3 ->

%% attribute number 4 with type BOOLEAN
case Tmpval3 of
  true -> [1];
  false -> [0];
  _ -> exit({error,{asn1,{encode_boolean,Tmpval3}}})
end
end,
case element(6,Val1) of
asn1_NOVALUE -> [];
Tmpval4 ->

%% attribute number 5 with type SEQUENCE
'enc_RosterRefreshRequest_applicationList'(Tmpval4)
end,
case element(7,Val1) of
asn1_NOVALUE -> [];
Tmpval5 ->

%% attribute number 6 with type SEQUENCE
'enc_RosterRefreshRequest_sessionList'(Tmpval5)
end,
case element(8,Val1) of
asn1_NOVALUE -> [];
Tmpval6 ->

%% attribute number 7 with type Externaltypereference1080GCC-PROTOCOLNonStandardParameter
'enc_NonStandardParameter'(Tmpval6)
end].
'enc_RosterRefreshRequest_applicationList'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type SET OF
'enc_RosterRefreshRequest_applicationList_applicationKeyList'(element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 2 with type Externaltypereference1070GCC-PROTOCOLNonStandardParameter
'enc_NonStandardParameter'(Tmpval1)
end].

'enc_RosterRefreshRequest_applicationList_applicationKeyList'({'RosterRefreshRequest_applicationList_applicationKeyList',Val}) ->
'enc_RosterRefreshRequest_applicationList_applicationKeyList'(Val);

'enc_RosterRefreshRequest_applicationList_applicationKeyList'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_RosterRefreshRequest_applicationList_applicationKeyList_components'(Val, [])
].
'enc_RosterRefreshRequest_applicationList_applicationKeyList_components'([], Acc) -> lists:reverse(Acc);

'enc_RosterRefreshRequest_applicationList_applicationKeyList_components'([H|T], Acc) ->
'enc_RosterRefreshRequest_applicationList_applicationKeyList_components'(T, ['enc_RosterRefreshRequest_applicationList_applicationKeyList_SETOF'(H)

 | Acc]).
'enc_RosterRefreshRequest_applicationList_applicationKeyList_SETOF'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type Externaltypereference1066GCC-PROTOCOLKey
'enc_Key'(element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 2 with type Externaltypereference1068GCC-PROTOCOLNonStandardParameter
'enc_NonStandardParameter'(Tmpval1)
end].

'dec_RosterRefreshRequest_applicationList_applicationKeyList_SETOF'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),
%%  attribute number 1 with type Key
{Term1,Bytes3} = 'dec_Key'(Bytes2,telltype),

%%  attribute number 2 with type NonStandardParameter
{Term2,Bytes4} = case Opt band (1 bsl 0) of
  _Opt2 when _Opt2 > 0 ->'dec_NonStandardParameter'(Bytes3,telltype);
0 ->{asn1_NOVALUE,Bytes3}

end,
{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),
Bytes6= ?RT_PER:skipextensions(Bytes5,1,Extensions)
,
{{'RosterRefreshRequest_applicationList_applicationKeyList_SETOF',Term1,Term2},Bytes6}.


'dec_RosterRefreshRequest_applicationList_applicationKeyList'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_RosterRefreshRequest_applicationList_applicationKeyList_components'(Num, Bytes1, telltype, []).
'dec_RosterRefreshRequest_applicationList_applicationKeyList_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_RosterRefreshRequest_applicationList_applicationKeyList_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_RosterRefreshRequest_applicationList_applicationKeyList_SETOF'(Bytes, telltype),
   'dec_RosterRefreshRequest_applicationList_applicationKeyList_components'(Num-1, Remain, telltype, [Term|Acc]).

'dec_RosterRefreshRequest_applicationList'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),
%% attribute number 1 with type SET OF
{Term1,Bytes3} = 'dec_RosterRefreshRequest_applicationList_applicationKeyList'(Bytes2, telltype),

%%  attribute number 2 with type NonStandardParameter
{Term2,Bytes4} = case Opt band (1 bsl 0) of
  _Opt2 when _Opt2 > 0 ->'dec_NonStandardParameter'(Bytes3,telltype);
0 ->{asn1_NOVALUE,Bytes3}

end,
{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),
Bytes6= ?RT_PER:skipextensions(Bytes5,1,Extensions)
,
{{'RosterRefreshRequest_applicationList',Term1,Term2},Bytes6}.

'enc_RosterRefreshRequest_sessionList'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type SET OF
'enc_RosterRefreshRequest_sessionList_sessionKeyList'(element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 2 with type Externaltypereference1078GCC-PROTOCOLNonStandardParameter
'enc_NonStandardParameter'(Tmpval1)
end].

'enc_RosterRefreshRequest_sessionList_sessionKeyList'({'RosterRefreshRequest_sessionList_sessionKeyList',Val}) ->
'enc_RosterRefreshRequest_sessionList_sessionKeyList'(Val);

'enc_RosterRefreshRequest_sessionList_sessionKeyList'(Val) ->
[

   ?RT_PER:encode_length(undefined,length(Val)),
   'enc_RosterRefreshRequest_sessionList_sessionKeyList_components'(Val, [])
].
'enc_RosterRefreshRequest_sessionList_sessionKeyList_components'([], Acc) -> lists:reverse(Acc);

'enc_RosterRefreshRequest_sessionList_sessionKeyList_components'([H|T], Acc) ->
'enc_RosterRefreshRequest_sessionList_sessionKeyList_components'(T, ['enc_RosterRefreshRequest_sessionList_sessionKeyList_SETOF'(H)

 | Acc]).
'enc_RosterRefreshRequest_sessionList_sessionKeyList_SETOF'(Val) ->
Fixopt1 = case element(3,Val) of
asn1_DEFAULT -> 0;
asn1_NOVALUE -> 0;
_ -> 1
end,
{Val1,Opt} = {Val,[Fixopt1]},
[
?RT_PER:setext(false), Opt,

%% attribute number 1 with type Externaltypereference1075GCC-PROTOCOLSessionKey
'enc_SessionKey'(element(2,Val1)),
case element(3,Val1) of
asn1_NOVALUE -> [];
Tmpval1 ->

%% attribute number 2 with type Externaltypereference1076GCC-PROTOCOLNonStandardParameter
'enc_NonStandardParameter'(Tmpval1)
end].

'dec_RosterRefreshRequest_sessionList_sessionKeyList_SETOF'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),
%%  attribute number 1 with type SessionKey
{Term1,Bytes3} = 'dec_SessionKey'(Bytes2,telltype),

%%  attribute number 2 with type NonStandardParameter
{Term2,Bytes4} = case Opt band (1 bsl 0) of
  _Opt2 when _Opt2 > 0 ->'dec_NonStandardParameter'(Bytes3,telltype);
0 ->{asn1_NOVALUE,Bytes3}

end,
{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),
Bytes6= ?RT_PER:skipextensions(Bytes5,1,Extensions)
,
{{'RosterRefreshRequest_sessionList_sessionKeyList_SETOF',Term1,Term2},Bytes6}.


'dec_RosterRefreshRequest_sessionList_sessionKeyList'(Bytes,_) ->

{Num,Bytes1} = ?RT_PER:decode_length(Bytes,undefined),
'dec_RosterRefreshRequest_sessionList_sessionKeyList_components'(Num, Bytes1, telltype, []).
'dec_RosterRefreshRequest_sessionList_sessionKeyList_components'(0, Bytes, _, Acc) ->
   {lists:reverse(Acc), Bytes};
'dec_RosterRefreshRequest_sessionList_sessionKeyList_components'(Num, Bytes, _, Acc) ->
   {Term,Remain} = 'dec_RosterRefreshRequest_sessionList_sessionKeyList_SETOF'(Bytes, telltype),
   'dec_RosterRefreshRequest_sessionList_sessionKeyList_components'(Num-1, Remain, telltype, [Term|Acc]).

'dec_RosterRefreshRequest_sessionList'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,1),
%% attribute number 1 with type SET OF
{Term1,Bytes3} = 'dec_RosterRefreshRequest_sessionList_sessionKeyList'(Bytes2, telltype),

%%  attribute number 2 with type NonStandardParameter
{Term2,Bytes4} = case Opt band (1 bsl 0) of
  _Opt2 when _Opt2 > 0 ->'dec_NonStandardParameter'(Bytes3,telltype);
0 ->{asn1_NOVALUE,Bytes3}

end,
{Extensions,Bytes5} = ?RT_PER:getextension(Ext,Bytes4),
Bytes6= ?RT_PER:skipextensions(Bytes5,1,Extensions)
,
{{'RosterRefreshRequest_sessionList',Term1,Term2},Bytes6}.



'dec_RosterRefreshRequest'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),
{Opt,Bytes2} = ?RT_PER:getoptionals2(Bytes1,4),
%% attribute number 1 with type INTEGER
{Term1,Bytes3} =   begin
    {Tmpterm1,Tmpremain1}=?RT_PER:getoctets(Bytes2,2),
    {Tmpterm1+1001,Tmpremain1}
  end,

%%  attribute number 2 with type NodeCategory
{Term2,Bytes4} = 'dec_NodeCategory'(Bytes3,telltype),

%% attribute number 3 with type BOOLEAN
{Term3,Bytes5} = ?RT_PER:decode_boolean(Bytes4),

%% attribute number 4 with type BOOLEAN
{Term4,Bytes6} = case Opt band (1 bsl 3) of
  _Opt4 when _Opt4 > 0 ->?RT_PER:decode_boolean(Bytes5);
0 ->{asn1_NOVALUE,Bytes5}

end,

%% attribute number 5 with type SEQUENCE
{Term5,Bytes7} = case Opt band (1 bsl 2) of
  _Opt5 when _Opt5 > 0 ->'dec_RosterRefreshRequest_applicationList'(Bytes6, telltype);
0 ->{asn1_NOVALUE,Bytes6}

end,

%% attribute number 6 with type SEQUENCE
{Term6,Bytes8} = case Opt band (1 bsl 1) of
  _Opt6 when _Opt6 > 0 ->'dec_RosterRefreshRequest_sessionList'(Bytes7, telltype);
0 ->{asn1_NOVALUE,Bytes7}

end,

%%  attribute number 7 with type NonStandardParameter
{Term7,Bytes9} = case Opt band (1 bsl 0) of
  _Opt7 when _Opt7 > 0 ->'dec_NonStandardParameter'(Bytes8,telltype);
0 ->{asn1_NOVALUE,Bytes8}

end,
{Extensions,Bytes10} = ?RT_PER:getextension(Ext,Bytes9),
Bytes11= ?RT_PER:skipextensions(Bytes10,1,Extensions)
,
{{'RosterRefreshRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes11}.

'enc_FunctionNotSupportedResponse'(Val) ->
Val1 = ?RT_PER:list_to_record('FunctionNotSupportedResponse', Val),
[

%% attribute number 1 with type ExternaltypereferenceundefinedGCC-PROTOCOLRequestPDU
'enc_RequestPDU'(element(2,Val1))].


'dec_FunctionNotSupportedResponse'(Bytes,_) ->

%%  attribute number 1 with type RequestPDU
{Term1,Bytes1} = 'dec_RequestPDU'(Bytes,telltype),
{{'FunctionNotSupportedResponse',Term1},Bytes1}.

'enc_NonStandardPDU'(Val) ->
Val1 = ?RT_PER:list_to_record('NonStandardPDU', Val),
[
?RT_PER:setext(false),
%% attribute number 1 with type Externaltypereference1087GCC-PROTOCOLNonStandardParameter
'enc_NonStandardParameter'(element(2,Val1))].


'dec_NonStandardPDU'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getext(Bytes),

%%  attribute number 1 with type NonStandardParameter
{Term1,Bytes2} = 'dec_NonStandardParameter'(Bytes1,telltype),
{Extensions,Bytes3} = ?RT_PER:getextension(Ext,Bytes2),
Bytes4= ?RT_PER:skipextensions(Bytes3,1,Extensions)
,
{{'NonStandardPDU',Term1},Bytes4}.

'enc_ConnectData'(Val) ->
Val1 = ?RT_PER:list_to_record('ConnectData', Val),
[

%% attribute number 1 with type Externaltypereference1095GCC-PROTOCOLKey
'enc_Key'(element(2,Val1)),

%% attribute number 2 with type OCTET STRING
  ?RT_PER:encode_octet_string(no,false,element(3,Val1))
].


'dec_ConnectData'(Bytes,_) ->

%%  attribute number 1 with type Key
{Term1,Bytes1} = 'dec_Key'(Bytes,telltype),

%% attribute number 2 with type OCTET STRING
{Len, Bytes2} = ?RT_PER:decode_length(Bytes1, undefined),
RealLen = if Len == 42 -> byte_size(Bytes2); true -> Len end,
{Term2,Bytes3} =   ?RT_PER:decode_octet_string(Bytes2,RealLen,false)
,
{{'ConnectData',Term1,Term2},Bytes3}.


'enc_ConnectGCCPDU'({'ConnectGCCPDU',Val}) ->
'enc_ConnectGCCPDU'(Val);

'enc_ConnectGCCPDU'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[conferenceCreateRequest,conferenceCreateResponse,conferenceQueryRequest,conferenceQueryResponse,conferenceJoinRequest,conferenceJoinResponse,conferenceInviteRequest,conferenceInviteResponse],[]}, {8,0}),
case element(1,Val) of
conferenceCreateRequest ->
'enc_ConferenceCreateRequest'(element(2,Val));
conferenceCreateResponse ->
'enc_ConferenceCreateResponse'(element(2,Val));
conferenceQueryRequest ->
'enc_ConferenceQueryRequest'(element(2,Val));
conferenceQueryResponse ->
'enc_ConferenceQueryResponse'(element(2,Val));
conferenceJoinRequest ->
'enc_ConferenceJoinRequest'(element(2,Val));
conferenceJoinResponse ->
'enc_ConferenceJoinResponse'(element(2,Val));
conferenceInviteRequest ->
'enc_ConferenceInviteRequest'(element(2,Val));
conferenceInviteResponse ->
'enc_ConferenceInviteResponse'(element(2,Val))
end
].


'dec_ConnectGCCPDU'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,8,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*8 of
0 -> {conferenceCreateRequest,
'dec_ConferenceCreateRequest'(Bytes2,telltype)};
1 -> {conferenceCreateResponse,
'dec_ConferenceCreateResponse'(Bytes2,telltype)};
2 -> {conferenceQueryRequest,
'dec_ConferenceQueryRequest'(Bytes2,telltype)};
3 -> {conferenceQueryResponse,
'dec_ConferenceQueryResponse'(Bytes2,telltype)};
4 -> {conferenceJoinRequest,
'dec_ConferenceJoinRequest'(Bytes2,telltype)};
5 -> {conferenceJoinResponse,
'dec_ConferenceJoinResponse'(Bytes2,telltype)};
6 -> {conferenceInviteRequest,
'dec_ConferenceInviteRequest'(Bytes2,telltype)};
7 -> {conferenceInviteResponse,
'dec_ConferenceInviteResponse'(Bytes2,telltype)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.

'enc_GCCPDU'({'GCCPDU',Val}) ->
'enc_GCCPDU'(Val);

'enc_GCCPDU'(Val) ->
[
?RT_PER:set_choice(element(1,Val),[request,response,indication], 3),
case element(1,Val) of
request ->
'enc_RequestPDU'(element(2,Val));
response ->
'enc_ResponsePDU'(element(2,Val));
indication ->
'enc_IndicationPDU'(element(2,Val))
end
].


'dec_GCCPDU'(Bytes,_) ->
{Choice,Bytes1} = ?RT_PER:getchoice(Bytes,3, 0),
{Cname,{Val,NewBytes}} = case Choice of
0 -> {request,
'dec_RequestPDU'(Bytes1,telltype)};
1 -> {response,
'dec_ResponsePDU'(Bytes1,telltype)};
2 -> {indication,
'dec_IndicationPDU'(Bytes1,telltype)}
end,

{{Cname,Val},NewBytes}.

'enc_RequestPDU'({'RequestPDU',Val}) ->
'enc_RequestPDU'(Val);

'enc_RequestPDU'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[conferenceJoinRequest,conferenceAddRequest,conferenceLockRequest,conferenceUnlockRequest,conferenceTerminateRequest,conferenceEjectUserRequest,conferenceTransferRequest,registryRegisterChannelRequest,registryAssignTokenRequest,registrySetParameterRequest,registryRetrieveEntryRequest,registryDeleteEntryRequest,registryMonitorEntryRequest,registryAllocateHandleRequest,nonStandardRequest],[]}, {15,0}),
case element(1,Val) of
conferenceJoinRequest ->
'enc_ConferenceJoinRequest'(element(2,Val));
conferenceAddRequest ->
'enc_ConferenceAddRequest'(element(2,Val));
conferenceLockRequest ->
'enc_ConferenceLockRequest'(element(2,Val));
conferenceUnlockRequest ->
'enc_ConferenceUnlockRequest'(element(2,Val));
conferenceTerminateRequest ->
'enc_ConferenceTerminateRequest'(element(2,Val));
conferenceEjectUserRequest ->
'enc_ConferenceEjectUserRequest'(element(2,Val));
conferenceTransferRequest ->
'enc_ConferenceTransferRequest'(element(2,Val));
registryRegisterChannelRequest ->
'enc_RegistryRegisterChannelRequest'(element(2,Val));
registryAssignTokenRequest ->
'enc_RegistryAssignTokenRequest'(element(2,Val));
registrySetParameterRequest ->
'enc_RegistrySetParameterRequest'(element(2,Val));
registryRetrieveEntryRequest ->
'enc_RegistryRetrieveEntryRequest'(element(2,Val));
registryDeleteEntryRequest ->
'enc_RegistryDeleteEntryRequest'(element(2,Val));
registryMonitorEntryRequest ->
'enc_RegistryMonitorEntryRequest'(element(2,Val));
registryAllocateHandleRequest ->
'enc_RegistryAllocateHandleRequest'(element(2,Val));
nonStandardRequest ->
'enc_NonStandardPDU'(element(2,Val))
end
].


'dec_RequestPDU'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,15,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*15 of
0 -> {conferenceJoinRequest,
'dec_ConferenceJoinRequest'(Bytes2,telltype)};
1 -> {conferenceAddRequest,
'dec_ConferenceAddRequest'(Bytes2,telltype)};
2 -> {conferenceLockRequest,
'dec_ConferenceLockRequest'(Bytes2,telltype)};
3 -> {conferenceUnlockRequest,
'dec_ConferenceUnlockRequest'(Bytes2,telltype)};
4 -> {conferenceTerminateRequest,
'dec_ConferenceTerminateRequest'(Bytes2,telltype)};
5 -> {conferenceEjectUserRequest,
'dec_ConferenceEjectUserRequest'(Bytes2,telltype)};
6 -> {conferenceTransferRequest,
'dec_ConferenceTransferRequest'(Bytes2,telltype)};
7 -> {registryRegisterChannelRequest,
'dec_RegistryRegisterChannelRequest'(Bytes2,telltype)};
8 -> {registryAssignTokenRequest,
'dec_RegistryAssignTokenRequest'(Bytes2,telltype)};
9 -> {registrySetParameterRequest,
'dec_RegistrySetParameterRequest'(Bytes2,telltype)};
10 -> {registryRetrieveEntryRequest,
'dec_RegistryRetrieveEntryRequest'(Bytes2,telltype)};
11 -> {registryDeleteEntryRequest,
'dec_RegistryDeleteEntryRequest'(Bytes2,telltype)};
12 -> {registryMonitorEntryRequest,
'dec_RegistryMonitorEntryRequest'(Bytes2,telltype)};
13 -> {registryAllocateHandleRequest,
'dec_RegistryAllocateHandleRequest'(Bytes2,telltype)};
14 -> {nonStandardRequest,
'dec_NonStandardPDU'(Bytes2,telltype)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.

'enc_ResponsePDU'({'ResponsePDU',Val}) ->
'enc_ResponsePDU'(Val);

'enc_ResponsePDU'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[conferenceJoinResponse,conferenceAddResponse,conferenceLockResponse,conferenceUnlockResponse,conferenceTerminateResponse,conferenceEjectUserResponse,conferenceTransferResponse,registryResponse,registryAllocateHandleResponse,functionNotSupportedResponse,nonStandardResponse],[]}, {11,0}),
case element(1,Val) of
conferenceJoinResponse ->
'enc_ConferenceJoinResponse'(element(2,Val));
conferenceAddResponse ->
'enc_ConferenceAddResponse'(element(2,Val));
conferenceLockResponse ->
'enc_ConferenceLockResponse'(element(2,Val));
conferenceUnlockResponse ->
'enc_ConferenceUnlockResponse'(element(2,Val));
conferenceTerminateResponse ->
'enc_ConferenceTerminateResponse'(element(2,Val));
conferenceEjectUserResponse ->
'enc_ConferenceEjectUserResponse'(element(2,Val));
conferenceTransferResponse ->
'enc_ConferenceTransferResponse'(element(2,Val));
registryResponse ->
'enc_RegistryResponse'(element(2,Val));
registryAllocateHandleResponse ->
'enc_RegistryAllocateHandleResponse'(element(2,Val));
functionNotSupportedResponse ->
'enc_FunctionNotSupportedResponse'(element(2,Val));
nonStandardResponse ->
'enc_NonStandardPDU'(element(2,Val))
end
].


'dec_ResponsePDU'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,11,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*11 of
0 -> {conferenceJoinResponse,
'dec_ConferenceJoinResponse'(Bytes2,telltype)};
1 -> {conferenceAddResponse,
'dec_ConferenceAddResponse'(Bytes2,telltype)};
2 -> {conferenceLockResponse,
'dec_ConferenceLockResponse'(Bytes2,telltype)};
3 -> {conferenceUnlockResponse,
'dec_ConferenceUnlockResponse'(Bytes2,telltype)};
4 -> {conferenceTerminateResponse,
'dec_ConferenceTerminateResponse'(Bytes2,telltype)};
5 -> {conferenceEjectUserResponse,
'dec_ConferenceEjectUserResponse'(Bytes2,telltype)};
6 -> {conferenceTransferResponse,
'dec_ConferenceTransferResponse'(Bytes2,telltype)};
7 -> {registryResponse,
'dec_RegistryResponse'(Bytes2,telltype)};
8 -> {registryAllocateHandleResponse,
'dec_RegistryAllocateHandleResponse'(Bytes2,telltype)};
9 -> {functionNotSupportedResponse,
'dec_FunctionNotSupportedResponse'(Bytes2,telltype)};
10 -> {nonStandardResponse,
'dec_NonStandardPDU'(Bytes2,telltype)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.

'enc_IndicationPDU'({'IndicationPDU',Val}) ->
'enc_IndicationPDU'(Val);

'enc_IndicationPDU'(Val) ->
[
?RT_PER:set_choice(element(1,Val),{[userIDIndication,conferenceLockIndication,conferenceUnlockIndication,conferenceTerminateIndication,conferenceEjectUserIndication,conferenceTransferIndication,rosterUpdateIndication,applicationInvokeIndication,registryMonitorEntryIndication,conductorAssignIndication,conductorReleaseIndication,conductorPermissionAskIndication,conductorPermissionGrantIndication,conferenceTimeRemainingIndication,conferenceTimeInquireIndication,conferenceTimeExtendIndication,conferenceAssistanceIndication,textMessageIndication,nonStandardIndication],[]}, {19,0}),
case element(1,Val) of
userIDIndication ->
'enc_UserIDIndication'(element(2,Val));
conferenceLockIndication ->
'enc_ConferenceLockIndication'(element(2,Val));
conferenceUnlockIndication ->
'enc_ConferenceUnlockIndication'(element(2,Val));
conferenceTerminateIndication ->
'enc_ConferenceTerminateIndication'(element(2,Val));
conferenceEjectUserIndication ->
'enc_ConferenceEjectUserIndication'(element(2,Val));
conferenceTransferIndication ->
'enc_ConferenceTransferIndication'(element(2,Val));
rosterUpdateIndication ->
'enc_RosterUpdateIndication'(element(2,Val));
applicationInvokeIndication ->
'enc_ApplicationInvokeIndication'(element(2,Val));
registryMonitorEntryIndication ->
'enc_RegistryMonitorEntryIndication'(element(2,Val));
conductorAssignIndication ->
'enc_ConductorAssignIndication'(element(2,Val));
conductorReleaseIndication ->
'enc_ConductorReleaseIndication'(element(2,Val));
conductorPermissionAskIndication ->
'enc_ConductorPermissionAskIndication'(element(2,Val));
conductorPermissionGrantIndication ->
'enc_ConductorPermissionGrantIndication'(element(2,Val));
conferenceTimeRemainingIndication ->
'enc_ConferenceTimeRemainingIndication'(element(2,Val));
conferenceTimeInquireIndication ->
'enc_ConferenceTimeInquireIndication'(element(2,Val));
conferenceTimeExtendIndication ->
'enc_ConferenceTimeExtendIndication'(element(2,Val));
conferenceAssistanceIndication ->
'enc_ConferenceAssistanceIndication'(element(2,Val));
textMessageIndication ->
'enc_TextMessageIndication'(element(2,Val));
nonStandardIndication ->
'enc_NonStandardPDU'(element(2,Val))
end
].


'dec_IndicationPDU'(Bytes,_) ->
{Ext,Bytes1} = ?RT_PER:getbit(Bytes),
{Choice,Bytes2} = ?RT_PER:getchoice(Bytes1,19,Ext ),
{Cname,{Val,NewBytes}} = case Choice + Ext*19 of
0 -> {userIDIndication,
'dec_UserIDIndication'(Bytes2,telltype)};
1 -> {conferenceLockIndication,
'dec_ConferenceLockIndication'(Bytes2,telltype)};
2 -> {conferenceUnlockIndication,
'dec_ConferenceUnlockIndication'(Bytes2,telltype)};
3 -> {conferenceTerminateIndication,
'dec_ConferenceTerminateIndication'(Bytes2,telltype)};
4 -> {conferenceEjectUserIndication,
'dec_ConferenceEjectUserIndication'(Bytes2,telltype)};
5 -> {conferenceTransferIndication,
'dec_ConferenceTransferIndication'(Bytes2,telltype)};
6 -> {rosterUpdateIndication,
'dec_RosterUpdateIndication'(Bytes2,telltype)};
7 -> {applicationInvokeIndication,
'dec_ApplicationInvokeIndication'(Bytes2,telltype)};
8 -> {registryMonitorEntryIndication,
'dec_RegistryMonitorEntryIndication'(Bytes2,telltype)};
9 -> {conductorAssignIndication,
'dec_ConductorAssignIndication'(Bytes2,telltype)};
10 -> {conductorReleaseIndication,
'dec_ConductorReleaseIndication'(Bytes2,telltype)};
11 -> {conductorPermissionAskIndication,
'dec_ConductorPermissionAskIndication'(Bytes2,telltype)};
12 -> {conductorPermissionGrantIndication,
'dec_ConductorPermissionGrantIndication'(Bytes2,telltype)};
13 -> {conferenceTimeRemainingIndication,
'dec_ConferenceTimeRemainingIndication'(Bytes2,telltype)};
14 -> {conferenceTimeInquireIndication,
'dec_ConferenceTimeInquireIndication'(Bytes2,telltype)};
15 -> {conferenceTimeExtendIndication,
'dec_ConferenceTimeExtendIndication'(Bytes2,telltype)};
16 -> {conferenceAssistanceIndication,
'dec_ConferenceAssistanceIndication'(Bytes2,telltype)};
17 -> {textMessageIndication,
'dec_TextMessageIndication'(Bytes2,telltype)};
18 -> {nonStandardIndication,
'dec_NonStandardPDU'(Bytes2,telltype)};
_ -> {asn1_ExtAlt, ?RT_PER:decode_open_type(Bytes2,[])}
end,

{{Cname,Val},NewBytes}.
