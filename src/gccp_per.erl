%% Generated by the Erlang ASN.1 PER-compiler version, utilizing bit-syntax:2.0.4
%% Purpose: encoder and decoder to the types in mod GCC-PROTOCOL

-module('gccp_per').
-compile(nowarn_unused_vars).
-include("gccp.hrl").
-asn1_info([{vsn,'2.0.4'},
            {module,'GCC-PROTOCOL'},
            {options,[per,undec_rest,{i,"."}]}]).

-export([encoding_rule/0,bit_string_format/0]).
-export([
'enc_ChannelID'/1,
'enc_StaticChannelID'/1,
'enc_DynamicChannelID'/1,
'enc_UserID'/1,
'enc_TokenID'/1,
'enc_StaticTokenID'/1,
'enc_DynamicTokenID'/1,
'enc_Time'/1,
'enc_Handle'/1,
'enc_H221NonStandardIdentifier'/1,
'enc_Key'/1,
'enc_NonStandardParameter'/1,
'enc_TextString'/1,
'enc_SimpleTextString'/1,
'enc_SimpleNumericString'/1,
'enc_DiallingString'/1,
'enc_SubAddressString'/1,
'enc_ExtraDiallingString'/1,
'enc_UserData'/1,
'enc_Password'/1,
'enc_PasswordSelector'/1,
'enc_ChallengeResponseItem'/1,
'enc_ChallengeResponseAlgorithm'/1,
'enc_ChallengeItem'/1,
'enc_ChallengeRequest'/1,
'enc_ChallengeResponse'/1,
'enc_PasswordChallengeRequestResponse'/1,
'enc_ConferenceName'/1,
'enc_ConferenceNameSelector'/1,
'enc_ConferenceNameModifier'/1,
'enc_Privilege'/1,
'enc_TerminationMethod'/1,
'enc_ConferencePriorityScheme'/1,
'enc_ConferencePriority'/1,
'enc_NodeCategory'/1,
'enc_ConferenceMode'/1,
'enc_NetworkAddress'/1,
'enc_MediaList'/1,
'enc_ChannelAggregationMethod'/1,
'enc_Profile'/1,
'enc_ExtendedE164NetworkAddress'/1,
'enc_TransportAddress'/1,
'enc_GSTNConnection'/1,
'enc_ISDNConnection'/1,
'enc_CSDNConnection'/1,
'enc_PSDNConnection'/1,
'enc_ATMConnection'/1,
'enc_NetworkConnection'/1,
'enc_NetworkAddressV2'/1,
'enc_NodeType'/1,
'enc_NodeProperties'/1,
'enc_AsymmetryIndicator'/1,
'enc_AlternativeNodeID'/1,
'enc_ConferenceDescriptor'/1,
'enc_NodeRecord'/1,
'enc_SessionKey'/1,
'enc_ChannelType'/1,
'enc_ApplicationRecord'/1,
'enc_CapabilityID'/1,
'enc_CapabilityClass'/1,
'enc_EntityID'/1,
'enc_ApplicationInvokeSpecifier'/1,
'enc_RegistryKey'/1,
'enc_RegistryItem'/1,
'enc_RegistryEntryOwner'/1,
'enc_RegistryModificationRights'/1,
'enc_UserIDIndication'/1,
'enc_ConferenceCreateRequest'/1,
'enc_ConferenceCreateResponse'/1,
'enc_ConferenceQueryRequest'/1,
'enc_ConferenceQueryResponse'/1,
'enc_ConferenceJoinRequest'/1,
'enc_ConferenceJoinResponse'/1,
'enc_ConferenceInviteRequest'/1,
'enc_ConferenceInviteResponse'/1,
'enc_ConferenceAddRequest'/1,
'enc_ConferenceAddResponse'/1,
'enc_ConferenceLockRequest'/1,
'enc_ConferenceLockResponse'/1,
'enc_ConferenceLockIndication'/1,
'enc_ConferenceUnlockRequest'/1,
'enc_ConferenceUnlockResponse'/1,
'enc_ConferenceUnlockIndication'/1,
'enc_ConferenceTerminateRequest'/1,
'enc_ConferenceTerminateResponse'/1,
'enc_ConferenceTerminateIndication'/1,
'enc_ConferenceEjectUserRequest'/1,
'enc_ConferenceEjectUserResponse'/1,
'enc_ConferenceEjectUserIndication'/1,
'enc_ConferenceTransferRequest'/1,
'enc_ConferenceTransferResponse'/1,
'enc_ConferenceTransferIndication'/1,
'enc_RosterUpdateIndication'/1,
'enc_ApplicationInvokeIndication'/1,
'enc_RegistryRegisterChannelRequest'/1,
'enc_RegistryAssignTokenRequest'/1,
'enc_RegistrySetParameterRequest'/1,
'enc_RegistryRetrieveEntryRequest'/1,
'enc_RegistryDeleteEntryRequest'/1,
'enc_RegistryMonitorEntryRequest'/1,
'enc_RegistryMonitorEntryIndication'/1,
'enc_RegistryAllocateHandleRequest'/1,
'enc_RegistryAllocateHandleResponse'/1,
'enc_RegistryResponse'/1,
'enc_ConductorAssignIndication'/1,
'enc_ConductorReleaseIndication'/1,
'enc_ConductorPermissionAskIndication'/1,
'enc_ConductorPermissionGrantIndication'/1,
'enc_ConferenceTimeRemainingIndication'/1,
'enc_ConferenceTimeInquireIndication'/1,
'enc_ConferenceTimeExtendIndication'/1,
'enc_ConferenceAssistanceIndication'/1,
'enc_TextMessageIndication'/1,
'enc_RosterRefreshRequest'/1,
'enc_FunctionNotSupportedResponse'/1,
'enc_NonStandardPDU'/1,
'enc_ConnectData'/1,
'enc_ConnectGCCPDU'/1,
'enc_GCCPDU'/1,
'enc_RequestPDU'/1,
'enc_ResponsePDU'/1,
'enc_IndicationPDU'/1
]).

-export([
'dec_ChannelID'/1,
'dec_StaticChannelID'/1,
'dec_DynamicChannelID'/1,
'dec_UserID'/1,
'dec_TokenID'/1,
'dec_StaticTokenID'/1,
'dec_DynamicTokenID'/1,
'dec_Time'/1,
'dec_Handle'/1,
'dec_H221NonStandardIdentifier'/1,
'dec_Key'/1,
'dec_NonStandardParameter'/1,
'dec_TextString'/1,
'dec_SimpleTextString'/1,
'dec_SimpleNumericString'/1,
'dec_DiallingString'/1,
'dec_SubAddressString'/1,
'dec_ExtraDiallingString'/1,
'dec_UserData'/1,
'dec_Password'/1,
'dec_PasswordSelector'/1,
'dec_ChallengeResponseItem'/1,
'dec_ChallengeResponseAlgorithm'/1,
'dec_ChallengeItem'/1,
'dec_ChallengeRequest'/1,
'dec_ChallengeResponse'/1,
'dec_PasswordChallengeRequestResponse'/1,
'dec_ConferenceName'/1,
'dec_ConferenceNameSelector'/1,
'dec_ConferenceNameModifier'/1,
'dec_Privilege'/1,
'dec_TerminationMethod'/1,
'dec_ConferencePriorityScheme'/1,
'dec_ConferencePriority'/1,
'dec_NodeCategory'/1,
'dec_ConferenceMode'/1,
'dec_NetworkAddress'/1,
'dec_MediaList'/1,
'dec_ChannelAggregationMethod'/1,
'dec_Profile'/1,
'dec_ExtendedE164NetworkAddress'/1,
'dec_TransportAddress'/1,
'dec_GSTNConnection'/1,
'dec_ISDNConnection'/1,
'dec_CSDNConnection'/1,
'dec_PSDNConnection'/1,
'dec_ATMConnection'/1,
'dec_NetworkConnection'/1,
'dec_NetworkAddressV2'/1,
'dec_NodeType'/1,
'dec_NodeProperties'/1,
'dec_AsymmetryIndicator'/1,
'dec_AlternativeNodeID'/1,
'dec_ConferenceDescriptor'/1,
'dec_NodeRecord'/1,
'dec_SessionKey'/1,
'dec_ChannelType'/1,
'dec_ApplicationRecord'/1,
'dec_CapabilityID'/1,
'dec_CapabilityClass'/1,
'dec_EntityID'/1,
'dec_ApplicationInvokeSpecifier'/1,
'dec_RegistryKey'/1,
'dec_RegistryItem'/1,
'dec_RegistryEntryOwner'/1,
'dec_RegistryModificationRights'/1,
'dec_UserIDIndication'/1,
'dec_ConferenceCreateRequest'/1,
'dec_ConferenceCreateResponse'/1,
'dec_ConferenceQueryRequest'/1,
'dec_ConferenceQueryResponse'/1,
'dec_ConferenceJoinRequest'/1,
'dec_ConferenceJoinResponse'/1,
'dec_ConferenceInviteRequest'/1,
'dec_ConferenceInviteResponse'/1,
'dec_ConferenceAddRequest'/1,
'dec_ConferenceAddResponse'/1,
'dec_ConferenceLockRequest'/1,
'dec_ConferenceLockResponse'/1,
'dec_ConferenceLockIndication'/1,
'dec_ConferenceUnlockRequest'/1,
'dec_ConferenceUnlockResponse'/1,
'dec_ConferenceUnlockIndication'/1,
'dec_ConferenceTerminateRequest'/1,
'dec_ConferenceTerminateResponse'/1,
'dec_ConferenceTerminateIndication'/1,
'dec_ConferenceEjectUserRequest'/1,
'dec_ConferenceEjectUserResponse'/1,
'dec_ConferenceEjectUserIndication'/1,
'dec_ConferenceTransferRequest'/1,
'dec_ConferenceTransferResponse'/1,
'dec_ConferenceTransferIndication'/1,
'dec_RosterUpdateIndication'/1,
'dec_ApplicationInvokeIndication'/1,
'dec_RegistryRegisterChannelRequest'/1,
'dec_RegistryAssignTokenRequest'/1,
'dec_RegistrySetParameterRequest'/1,
'dec_RegistryRetrieveEntryRequest'/1,
'dec_RegistryDeleteEntryRequest'/1,
'dec_RegistryMonitorEntryRequest'/1,
'dec_RegistryMonitorEntryIndication'/1,
'dec_RegistryAllocateHandleRequest'/1,
'dec_RegistryAllocateHandleResponse'/1,
'dec_RegistryResponse'/1,
'dec_ConductorAssignIndication'/1,
'dec_ConductorReleaseIndication'/1,
'dec_ConductorPermissionAskIndication'/1,
'dec_ConductorPermissionGrantIndication'/1,
'dec_ConferenceTimeRemainingIndication'/1,
'dec_ConferenceTimeInquireIndication'/1,
'dec_ConferenceTimeExtendIndication'/1,
'dec_ConferenceAssistanceIndication'/1,
'dec_TextMessageIndication'/1,
'dec_RosterRefreshRequest'/1,
'dec_FunctionNotSupportedResponse'/1,
'dec_NonStandardPDU'/1,
'dec_ConnectData'/1,
'dec_ConnectGCCPDU'/1,
'dec_GCCPDU'/1,
'dec_RequestPDU'/1,
'dec_ResponsePDU'/1,
'dec_IndicationPDU'/1
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> per.

bit_string_format() -> bitstring.

encode(Type, Data) ->
try complete(encode_disp(Type, Data)) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          {error,{Reason,erlang:get_stacktrace()}};
        Reason ->
         {error,{asn1,Reason, erlang:get_stacktrace()}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, Data) of
  {Result,Rest} ->
    {ok,Result,Rest}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          {error,{Reason,erlang:get_stacktrace()}};
        Reason ->
         {error,{asn1,Reason, erlang:get_stacktrace()}}
      end
end.

encode_disp('ChannelID',Data) -> 'enc_ChannelID'(Data);
encode_disp('StaticChannelID',Data) -> 'enc_StaticChannelID'(Data);
encode_disp('DynamicChannelID',Data) -> 'enc_DynamicChannelID'(Data);
encode_disp('UserID',Data) -> 'enc_UserID'(Data);
encode_disp('TokenID',Data) -> 'enc_TokenID'(Data);
encode_disp('StaticTokenID',Data) -> 'enc_StaticTokenID'(Data);
encode_disp('DynamicTokenID',Data) -> 'enc_DynamicTokenID'(Data);
encode_disp('Time',Data) -> 'enc_Time'(Data);
encode_disp('Handle',Data) -> 'enc_Handle'(Data);
encode_disp('H221NonStandardIdentifier',Data) -> 'enc_H221NonStandardIdentifier'(Data);
encode_disp('Key',Data) -> 'enc_Key'(Data);
encode_disp('NonStandardParameter',Data) -> 'enc_NonStandardParameter'(Data);
encode_disp('TextString',Data) -> 'enc_TextString'(Data);
encode_disp('SimpleTextString',Data) -> 'enc_SimpleTextString'(Data);
encode_disp('SimpleNumericString',Data) -> 'enc_SimpleNumericString'(Data);
encode_disp('DiallingString',Data) -> 'enc_DiallingString'(Data);
encode_disp('SubAddressString',Data) -> 'enc_SubAddressString'(Data);
encode_disp('ExtraDiallingString',Data) -> 'enc_ExtraDiallingString'(Data);
encode_disp('UserData',Data) -> 'enc_UserData'(Data);
encode_disp('Password',Data) -> 'enc_Password'(Data);
encode_disp('PasswordSelector',Data) -> 'enc_PasswordSelector'(Data);
encode_disp('ChallengeResponseItem',Data) -> 'enc_ChallengeResponseItem'(Data);
encode_disp('ChallengeResponseAlgorithm',Data) -> 'enc_ChallengeResponseAlgorithm'(Data);
encode_disp('ChallengeItem',Data) -> 'enc_ChallengeItem'(Data);
encode_disp('ChallengeRequest',Data) -> 'enc_ChallengeRequest'(Data);
encode_disp('ChallengeResponse',Data) -> 'enc_ChallengeResponse'(Data);
encode_disp('PasswordChallengeRequestResponse',Data) -> 'enc_PasswordChallengeRequestResponse'(Data);
encode_disp('ConferenceName',Data) -> 'enc_ConferenceName'(Data);
encode_disp('ConferenceNameSelector',Data) -> 'enc_ConferenceNameSelector'(Data);
encode_disp('ConferenceNameModifier',Data) -> 'enc_ConferenceNameModifier'(Data);
encode_disp('Privilege',Data) -> 'enc_Privilege'(Data);
encode_disp('TerminationMethod',Data) -> 'enc_TerminationMethod'(Data);
encode_disp('ConferencePriorityScheme',Data) -> 'enc_ConferencePriorityScheme'(Data);
encode_disp('ConferencePriority',Data) -> 'enc_ConferencePriority'(Data);
encode_disp('NodeCategory',Data) -> 'enc_NodeCategory'(Data);
encode_disp('ConferenceMode',Data) -> 'enc_ConferenceMode'(Data);
encode_disp('NetworkAddress',Data) -> 'enc_NetworkAddress'(Data);
encode_disp('MediaList',Data) -> 'enc_MediaList'(Data);
encode_disp('ChannelAggregationMethod',Data) -> 'enc_ChannelAggregationMethod'(Data);
encode_disp('Profile',Data) -> 'enc_Profile'(Data);
encode_disp('ExtendedE164NetworkAddress',Data) -> 'enc_ExtendedE164NetworkAddress'(Data);
encode_disp('TransportAddress',Data) -> 'enc_TransportAddress'(Data);
encode_disp('GSTNConnection',Data) -> 'enc_GSTNConnection'(Data);
encode_disp('ISDNConnection',Data) -> 'enc_ISDNConnection'(Data);
encode_disp('CSDNConnection',Data) -> 'enc_CSDNConnection'(Data);
encode_disp('PSDNConnection',Data) -> 'enc_PSDNConnection'(Data);
encode_disp('ATMConnection',Data) -> 'enc_ATMConnection'(Data);
encode_disp('NetworkConnection',Data) -> 'enc_NetworkConnection'(Data);
encode_disp('NetworkAddressV2',Data) -> 'enc_NetworkAddressV2'(Data);
encode_disp('NodeType',Data) -> 'enc_NodeType'(Data);
encode_disp('NodeProperties',Data) -> 'enc_NodeProperties'(Data);
encode_disp('AsymmetryIndicator',Data) -> 'enc_AsymmetryIndicator'(Data);
encode_disp('AlternativeNodeID',Data) -> 'enc_AlternativeNodeID'(Data);
encode_disp('ConferenceDescriptor',Data) -> 'enc_ConferenceDescriptor'(Data);
encode_disp('NodeRecord',Data) -> 'enc_NodeRecord'(Data);
encode_disp('SessionKey',Data) -> 'enc_SessionKey'(Data);
encode_disp('ChannelType',Data) -> 'enc_ChannelType'(Data);
encode_disp('ApplicationRecord',Data) -> 'enc_ApplicationRecord'(Data);
encode_disp('CapabilityID',Data) -> 'enc_CapabilityID'(Data);
encode_disp('CapabilityClass',Data) -> 'enc_CapabilityClass'(Data);
encode_disp('EntityID',Data) -> 'enc_EntityID'(Data);
encode_disp('ApplicationInvokeSpecifier',Data) -> 'enc_ApplicationInvokeSpecifier'(Data);
encode_disp('RegistryKey',Data) -> 'enc_RegistryKey'(Data);
encode_disp('RegistryItem',Data) -> 'enc_RegistryItem'(Data);
encode_disp('RegistryEntryOwner',Data) -> 'enc_RegistryEntryOwner'(Data);
encode_disp('RegistryModificationRights',Data) -> 'enc_RegistryModificationRights'(Data);
encode_disp('UserIDIndication',Data) -> 'enc_UserIDIndication'(Data);
encode_disp('ConferenceCreateRequest',Data) -> 'enc_ConferenceCreateRequest'(Data);
encode_disp('ConferenceCreateResponse',Data) -> 'enc_ConferenceCreateResponse'(Data);
encode_disp('ConferenceQueryRequest',Data) -> 'enc_ConferenceQueryRequest'(Data);
encode_disp('ConferenceQueryResponse',Data) -> 'enc_ConferenceQueryResponse'(Data);
encode_disp('ConferenceJoinRequest',Data) -> 'enc_ConferenceJoinRequest'(Data);
encode_disp('ConferenceJoinResponse',Data) -> 'enc_ConferenceJoinResponse'(Data);
encode_disp('ConferenceInviteRequest',Data) -> 'enc_ConferenceInviteRequest'(Data);
encode_disp('ConferenceInviteResponse',Data) -> 'enc_ConferenceInviteResponse'(Data);
encode_disp('ConferenceAddRequest',Data) -> 'enc_ConferenceAddRequest'(Data);
encode_disp('ConferenceAddResponse',Data) -> 'enc_ConferenceAddResponse'(Data);
encode_disp('ConferenceLockRequest',Data) -> 'enc_ConferenceLockRequest'(Data);
encode_disp('ConferenceLockResponse',Data) -> 'enc_ConferenceLockResponse'(Data);
encode_disp('ConferenceLockIndication',Data) -> 'enc_ConferenceLockIndication'(Data);
encode_disp('ConferenceUnlockRequest',Data) -> 'enc_ConferenceUnlockRequest'(Data);
encode_disp('ConferenceUnlockResponse',Data) -> 'enc_ConferenceUnlockResponse'(Data);
encode_disp('ConferenceUnlockIndication',Data) -> 'enc_ConferenceUnlockIndication'(Data);
encode_disp('ConferenceTerminateRequest',Data) -> 'enc_ConferenceTerminateRequest'(Data);
encode_disp('ConferenceTerminateResponse',Data) -> 'enc_ConferenceTerminateResponse'(Data);
encode_disp('ConferenceTerminateIndication',Data) -> 'enc_ConferenceTerminateIndication'(Data);
encode_disp('ConferenceEjectUserRequest',Data) -> 'enc_ConferenceEjectUserRequest'(Data);
encode_disp('ConferenceEjectUserResponse',Data) -> 'enc_ConferenceEjectUserResponse'(Data);
encode_disp('ConferenceEjectUserIndication',Data) -> 'enc_ConferenceEjectUserIndication'(Data);
encode_disp('ConferenceTransferRequest',Data) -> 'enc_ConferenceTransferRequest'(Data);
encode_disp('ConferenceTransferResponse',Data) -> 'enc_ConferenceTransferResponse'(Data);
encode_disp('ConferenceTransferIndication',Data) -> 'enc_ConferenceTransferIndication'(Data);
encode_disp('RosterUpdateIndication',Data) -> 'enc_RosterUpdateIndication'(Data);
encode_disp('ApplicationInvokeIndication',Data) -> 'enc_ApplicationInvokeIndication'(Data);
encode_disp('RegistryRegisterChannelRequest',Data) -> 'enc_RegistryRegisterChannelRequest'(Data);
encode_disp('RegistryAssignTokenRequest',Data) -> 'enc_RegistryAssignTokenRequest'(Data);
encode_disp('RegistrySetParameterRequest',Data) -> 'enc_RegistrySetParameterRequest'(Data);
encode_disp('RegistryRetrieveEntryRequest',Data) -> 'enc_RegistryRetrieveEntryRequest'(Data);
encode_disp('RegistryDeleteEntryRequest',Data) -> 'enc_RegistryDeleteEntryRequest'(Data);
encode_disp('RegistryMonitorEntryRequest',Data) -> 'enc_RegistryMonitorEntryRequest'(Data);
encode_disp('RegistryMonitorEntryIndication',Data) -> 'enc_RegistryMonitorEntryIndication'(Data);
encode_disp('RegistryAllocateHandleRequest',Data) -> 'enc_RegistryAllocateHandleRequest'(Data);
encode_disp('RegistryAllocateHandleResponse',Data) -> 'enc_RegistryAllocateHandleResponse'(Data);
encode_disp('RegistryResponse',Data) -> 'enc_RegistryResponse'(Data);
encode_disp('ConductorAssignIndication',Data) -> 'enc_ConductorAssignIndication'(Data);
encode_disp('ConductorReleaseIndication',Data) -> 'enc_ConductorReleaseIndication'(Data);
encode_disp('ConductorPermissionAskIndication',Data) -> 'enc_ConductorPermissionAskIndication'(Data);
encode_disp('ConductorPermissionGrantIndication',Data) -> 'enc_ConductorPermissionGrantIndication'(Data);
encode_disp('ConferenceTimeRemainingIndication',Data) -> 'enc_ConferenceTimeRemainingIndication'(Data);
encode_disp('ConferenceTimeInquireIndication',Data) -> 'enc_ConferenceTimeInquireIndication'(Data);
encode_disp('ConferenceTimeExtendIndication',Data) -> 'enc_ConferenceTimeExtendIndication'(Data);
encode_disp('ConferenceAssistanceIndication',Data) -> 'enc_ConferenceAssistanceIndication'(Data);
encode_disp('TextMessageIndication',Data) -> 'enc_TextMessageIndication'(Data);
encode_disp('RosterRefreshRequest',Data) -> 'enc_RosterRefreshRequest'(Data);
encode_disp('FunctionNotSupportedResponse',Data) -> 'enc_FunctionNotSupportedResponse'(Data);
encode_disp('NonStandardPDU',Data) -> 'enc_NonStandardPDU'(Data);
encode_disp('ConnectData',Data) -> 'enc_ConnectData'(Data);
encode_disp('ConnectGCCPDU',Data) -> 'enc_ConnectGCCPDU'(Data);
encode_disp('GCCPDU',Data) -> 'enc_GCCPDU'(Data);
encode_disp('RequestPDU',Data) -> 'enc_RequestPDU'(Data);
encode_disp('ResponsePDU',Data) -> 'enc_ResponsePDU'(Data);
encode_disp('IndicationPDU',Data) -> 'enc_IndicationPDU'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('ChannelID',Data) -> 'dec_ChannelID'(Data);
decode_disp('StaticChannelID',Data) -> 'dec_StaticChannelID'(Data);
decode_disp('DynamicChannelID',Data) -> 'dec_DynamicChannelID'(Data);
decode_disp('UserID',Data) -> 'dec_UserID'(Data);
decode_disp('TokenID',Data) -> 'dec_TokenID'(Data);
decode_disp('StaticTokenID',Data) -> 'dec_StaticTokenID'(Data);
decode_disp('DynamicTokenID',Data) -> 'dec_DynamicTokenID'(Data);
decode_disp('Time',Data) -> 'dec_Time'(Data);
decode_disp('Handle',Data) -> 'dec_Handle'(Data);
decode_disp('H221NonStandardIdentifier',Data) -> 'dec_H221NonStandardIdentifier'(Data);
decode_disp('Key',Data) -> 'dec_Key'(Data);
decode_disp('NonStandardParameter',Data) -> 'dec_NonStandardParameter'(Data);
decode_disp('TextString',Data) -> 'dec_TextString'(Data);
decode_disp('SimpleTextString',Data) -> 'dec_SimpleTextString'(Data);
decode_disp('SimpleNumericString',Data) -> 'dec_SimpleNumericString'(Data);
decode_disp('DiallingString',Data) -> 'dec_DiallingString'(Data);
decode_disp('SubAddressString',Data) -> 'dec_SubAddressString'(Data);
decode_disp('ExtraDiallingString',Data) -> 'dec_ExtraDiallingString'(Data);
decode_disp('UserData',Data) -> 'dec_UserData'(Data);
decode_disp('Password',Data) -> 'dec_Password'(Data);
decode_disp('PasswordSelector',Data) -> 'dec_PasswordSelector'(Data);
decode_disp('ChallengeResponseItem',Data) -> 'dec_ChallengeResponseItem'(Data);
decode_disp('ChallengeResponseAlgorithm',Data) -> 'dec_ChallengeResponseAlgorithm'(Data);
decode_disp('ChallengeItem',Data) -> 'dec_ChallengeItem'(Data);
decode_disp('ChallengeRequest',Data) -> 'dec_ChallengeRequest'(Data);
decode_disp('ChallengeResponse',Data) -> 'dec_ChallengeResponse'(Data);
decode_disp('PasswordChallengeRequestResponse',Data) -> 'dec_PasswordChallengeRequestResponse'(Data);
decode_disp('ConferenceName',Data) -> 'dec_ConferenceName'(Data);
decode_disp('ConferenceNameSelector',Data) -> 'dec_ConferenceNameSelector'(Data);
decode_disp('ConferenceNameModifier',Data) -> 'dec_ConferenceNameModifier'(Data);
decode_disp('Privilege',Data) -> 'dec_Privilege'(Data);
decode_disp('TerminationMethod',Data) -> 'dec_TerminationMethod'(Data);
decode_disp('ConferencePriorityScheme',Data) -> 'dec_ConferencePriorityScheme'(Data);
decode_disp('ConferencePriority',Data) -> 'dec_ConferencePriority'(Data);
decode_disp('NodeCategory',Data) -> 'dec_NodeCategory'(Data);
decode_disp('ConferenceMode',Data) -> 'dec_ConferenceMode'(Data);
decode_disp('NetworkAddress',Data) -> 'dec_NetworkAddress'(Data);
decode_disp('MediaList',Data) -> 'dec_MediaList'(Data);
decode_disp('ChannelAggregationMethod',Data) -> 'dec_ChannelAggregationMethod'(Data);
decode_disp('Profile',Data) -> 'dec_Profile'(Data);
decode_disp('ExtendedE164NetworkAddress',Data) -> 'dec_ExtendedE164NetworkAddress'(Data);
decode_disp('TransportAddress',Data) -> 'dec_TransportAddress'(Data);
decode_disp('GSTNConnection',Data) -> 'dec_GSTNConnection'(Data);
decode_disp('ISDNConnection',Data) -> 'dec_ISDNConnection'(Data);
decode_disp('CSDNConnection',Data) -> 'dec_CSDNConnection'(Data);
decode_disp('PSDNConnection',Data) -> 'dec_PSDNConnection'(Data);
decode_disp('ATMConnection',Data) -> 'dec_ATMConnection'(Data);
decode_disp('NetworkConnection',Data) -> 'dec_NetworkConnection'(Data);
decode_disp('NetworkAddressV2',Data) -> 'dec_NetworkAddressV2'(Data);
decode_disp('NodeType',Data) -> 'dec_NodeType'(Data);
decode_disp('NodeProperties',Data) -> 'dec_NodeProperties'(Data);
decode_disp('AsymmetryIndicator',Data) -> 'dec_AsymmetryIndicator'(Data);
decode_disp('AlternativeNodeID',Data) -> 'dec_AlternativeNodeID'(Data);
decode_disp('ConferenceDescriptor',Data) -> 'dec_ConferenceDescriptor'(Data);
decode_disp('NodeRecord',Data) -> 'dec_NodeRecord'(Data);
decode_disp('SessionKey',Data) -> 'dec_SessionKey'(Data);
decode_disp('ChannelType',Data) -> 'dec_ChannelType'(Data);
decode_disp('ApplicationRecord',Data) -> 'dec_ApplicationRecord'(Data);
decode_disp('CapabilityID',Data) -> 'dec_CapabilityID'(Data);
decode_disp('CapabilityClass',Data) -> 'dec_CapabilityClass'(Data);
decode_disp('EntityID',Data) -> 'dec_EntityID'(Data);
decode_disp('ApplicationInvokeSpecifier',Data) -> 'dec_ApplicationInvokeSpecifier'(Data);
decode_disp('RegistryKey',Data) -> 'dec_RegistryKey'(Data);
decode_disp('RegistryItem',Data) -> 'dec_RegistryItem'(Data);
decode_disp('RegistryEntryOwner',Data) -> 'dec_RegistryEntryOwner'(Data);
decode_disp('RegistryModificationRights',Data) -> 'dec_RegistryModificationRights'(Data);
decode_disp('UserIDIndication',Data) -> 'dec_UserIDIndication'(Data);
decode_disp('ConferenceCreateRequest',Data) -> 'dec_ConferenceCreateRequest'(Data);
decode_disp('ConferenceCreateResponse',Data) -> 'dec_ConferenceCreateResponse'(Data);
decode_disp('ConferenceQueryRequest',Data) -> 'dec_ConferenceQueryRequest'(Data);
decode_disp('ConferenceQueryResponse',Data) -> 'dec_ConferenceQueryResponse'(Data);
decode_disp('ConferenceJoinRequest',Data) -> 'dec_ConferenceJoinRequest'(Data);
decode_disp('ConferenceJoinResponse',Data) -> 'dec_ConferenceJoinResponse'(Data);
decode_disp('ConferenceInviteRequest',Data) -> 'dec_ConferenceInviteRequest'(Data);
decode_disp('ConferenceInviteResponse',Data) -> 'dec_ConferenceInviteResponse'(Data);
decode_disp('ConferenceAddRequest',Data) -> 'dec_ConferenceAddRequest'(Data);
decode_disp('ConferenceAddResponse',Data) -> 'dec_ConferenceAddResponse'(Data);
decode_disp('ConferenceLockRequest',Data) -> 'dec_ConferenceLockRequest'(Data);
decode_disp('ConferenceLockResponse',Data) -> 'dec_ConferenceLockResponse'(Data);
decode_disp('ConferenceLockIndication',Data) -> 'dec_ConferenceLockIndication'(Data);
decode_disp('ConferenceUnlockRequest',Data) -> 'dec_ConferenceUnlockRequest'(Data);
decode_disp('ConferenceUnlockResponse',Data) -> 'dec_ConferenceUnlockResponse'(Data);
decode_disp('ConferenceUnlockIndication',Data) -> 'dec_ConferenceUnlockIndication'(Data);
decode_disp('ConferenceTerminateRequest',Data) -> 'dec_ConferenceTerminateRequest'(Data);
decode_disp('ConferenceTerminateResponse',Data) -> 'dec_ConferenceTerminateResponse'(Data);
decode_disp('ConferenceTerminateIndication',Data) -> 'dec_ConferenceTerminateIndication'(Data);
decode_disp('ConferenceEjectUserRequest',Data) -> 'dec_ConferenceEjectUserRequest'(Data);
decode_disp('ConferenceEjectUserResponse',Data) -> 'dec_ConferenceEjectUserResponse'(Data);
decode_disp('ConferenceEjectUserIndication',Data) -> 'dec_ConferenceEjectUserIndication'(Data);
decode_disp('ConferenceTransferRequest',Data) -> 'dec_ConferenceTransferRequest'(Data);
decode_disp('ConferenceTransferResponse',Data) -> 'dec_ConferenceTransferResponse'(Data);
decode_disp('ConferenceTransferIndication',Data) -> 'dec_ConferenceTransferIndication'(Data);
decode_disp('RosterUpdateIndication',Data) -> 'dec_RosterUpdateIndication'(Data);
decode_disp('ApplicationInvokeIndication',Data) -> 'dec_ApplicationInvokeIndication'(Data);
decode_disp('RegistryRegisterChannelRequest',Data) -> 'dec_RegistryRegisterChannelRequest'(Data);
decode_disp('RegistryAssignTokenRequest',Data) -> 'dec_RegistryAssignTokenRequest'(Data);
decode_disp('RegistrySetParameterRequest',Data) -> 'dec_RegistrySetParameterRequest'(Data);
decode_disp('RegistryRetrieveEntryRequest',Data) -> 'dec_RegistryRetrieveEntryRequest'(Data);
decode_disp('RegistryDeleteEntryRequest',Data) -> 'dec_RegistryDeleteEntryRequest'(Data);
decode_disp('RegistryMonitorEntryRequest',Data) -> 'dec_RegistryMonitorEntryRequest'(Data);
decode_disp('RegistryMonitorEntryIndication',Data) -> 'dec_RegistryMonitorEntryIndication'(Data);
decode_disp('RegistryAllocateHandleRequest',Data) -> 'dec_RegistryAllocateHandleRequest'(Data);
decode_disp('RegistryAllocateHandleResponse',Data) -> 'dec_RegistryAllocateHandleResponse'(Data);
decode_disp('RegistryResponse',Data) -> 'dec_RegistryResponse'(Data);
decode_disp('ConductorAssignIndication',Data) -> 'dec_ConductorAssignIndication'(Data);
decode_disp('ConductorReleaseIndication',Data) -> 'dec_ConductorReleaseIndication'(Data);
decode_disp('ConductorPermissionAskIndication',Data) -> 'dec_ConductorPermissionAskIndication'(Data);
decode_disp('ConductorPermissionGrantIndication',Data) -> 'dec_ConductorPermissionGrantIndication'(Data);
decode_disp('ConferenceTimeRemainingIndication',Data) -> 'dec_ConferenceTimeRemainingIndication'(Data);
decode_disp('ConferenceTimeInquireIndication',Data) -> 'dec_ConferenceTimeInquireIndication'(Data);
decode_disp('ConferenceTimeExtendIndication',Data) -> 'dec_ConferenceTimeExtendIndication'(Data);
decode_disp('ConferenceAssistanceIndication',Data) -> 'dec_ConferenceAssistanceIndication'(Data);
decode_disp('TextMessageIndication',Data) -> 'dec_TextMessageIndication'(Data);
decode_disp('RosterRefreshRequest',Data) -> 'dec_RosterRefreshRequest'(Data);
decode_disp('FunctionNotSupportedResponse',Data) -> 'dec_FunctionNotSupportedResponse'(Data);
decode_disp('NonStandardPDU',Data) -> 'dec_NonStandardPDU'(Data);
decode_disp('ConnectData',Data) -> 'dec_ConnectData'(Data);
decode_disp('ConnectGCCPDU',Data) -> 'dec_ConnectGCCPDU'(Data);
decode_disp('GCCPDU',Data) -> 'dec_GCCPDU'(Data);
decode_disp('RequestPDU',Data) -> 'dec_RequestPDU'(Data);
decode_disp('ResponsePDU',Data) -> 'dec_ResponsePDU'(Data);
decode_disp('IndicationPDU',Data) -> 'dec_IndicationPDU'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.
'enc_ChannelID'(Val) ->
Val@sub = Val - 1,
if 0 =< Val@sub, Val@sub < 65535 ->
[align|<<Val@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_ChannelID(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
{V1@Add4,V1@Buf1}
end.

'enc_StaticChannelID'(Val) ->
Val@sub = Val - 1,
if 0 =< Val@sub, Val@sub < 1000 ->
[align|<<Val@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_StaticChannelID(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
{V1@Add4,V1@Buf1}
end.

'enc_DynamicChannelID'(Val) ->
Val@sub = Val - 1001,
if 0 =< Val@sub, Val@sub < 64535 ->
[align|<<Val@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_DynamicChannelID(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1001,
{V1@Add4,V1@Buf1}
end.

'enc_UserID'(Val) ->
Val@sub = Val - 1001,
if 0 =< Val@sub, Val@sub < 64535 ->
[align|<<Val@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_UserID(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1001,
{V1@Add4,V1@Buf1}
end.

'enc_TokenID'(Val) ->
Val@sub = Val - 1,
if 0 =< Val@sub, Val@sub < 65535 ->
[align|<<Val@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_TokenID(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
{V1@Add4,V1@Buf1}
end.

'enc_StaticTokenID'(Val) ->
Val@sub = Val - 1,
if 0 =< Val@sub, Val@sub < 16383 ->
[align|<<Val@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_StaticTokenID(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
{V1@Add4,V1@Buf1}
end.

'enc_DynamicTokenID'(Val) ->
Val@sub = Val - 16384,
if 0 =< Val@sub, Val@sub < 49152 ->
[align|<<Val@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_DynamicTokenID(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 16384,
{V1@Add4,V1@Buf1}
end.

'enc_Time'(Val) ->
Val@sub = Val - -2147483648,
if Val@sub bsr 32 =:= 0 ->
begin
Val@sub@bin = binary:encode_unsigned(Val@sub),
Val@sub@bin_size0 = byte_size(Val@sub@bin),
Val@sub@bin_size = Val@sub@bin_size0 - 1,
[<<Val@sub@bin_size:2>>,
align|Val@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_Time(Bytes) ->
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/unsigned-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
V1@Add7 = V1@V3 + -2147483648,
{V1@Add7,V1@Buf4}
end.

'enc_Handle'(Val) ->
if Val bsr 32 =:= 0 ->
begin
Val@bin = binary:encode_unsigned(Val),
Val@bin_size0 = byte_size(Val@bin),
Val@bin_size = Val@bin_size0 - 1,
[<<Val@bin_size:2>>,
align|Val@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_Handle(Bytes) ->
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/unsigned-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V3,V1@Buf4}
end.

'enc_H221NonStandardIdentifier'(Val) ->
Enc1@bin = iolist_to_binary(Val),
Enc1@len = byte_size(Enc1@bin),
Enc1@len@sub = Enc1@len - 4,
if 0 =< Enc1@len@sub, Enc1@len@sub < 252 ->
[Enc1@len@sub,
align|Enc1@bin]
end.


dec_H221NonStandardIdentifier(Bytes) ->
begin
<<V1@V0:8/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 4,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/binary-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
V1@Conv7 = binary_to_list(V1@V3),
{V1@Conv7,V1@Buf4}
end.

'enc_Key'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= object ->
begin
Enc2@bin = encode_oid(ChoiceVal),
Enc2@len = byte_size(Enc2@bin),
if Enc2@len < 128 ->
[<<0:1>>,
align,
Enc2@len|Enc2@bin];
Enc2@len < 16384 ->
[<<0:1>>,
align,
<<2:2,Enc2@len:14>>|Enc2@bin];
true ->
[<<0:1>>,
align|encode_fragmented(Enc2@bin, 8)]
end
end;
ChoiceTag =:= h221NonStandard ->
begin
Enc4@bin = iolist_to_binary(ChoiceVal),
Enc4@len = byte_size(Enc4@bin),
Enc4@len@sub = Enc4@len - 4,
if 0 =< Enc4@len@sub, Enc4@len@sub < 252 ->
[<<1:1>>,
Enc4@len@sub,
align|Enc4@bin]
end
end
end.


dec_Key(Bytes) ->
{Choice,Bytes1} =
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad3 = bit_size(Bytes1) band 7,
{V2@V0,V2@Buf1} = case Bytes1 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7}
end,
<<V2@V8:V2@V0/binary-unit:8,V2@Buf9/bitstring>> = V2@Buf1,
V2@Conv10 = binary_to_list(V2@V8),
{V2@V11,V2@Buf12}  = {decode_oid(V2@Conv10),V2@Buf9},
{V2@V11,V2@Buf12}
end
end,
{{object,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:8/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes1,
V3@Add2 = V3@V0 + 4,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
V3@Conv7 = binary_to_list(V3@V3),
{V3@Conv7,V3@Buf4}
end
end,
{{h221NonStandard,Val},NewBytes}
end.
'enc_NonStandardParameter'(Val) ->
[begin
Enc1@input = element(2, Val),
enc_Key(Enc1@input)
end,
align|begin
Enc2@input = element(3, Val),
Enc3@bin = iolist_to_binary(Enc2@input),
Enc3@len = byte_size(Enc3@bin),
if Enc3@len < 128 ->
[Enc3@len|Enc3@bin];
Enc3@len < 16384 ->
[<<2:2,Enc3@len:14>>|Enc3@bin];
true ->
encode_fragmented(Enc3@bin, 8)
end
end].


dec_NonStandardParameter(Bytes) ->

%% attribute number 1 with type Key
{Term1,Bytes1} = dec_Key(Bytes),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes2} = begin
V1@Pad3 = bit_size(Bytes1) band 7,
{V1@V0,V1@Buf1} = case Bytes1 of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary_to_list(V1@V0),
{V1@Conv10,V1@Buf1}
end,
{{'NonStandardParameter',Term1,Term2},Bytes2}.

'enc_TextString'(Val) ->
Enc1@len = length(Val),
Enc1@bin = encode_chars_16bit(Val),
if Enc1@len < 256 ->
[align,
Enc1@len|Enc1@bin]
end.


dec_TextString(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@V4:V1@V0/binary-unit:16,V1@Buf5/bitstring>> = Bytes,
{V1@V6,V1@Buf7}  = {decode_chars_16bit(V1@V4),V1@Buf5},
{V1@V6,V1@Buf7}
end.

'enc_SimpleTextString'(Val) ->
Enc1@len = length(Val),
Enc1@bin = encode_chars_16bit(Val),
if Enc1@len < 256 ->
[align,
Enc1@len|Enc1@bin]
end.


dec_SimpleTextString(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@V4:V1@V0/binary-unit:16,V1@Buf5/bitstring>> = Bytes,
{V1@V6,V1@Buf7}  = {decode_chars_16bit(V1@V4),V1@Buf5},
{V1@V6,V1@Buf7}
end.

'enc_SimpleNumericString'(Val) ->
Enc1@len = length(Val),
Enc1@bin = encode_chars(Val, 4, {31,{0,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,1,2,3,4,5,6,7,8,9,10}}),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 255 ->
[Enc1@len@sub,
align|Enc1@bin]
end.


dec_SimpleNumericString(Bytes) ->
begin
<<V1@V0:8/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/binary-unit:4,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V7,V1@Buf8}  = {decode_chars(V1@V3, 4, {32,48,49,50,51,52,53,54,55,56,57}),V1@Buf4},
{V1@V7,V1@Buf8}
end.

'enc_DiallingString'(Val) ->
Enc1@len = length(Val),
Enc1@bin = encode_chars(Val, 4, {31,{0,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,1,2,3,4,5,6,7,8,9,10}}),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>,
align|Enc1@bin]
end.


dec_DiallingString(Bytes) ->
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/binary-unit:4,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V7,V1@Buf8}  = {decode_chars(V1@V3, 4, {32,48,49,50,51,52,53,54,55,56,57}),V1@Buf4},
{V1@V7,V1@Buf8}
end.

'enc_SubAddressString'(Val) ->
Enc1@len = length(Val),
Enc1@bin = encode_chars(Val, 4, {31,{0,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,1,2,3,4,5,6,7,8,9,10}}),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 40 ->
[<<Enc1@len@sub:6>>,
align|Enc1@bin]
end.


dec_SubAddressString(Bytes) ->
begin
<<V1@V0:6/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/binary-unit:4,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V7,V1@Buf8}  = {decode_chars(V1@V3, 4, {32,48,49,50,51,52,53,54,55,56,57}),V1@Buf4},
{V1@V7,V1@Buf8}
end.

'enc_ExtraDiallingString'(Val) ->
Enc1@len = length(Val),
Enc1@bin = encode_chars_16bit(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 255 ->
[Enc1@len@sub,
align|Enc1@bin]
end.


dec_ExtraDiallingString(Bytes) ->
begin
<<V1@V0:8/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/binary-unit:16,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V7,V1@Buf8}  = {decode_chars_16bit(V1@V3),V1@Buf4},
{V1@V7,V1@Buf8}
end.

'enc_UserData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_UserData_SETOF(Comp) || Comp <- Val]].

'enc_UserData_SETOF'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
enc_Key(Enc2@input)
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc4@bin = iolist_to_binary(Enc3@input),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len < 128 ->
[align,
Enc4@len|Enc4@bin];
Enc4@len < 16384 ->
[align,
<<2:2,Enc4@len:14>>|Enc4@bin];
true ->
[align|encode_fragmented(Enc4@bin, 8)]
end
end
end
end].

dec_UserData_SETOF(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type Key
{Term1,Bytes2} = dec_Key(Bytes1),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end,
V2@Conv10 = binary_to_list(V2@V0),
{V2@Conv10,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'UserData_SETOF',Term1,Term2},Bytes3}.



dec_UserData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components1(V1@V0, V1@Buf1, []).

'enc_Password'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 4, 5),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@input = element(3, Val),
if Extensions =:= [] ->
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@input = element(2, Val),
Enc5@len = length(Enc4@input),
Enc5@bin = encode_chars(Enc4@input, 4, {31,{0,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,1,2,3,4,5,6,7,8,9,10}}),
Enc5@len@sub = Enc5@len - 1,
if 0 =< Enc5@len@sub, Enc5@len@sub < 255 ->
[Enc5@len@sub,
align|Enc5@bin]
end
end,
begin
Enc6@input = element(3, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@len = length(Enc6@input),
Enc7@bin = encode_chars_16bit(Enc6@input),
if Enc7@len < 256 ->
[align,
Enc7@len|Enc7@bin]
end
end
end
end,
Extensions|begin
Enc9@input = element(4, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@len = length(Enc9@input),
Enc10@bin = encode_chars_16bit(Enc9@input),
Enc11@output = if Enc10@len < 256 ->
[Enc10@len|Enc10@bin]
end,
Enc12@bin = iolist_to_binary(Enc11@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[align|encode_fragmented(Enc12@bin, 8)]
end
end
end
end].


dec_Password(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NumericString
{Term1,Bytes3} = begin
<<V3@V0:8/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:4,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V7,V3@Buf8}  = {decode_chars(V3@V3, 4, {32,48,49,50,51,52,53,54,55,56,57}),V3@Buf4},
{V3@V7,V3@Buf8}
end,

%% attribute number 2 with type BMPString
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
V4@Pad2 = bit_size(Bytes3) band 7,
<<_:V4@Pad2,V4@V0:1/unsigned-unit:8,V4@V4:V4@V0/binary-unit:16,V4@Buf5/bitstring>> = Bytes3,
{V4@V6,V4@Buf7}  = {decode_chars_16bit(V4@V4),V4@Buf5},
{V4@V6,V4@Buf7}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 3 with type BMPString
{Term3,Bytes6} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes5) band 7,
{V6@V0,V6@Buf1} = case Bytes5 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx3,_} = begin
V7@Pad2 = bit_size(V6@V0) band 7,
<<_:V7@Pad2,V7@V0:1/unsigned-unit:8,V7@V4:V7@V0/binary-unit:16,V7@Buf5/bitstring>> = V6@V0,
{V7@V6,V7@Buf7}  = {decode_chars_16bit(V7@V4),V7@Buf5},
{V7@V6,V7@Buf7}
end,
{TmpValx3,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,
Bytes7= skipextensions(Bytes6, 2, Extensions),
{{'Password',Term1,Term2,Term3},Bytes7}.

'enc_PasswordSelector'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= numeric ->
begin
Enc2@len = length(ChoiceVal),
Enc2@bin = encode_chars(ChoiceVal, 4, {31,{0,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,1,2,3,4,5,6,7,8,9,10}}),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 255 ->
[<<0:1,0:1>>,
Enc2@len@sub,
align|Enc2@bin]
end
end;
ChoiceTag =:= text ->
begin
Enc4@len = length(ChoiceVal),
Enc4@bin = encode_chars_16bit(ChoiceVal),
if Enc4@len < 256 ->
[<<0:1,1:1>>,
align,
Enc4@len|Enc4@bin]
end
end;
ChoiceTag =:= unicodeText ->
begin
Enc5@len = length(ChoiceVal),
Enc5@bin = encode_chars_16bit(ChoiceVal),
Enc6@output = if Enc5@len < 256 ->
[Enc5@len|Enc5@bin]
end,
Enc7@bin = iolist_to_binary(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[<<1:1,0:7>>,
align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc7@bin, 8)]
end
end
end.


dec_PasswordSelector(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:8/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/binary-unit:4,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V7,V2@Buf8}  = {decode_chars(V2@V3, 4, {32,48,49,50,51,52,53,54,55,56,57}),V2@Buf4},
{V2@V7,V2@Buf8}
end
end,
{{numeric,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@V4:V3@V0/binary-unit:16,V3@Buf5/bitstring>> = Bytes2,
{V3@V6,V3@Buf7}  = {decode_chars_16bit(V3@V4),V3@Buf5},
{V3@V6,V3@Buf7}
end
end,
{{text,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
V3@Pad2 = bit_size(V2@V0) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@V4:V3@V0/binary-unit:16,V3@Buf5/bitstring>> = V2@V0,
{V3@V6,V3@Buf7}  = {decode_chars_16bit(V3@V4),V3@Buf5},
{V3@V6,V3@Buf7}
end,
{TmpVal,V2@Buf1}
end,
{{unicodeText,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ChallengeResponseItem'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= passwordString ->
[<<0:1,0:1>>|enc_PasswordSelector(ChoiceVal)];
ChoiceTag =:= responseData ->
[<<0:1,1:1>>|enc_UserData(ChoiceVal)]
end.


dec_ChallengeResponseItem(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_PasswordSelector(Bytes2)
end,
{{passwordString,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_UserData(Bytes2)
end,
{{responseData,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ChallengeResponseAlgorithm'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= passwordInTheClear ->
<<0:1,0:1>>;
ChoiceTag =:= nonStandardAlgorithm ->
[<<0:1,1:1>>|enc_NonStandardParameter(ChoiceVal)]
end.


dec_ChallengeResponseAlgorithm(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{passwordInTheClear,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandardAlgorithm,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ChallengeItem'(Val) ->
[<<0:1>>,
begin
Enc2@input = element(2, Val),
enc_ChallengeResponseAlgorithm(Enc2@input)
end|begin
Enc3@input = element(3, Val),
enc_UserData(Enc3@input)
end].


dec_ChallengeItem(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ChallengeResponseAlgorithm
{Term1,Bytes2} = dec_ChallengeResponseAlgorithm(Bytes1),

%% attribute number 2 with type UserData
{Term2,Bytes3} = dec_UserData(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V2@V0,V2@Buf1} = case Bytes3 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'ChallengeItem',Term1,Term2},Bytes5}.

'enc_ChallengeRequest'(Val) ->
[begin
Enc2@input = element(2, Val),
[<<0:1>>,
align|encode_unconstrained_number(Enc2@input)]
end|begin
Enc4@input = element(3, Val),
enc_ChallengeRequest_challengeSet(Enc4@input)
end].
'enc_ChallengeRequest_challengeSet'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ChallengeItem(Comp) || Comp <- Val]].


dec_ChallengeRequest_challengeSet(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components2(V1@V0, V1@Buf1, []).



dec_ChallengeRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad3 = bit_size(Bytes1) band 7,
{V2@V0,V2@Buf1} = case Bytes1 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@Buf6/bitstring>> when V2@V5 =/= 0 ->
{V2@V5,V2@Buf6};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@Buf7/bitstring>> when V2@V6 =/= 0 ->
{V2@V6,V2@Buf7}
end,
<<V2@V8:V2@V0/signed-unit:8,V2@Buf9/bitstring>> = V2@Buf1,
{V2@V8,V2@Buf9}
end,

%% attribute number 2 with type SET OF
{Term2,Bytes3} = 'dec_ChallengeRequest_challengeSet'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'ChallengeRequest',Term1,Term2},Bytes5}.

'enc_ChallengeResponse'(Val) ->
[begin
Enc2@input = element(2, Val),
[<<0:1>>,
align|encode_unconstrained_number(Enc2@input)]
end,
begin
Enc4@input = element(3, Val),
enc_ChallengeResponseAlgorithm(Enc4@input)
end|begin
Enc5@input = element(4, Val),
enc_ChallengeResponseItem(Enc5@input)
end].


dec_ChallengeResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad3 = bit_size(Bytes1) band 7,
{V2@V0,V2@Buf1} = case Bytes1 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@Buf6/bitstring>> when V2@V5 =/= 0 ->
{V2@V5,V2@Buf6};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@Buf7/bitstring>> when V2@V6 =/= 0 ->
{V2@V6,V2@Buf7}
end,
<<V2@V8:V2@V0/signed-unit:8,V2@Buf9/bitstring>> = V2@Buf1,
{V2@V8,V2@Buf9}
end,

%% attribute number 2 with type ChallengeResponseAlgorithm
{Term2,Bytes3} = dec_ChallengeResponseAlgorithm(Bytes2),

%% attribute number 3 with type ChallengeResponseItem
{Term3,Bytes4} = dec_ChallengeResponseItem(Bytes3),

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'ChallengeResponse',Term1,Term2,Term3},Bytes6}.

'enc_PasswordChallengeRequestResponse'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= passwordInTheClear ->
[<<0:1,0:1>>|enc_PasswordSelector(ChoiceVal)];
ChoiceTag =:= challengeRequestResponse ->
[<<0:1,1:1>>|enc_PasswordChallengeRequestResponse_challengeRequestResponse(ChoiceVal)]
end.
'enc_PasswordChallengeRequestResponse_challengeRequestResponse'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@input = element(2, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
enc_ChallengeRequest(Enc4@input)
end
end|begin
Enc6@input = element(3, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
enc_ChallengeResponse(Enc6@input)
end
end].

dec_PasswordChallengeRequestResponse_challengeRequestResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ChallengeRequest
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_ChallengeRequest(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type ChallengeResponse
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_ChallengeResponse(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'PasswordChallengeRequestResponse_challengeRequestResponse',Term1,Term2},Bytes6}.



dec_PasswordChallengeRequestResponse(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_PasswordSelector(Bytes2)
end,
{{passwordInTheClear,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_PasswordChallengeRequestResponse_challengeRequestResponse'(Bytes2)
end,
{{challengeRequestResponse,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ConferenceName'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 4, 5),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@input = element(3, Val),
if Extensions =:= [] ->
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@input = element(2, Val),
Enc5@len = length(Enc4@input),
Enc5@bin = encode_chars(Enc4@input, 4, {31,{0,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,1,2,3,4,5,6,7,8,9,10}}),
Enc5@len@sub = Enc5@len - 1,
if 0 =< Enc5@len@sub, Enc5@len@sub < 255 ->
[Enc5@len@sub,
align|Enc5@bin]
end
end,
begin
Enc6@input = element(3, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@len = length(Enc6@input),
Enc7@bin = encode_chars_16bit(Enc6@input),
if Enc7@len < 256 ->
[align,
Enc7@len|Enc7@bin]
end
end
end
end,
Extensions|begin
Enc9@input = element(4, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@len = length(Enc9@input),
Enc10@bin = encode_chars_16bit(Enc9@input),
Enc11@output = if Enc10@len < 256 ->
[Enc10@len|Enc10@bin]
end,
Enc12@bin = iolist_to_binary(Enc11@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[align|encode_fragmented(Enc12@bin, 8)]
end
end
end
end].


dec_ConferenceName(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NumericString
{Term1,Bytes3} = begin
<<V3@V0:8/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:4,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V7,V3@Buf8}  = {decode_chars(V3@V3, 4, {32,48,49,50,51,52,53,54,55,56,57}),V3@Buf4},
{V3@V7,V3@Buf8}
end,

%% attribute number 2 with type BMPString
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
V4@Pad2 = bit_size(Bytes3) band 7,
<<_:V4@Pad2,V4@V0:1/unsigned-unit:8,V4@V4:V4@V0/binary-unit:16,V4@Buf5/bitstring>> = Bytes3,
{V4@V6,V4@Buf7}  = {decode_chars_16bit(V4@V4),V4@Buf5},
{V4@V6,V4@Buf7}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 3 with type BMPString
{Term3,Bytes6} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes5) band 7,
{V6@V0,V6@Buf1} = case Bytes5 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx3,_} = begin
V7@Pad2 = bit_size(V6@V0) band 7,
<<_:V7@Pad2,V7@V0:1/unsigned-unit:8,V7@V4:V7@V0/binary-unit:16,V7@Buf5/bitstring>> = V6@V0,
{V7@V6,V7@Buf7}  = {decode_chars_16bit(V7@V4),V7@Buf5},
{V7@V6,V7@Buf7}
end,
{TmpValx3,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,
Bytes7= skipextensions(Bytes6, 2, Extensions),
{{'ConferenceName',Term1,Term2,Term3},Bytes7}.

'enc_ConferenceNameSelector'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= numeric ->
begin
Enc2@len = length(ChoiceVal),
Enc2@bin = encode_chars(ChoiceVal, 4, {31,{0,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,1,2,3,4,5,6,7,8,9,10}}),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 255 ->
[<<0:1,0:1>>,
Enc2@len@sub,
align|Enc2@bin]
end
end;
ChoiceTag =:= text ->
begin
Enc4@len = length(ChoiceVal),
Enc4@bin = encode_chars_16bit(ChoiceVal),
if Enc4@len < 256 ->
[<<0:1,1:1>>,
align,
Enc4@len|Enc4@bin]
end
end;
ChoiceTag =:= unicodeText ->
begin
Enc5@len = length(ChoiceVal),
Enc5@bin = encode_chars_16bit(ChoiceVal),
Enc6@output = if Enc5@len < 256 ->
[Enc5@len|Enc5@bin]
end,
Enc7@bin = iolist_to_binary(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[<<1:1,0:7>>,
align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc7@bin, 8)]
end
end
end.


dec_ConferenceNameSelector(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:8/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/binary-unit:4,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V7,V2@Buf8}  = {decode_chars(V2@V3, 4, {32,48,49,50,51,52,53,54,55,56,57}),V2@Buf4},
{V2@V7,V2@Buf8}
end
end,
{{numeric,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@V4:V3@V0/binary-unit:16,V3@Buf5/bitstring>> = Bytes2,
{V3@V6,V3@Buf7}  = {decode_chars_16bit(V3@V4),V3@Buf5},
{V3@V6,V3@Buf7}
end
end,
{{text,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
V3@Pad2 = bit_size(V2@V0) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@V4:V3@V0/binary-unit:16,V3@Buf5/bitstring>> = V2@V0,
{V3@V6,V3@Buf7}  = {decode_chars_16bit(V3@V4),V3@Buf5},
{V3@V6,V3@Buf7}
end,
{TmpVal,V2@Buf1}
end,
{{unicodeText,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ConferenceNameModifier'(Val) ->
Enc1@len = length(Val),
Enc1@bin = encode_chars(Val, 4, {31,{0,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,1,2,3,4,5,6,7,8,9,10}}),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 255 ->
[Enc1@len@sub,
align|Enc1@bin]
end.


dec_ConferenceNameModifier(Bytes) ->
begin
<<V1@V0:8/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/binary-unit:4,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V7,V1@Buf8}  = {decode_chars(V1@V3, 4, {32,48,49,50,51,52,53,54,55,56,57}),V1@Buf4},
{V1@V7,V1@Buf8}
end.

'enc_Privilege'(Val) ->
if Val =:= terminate ->
<<0:1,0:3>>;
Val =:= ejectUser ->
<<0:1,1:3>>;
Val =:= add ->
<<0:1,2:3>>;
Val =:= lockUnlock ->
<<0:1,3:3>>;
Val =:= transfer ->
<<0:1,4:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_Privilege(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> terminate;
1 -> ejectUser;
2 -> add;
3 -> lockUnlock;
4 -> transfer;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V3,[terminate,ejectUser,add,lockUnlock,transfer]}}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_TerminationMethod'(Val) ->
if Val =:= automatic ->
<<0:1,0:1>>;
Val =:= manual ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_TerminationMethod(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:1/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> automatic;
1 -> manual
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_ConferencePriorityScheme'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandardScheme ->
[<<0:1>>|enc_NonStandardParameter(ChoiceVal)]
end.


dec_ConferencePriorityScheme(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandardScheme,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ConferencePriority'(Val) ->
[begin
Enc2@input = element(2, Val),
if Enc2@input bsr 16 =:= 0 ->
[<<0:1>>,
align|<<Enc2@input:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(3, Val),
enc_ConferencePriorityScheme(Enc4@input)
end].


dec_ConferencePriority(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type ConferencePriorityScheme
{Term2,Bytes3} = dec_ConferencePriorityScheme(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'ConferencePriority',Term1,Term2},Bytes5}.

'enc_NodeCategory'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= conventional ->
<<0:1,0:2>>;
ChoiceTag =:= counted ->
<<0:1,1:2>>;
ChoiceTag =:= anonymous ->
<<0:1,2:2>>;
ChoiceTag =:= nonStandardCategory ->
[<<0:1,3:2>>|enc_NonStandardParameter(ChoiceVal)]
end.


dec_NodeCategory(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{conventional,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{counted,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{anonymous,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandardCategory,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ConferenceMode'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'conventional-only' ->
<<0:1,0:3>>;
ChoiceTag =:= 'counted-only' ->
<<0:1,1:3>>;
ChoiceTag =:= 'anonymous-only' ->
<<0:1,2:3>>;
ChoiceTag =:= 'conventional-control' ->
<<0:1,3:3>>;
ChoiceTag =:= 'unrestricted-mode' ->
<<0:1,4:3>>;
ChoiceTag =:= 'non-standard-mode' ->
[<<0:1,5:3>>|enc_NonStandardParameter(ChoiceVal)]
end.


dec_ConferenceMode(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'conventional-only',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'counted-only',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'anonymous-only',Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'conventional-control',Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'unrestricted-mode',Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{'non-standard-mode',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_NetworkAddress'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 6 =:= 0 ->
[<<Enc1@len@sub:6>>|[enc_NetworkAddress_SEQOF(Comp) || Comp <- Val]]
end.

'enc_NetworkAddress_SEQOF'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= aggregatedChannel ->
[<<0:1,0:2>>|enc_NetworkAddress_SEQOF_aggregatedChannel(ChoiceVal)];
ChoiceTag =:= transportConnection ->
[<<0:1,1:2>>|enc_NetworkAddress_SEQOF_transportConnection(ChoiceVal)];
ChoiceTag =:= nonStandard ->
[<<0:1,2:2>>|enc_NonStandardParameter(ChoiceVal)]
end.
'enc_NetworkAddress_SEQOF_aggregatedChannel'(Val) ->
[begin
Enc1@input = element(4, Val),
Enc2@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(6, Val),
if Enc3@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@input = element(2, Val),
enc_NetworkAddress_SEQOF_aggregatedChannel_transferModes(Enc5@input)
end,
begin
Enc6@input = element(3, Val),
Enc7@len = length(Enc6@input),
Enc7@bin = encode_chars(Enc6@input, 4, {31,{0,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,1,2,3,4,5,6,7,8,9,10}}),
Enc7@len@sub = Enc7@len - 1,
if Enc7@len@sub bsr 4 =:= 0 ->
[<<Enc7@len@sub:4>>,
align|Enc7@bin]
end
end,
begin
Enc8@input = element(4, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@len = length(Enc8@input),
Enc9@bin = encode_chars(Enc8@input, 4, {31,{0,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,1,2,3,4,5,6,7,8,9,10}}),
Enc9@len@sub = Enc9@len - 1,
if 0 =< Enc9@len@sub, Enc9@len@sub < 40 ->
[<<Enc9@len@sub:6>>,
align|Enc9@bin]
end
end
end
end,
begin
Enc11@input = element(5, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@len = length(Enc11@input),
Enc12@bin = encode_chars_16bit(Enc11@input),
Enc12@len@sub = Enc12@len - 1,
if 0 =< Enc12@len@sub, Enc12@len@sub < 255 ->
[Enc12@len@sub,
align|Enc12@bin]
end
end
end
end|begin
Enc14@input = element(6, Val),
if Enc14@input =:= asn1_NOVALUE ->
[];
true ->
enc_NetworkAddress_SEQOF_aggregatedChannel_highLayerCompatibility(Enc14@input)
end
end].
'enc_NetworkAddress_SEQOF_aggregatedChannel_transferModes'(Val) ->
[begin
Enc2@input = element(2, Val),
Enc4@input = element(3, Val),
if Enc2@input =:= false ->
if Enc4@input =:= false ->
<<0:1,0:1,0:1>>;
Enc4@input =:= true ->
<<0:1,0:1,1:1>>
end;
Enc2@input =:= true ->
if Enc4@input =:= false ->
<<0:1,1:1,0:1>>;
Enc4@input =:= true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc6@input = element(4, Val),
Enc8@input = element(5, Val),
if Enc6@input =:= false ->
if Enc8@input =:= false ->
<<0:1,0:1>>;
Enc8@input =:= true ->
<<0:1,1:1>>
end;
Enc6@input =:= true ->
if Enc8@input =:= false ->
<<1:1,0:1>>;
Enc8@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc10@input = element(6, Val),
Enc12@input = element(7, Val),
if Enc10@input =:= false ->
if Enc12@input =:= false ->
<<0:1,0:1>>;
Enc12@input =:= true ->
<<0:1,1:1>>
end;
Enc10@input =:= true ->
if Enc12@input =:= false ->
<<1:1,0:1>>;
Enc12@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc14@input = element(8, Val),
Enc16@input = element(9, Val),
if Enc14@input =:= false ->
if Enc16@input =:= false ->
<<0:1,0:1>>;
Enc16@input =:= true ->
<<0:1,1:1>>
end;
Enc14@input =:= true ->
if Enc16@input =:= false ->
<<1:1,0:1>>;
Enc16@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc18@input = element(10, Val),
Enc20@input = element(11, Val),
if Enc18@input =:= false ->
if Enc20@input =:= false ->
<<0:1,0:1>>;
Enc20@input =:= true ->
<<0:1,1:1>>
end;
Enc18@input =:= true ->
if Enc20@input =:= false ->
<<1:1,0:1>>;
Enc20@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc22@input = element(12, Val),
Enc24@input = element(13, Val),
if Enc22@input =:= false ->
if Enc24@input =:= false ->
<<0:1,0:1>>;
Enc24@input =:= true ->
<<0:1,1:1>>
end;
Enc22@input =:= true ->
if Enc24@input =:= false ->
<<1:1,0:1>>;
Enc24@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc26@input = element(14, Val),
Enc28@input = element(15, Val),
if Enc26@input =:= false ->
if Enc28@input =:= false ->
<<0:1,0:1>>;
Enc28@input =:= true ->
<<0:1,1:1>>
end;
Enc26@input =:= true ->
if Enc28@input =:= false ->
<<1:1,0:1>>;
Enc28@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc30@input = element(16, Val),
Enc32@input = element(17, Val),
if Enc30@input =:= false ->
if Enc32@input =:= false ->
<<0:1,0:1>>;
Enc32@input =:= true ->
<<0:1,1:1>>
end;
Enc30@input =:= true ->
if Enc32@input =:= false ->
<<1:1,0:1>>;
Enc32@input =:= true ->
<<1:1,1:1>>
end
end
end|begin
Enc34@input = element(18, Val),
Enc36@input = element(19, Val),
if Enc34@input =:= false ->
if Enc36@input =:= false ->
<<0:1,0:1>>;
Enc36@input =:= true ->
<<0:1,1:1>>
end;
Enc34@input =:= true ->
if Enc36@input =:= false ->
<<1:1,0:1>>;
Enc36@input =:= true ->
<<1:1,1:1>>
end
end
end].

dec_NetworkAddress_SEQOF_aggregatedChannel_transferModes(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes9} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes10} = begin
<<V10@V0:1,V10@Buf1/bitstring>> = Bytes9,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end,

%% attribute number 10 with type BOOLEAN
{Term10,Bytes11} = begin
<<V11@V0:1,V11@Buf1/bitstring>> = Bytes10,
V11@Int2 = case V11@V0 of
0 -> false;
1 -> true
end,
{V11@Int2,V11@Buf1}
end,

%% attribute number 11 with type BOOLEAN
{Term11,Bytes12} = begin
<<V12@V0:1,V12@Buf1/bitstring>> = Bytes11,
V12@Int2 = case V12@V0 of
0 -> false;
1 -> true
end,
{V12@Int2,V12@Buf1}
end,

%% attribute number 12 with type BOOLEAN
{Term12,Bytes13} = begin
<<V13@V0:1,V13@Buf1/bitstring>> = Bytes12,
V13@Int2 = case V13@V0 of
0 -> false;
1 -> true
end,
{V13@Int2,V13@Buf1}
end,

%% attribute number 13 with type BOOLEAN
{Term13,Bytes14} = begin
<<V14@V0:1,V14@Buf1/bitstring>> = Bytes13,
V14@Int2 = case V14@V0 of
0 -> false;
1 -> true
end,
{V14@Int2,V14@Buf1}
end,

%% attribute number 14 with type BOOLEAN
{Term14,Bytes15} = begin
<<V15@V0:1,V15@Buf1/bitstring>> = Bytes14,
V15@Int2 = case V15@V0 of
0 -> false;
1 -> true
end,
{V15@Int2,V15@Buf1}
end,

%% attribute number 15 with type BOOLEAN
{Term15,Bytes16} = begin
<<V16@V0:1,V16@Buf1/bitstring>> = Bytes15,
V16@Int2 = case V16@V0 of
0 -> false;
1 -> true
end,
{V16@Int2,V16@Buf1}
end,

%% attribute number 16 with type BOOLEAN
{Term16,Bytes17} = begin
<<V17@V0:1,V17@Buf1/bitstring>> = Bytes16,
V17@Int2 = case V17@V0 of
0 -> false;
1 -> true
end,
{V17@Int2,V17@Buf1}
end,

%% attribute number 17 with type BOOLEAN
{Term17,Bytes18} = begin
<<V18@V0:1,V18@Buf1/bitstring>> = Bytes17,
V18@Int2 = case V18@V0 of
0 -> false;
1 -> true
end,
{V18@Int2,V18@Buf1}
end,

%% attribute number 18 with type BOOLEAN
{Term18,Bytes19} = begin
<<V19@V0:1,V19@Buf1/bitstring>> = Bytes18,
V19@Int2 = case V19@V0 of
0 -> false;
1 -> true
end,
{V19@Int2,V19@Buf1}
end,

%% Extensions
{Extensions,Bytes20} = case Ext of
0 -> {<<>>,Bytes19};
1 ->
{V20@V0,V20@Buf1} = case Bytes19 of
<<0:1,V20@V3:6,V20@Buf4/bitstring>> ->
V20@Add5 = V20@V3 + 1,
{V20@Add5,V20@Buf4};
<<1:1,V20@Buf2/bitstring>> ->
V20@Pad6 = bit_size(V20@Buf2) band 7,
{V20@V3,V20@Buf4} = case V20@Buf2 of
<<_:V20@Pad6,0:1,V20@V8:7,V20@Buf9/bitstring>> when V20@V8 =/= 0 ->
{V20@V8,V20@Buf9};
<<_:V20@Pad6,1:1,0:1,V20@V9:14,V20@Buf10/bitstring>> when V20@V9 =/= 0 ->
{V20@V9,V20@Buf10}
end,
{V20@V3,V20@Buf4}
end,
<<V20@V11:V20@V0/bitstring-unit:1,V20@Buf12/bitstring>> = V20@Buf1,
{V20@V11,V20@Buf12}
end,
Bytes21= skipextensions(Bytes20, 1, Extensions),
{{'NetworkAddress_SEQOF_aggregatedChannel_transferModes',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18},Bytes21}.

'enc_NetworkAddress_SEQOF_aggregatedChannel_highLayerCompatibility'(Val) ->
[begin
Enc2@input = element(2, Val),
Enc4@input = element(3, Val),
if Enc2@input =:= false ->
if Enc4@input =:= false ->
<<0:1,0:1,0:1>>;
Enc4@input =:= true ->
<<0:1,0:1,1:1>>
end;
Enc2@input =:= true ->
if Enc4@input =:= false ->
<<0:1,1:1,0:1>>;
Enc4@input =:= true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc6@input = element(4, Val),
Enc8@input = element(5, Val),
if Enc6@input =:= false ->
if Enc8@input =:= false ->
<<0:1,0:1>>;
Enc8@input =:= true ->
<<0:1,1:1>>
end;
Enc6@input =:= true ->
if Enc8@input =:= false ->
<<1:1,0:1>>;
Enc8@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc10@input = element(6, Val),
Enc12@input = element(7, Val),
if Enc10@input =:= false ->
if Enc12@input =:= false ->
<<0:1,0:1>>;
Enc12@input =:= true ->
<<0:1,1:1>>
end;
Enc10@input =:= true ->
if Enc12@input =:= false ->
<<1:1,0:1>>;
Enc12@input =:= true ->
<<1:1,1:1>>
end
end
end|begin
Enc14@input = element(8, Val),
if Enc14@input =:= false ->
<<0:1>>;
Enc14@input =:= true ->
<<1:1>>
end
end].

dec_NetworkAddress_SEQOF_aggregatedChannel_highLayerCompatibility(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V9@V0,V9@Buf1} = case Bytes8 of
<<0:1,V9@V3:6,V9@Buf4/bitstring>> ->
V9@Add5 = V9@V3 + 1,
{V9@Add5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
V9@Pad6 = bit_size(V9@Buf2) band 7,
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<_:V9@Pad6,0:1,V9@V8:7,V9@Buf9/bitstring>> when V9@V8 =/= 0 ->
{V9@V8,V9@Buf9};
<<_:V9@Pad6,1:1,0:1,V9@V9:14,V9@Buf10/bitstring>> when V9@V9 =/= 0 ->
{V9@V9,V9@Buf10}
end,
{V9@V3,V9@Buf4}
end,
<<V9@V11:V9@V0/bitstring-unit:1,V9@Buf12/bitstring>> = V9@Buf1,
{V9@V11,V9@Buf12}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'NetworkAddress_SEQOF_aggregatedChannel_highLayerCompatibility',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes10}.


dec_NetworkAddress_SEQOF_aggregatedChannel(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE
{Term1,Bytes3} = 'dec_NetworkAddress_SEQOF_aggregatedChannel_transferModes'(Bytes2),

%% attribute number 2 with type NumericString
{Term2,Bytes4} = begin
<<V3@V0:4/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:4,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V7,V3@Buf8}  = {decode_chars(V3@V3, 4, {32,48,49,50,51,52,53,54,55,56,57}),V3@Buf4},
{V3@V7,V3@Buf8}
end,

%% attribute number 3 with type NumericString
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V4@V0:6/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes4,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/binary-unit:4,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V7,V4@Buf8}  = {decode_chars(V4@V3, 4, {32,48,49,50,51,52,53,54,55,56,57}),V4@Buf4},
{V4@V7,V4@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type BMPString
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:8/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes5,
V5@Add2 = V5@V0 + 1,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/binary-unit:16,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V7,V5@Buf8}  = {decode_chars_16bit(V5@V3),V5@Buf4},
{V5@V7,V5@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type SEQUENCE
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_NetworkAddress_SEQOF_aggregatedChannel_highLayerCompatibility'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'NetworkAddress_SEQOF_aggregatedChannel',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_NetworkAddress_SEQOF_transportConnection'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
Enc3@bin = iolist_to_binary(Enc2@input),
Enc3@len = byte_size(Enc3@bin),
Enc3@len@sub = Enc3@len - 1,
if 0 =< Enc3@len@sub, Enc3@len@sub < 20 ->
[<<Enc3@len@sub:5>>,
align|Enc3@bin]
end
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc5@bin = iolist_to_binary(Enc4@input),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end
end
end].

dec_NetworkAddress_SEQOF_transportConnection(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes2} = begin
<<V2@V0:5/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/binary-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
V2@Conv7 = binary_to_list(V2@V3),
{V2@Conv7,V2@Buf4}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
V3@Conv10 = binary_to_list(V3@V0),
{V3@Conv10,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'NetworkAddress_SEQOF_transportConnection',Term1,Term2},Bytes3}.


dec_NetworkAddress_SEQOF(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_NetworkAddress_SEQOF_aggregatedChannel'(Bytes2)
end,
{{aggregatedChannel,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_NetworkAddress_SEQOF_transportConnection'(Bytes2)
end,
{{transportConnection,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_NetworkAddress(Bytes) ->
%% Length with constraint {1,64}
<<V1@V0:6/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components3(V1@Add2, V1@Buf1, []).

'enc_MediaList'(Val) ->
[begin
Enc2@input = element(2, Val),
Enc4@input = element(3, Val),
if Enc2@input =:= false ->
if Enc4@input =:= false ->
<<0:1,0:1,0:1>>;
Enc4@input =:= true ->
<<0:1,0:1,1:1>>
end;
Enc2@input =:= true ->
if Enc4@input =:= false ->
<<0:1,1:1,0:1>>;
Enc4@input =:= true ->
<<0:1,1:1,1:1>>
end
end
end|begin
Enc6@input = element(4, Val),
if Enc6@input =:= false ->
<<0:1>>;
Enc6@input =:= true ->
<<1:1>>
end
end].


dec_MediaList(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'MediaList',Term1,Term2,Term3},Bytes6}.

'enc_ChannelAggregationMethod'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= h221 ->
<<0:1,0:2>>;
ChoiceTag =:= h244 ->
<<0:1,1:2>>;
ChoiceTag =:= 'iso-iec-13871' ->
<<0:1,2:2>>;
ChoiceTag =:= nonStandard ->
[<<0:1,3:2>>|enc_NonStandardParameter(ChoiceVal)]
end.


dec_ChannelAggregationMethod(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{h221,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{h244,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'iso-iec-13871',Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_Profile'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= simpleProfile ->
[<<0:1,0:2>>|enc_Profile_simpleProfile(ChoiceVal)];
ChoiceTag =:= multimediaProfile ->
[<<0:1,1:2>>|enc_Profile_multimediaProfile(ChoiceVal)];
ChoiceTag =:= dsmccDownloadProfile ->
<<0:1,2:2>>;
ChoiceTag =:= nonStandard ->
[<<0:1,3:2>>|enc_NonStandardParameter(ChoiceVal)]
end.
'enc_Profile_simpleProfile'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= speech ->
<<0:3>>;
ChoiceTag =:= 'telephony-3kHz' ->
<<1:3>>;
ChoiceTag =:= 'telephony-7kHz' ->
<<2:3>>;
ChoiceTag =:= 'voice-band' ->
<<3:3>>;
ChoiceTag =:= frameRelay ->
<<4:3>>;
ChoiceTag =:= 't123-pstn-basic' ->
<<5:3>>;
ChoiceTag =:= 't123-psdn-basic' ->
<<6:3>>;
ChoiceTag =:= 't123-b-isdn-basic' ->
<<7:3>>
end.

dec_Profile_simpleProfile(Bytes) ->
{Choice,Bytes1} =
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{speech,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{'telephony-3kHz',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{'telephony-7kHz',Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{'voice-band',Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{frameRelay,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{'t123-pstn-basic',Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{'t123-psdn-basic',Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{'t123-b-isdn-basic',Val},NewBytes}
end.
'enc_Profile_multimediaProfile'(Val) ->
[begin
Enc1@input = element(2, Val),
enc_Profile_multimediaProfile_profile(Enc1@input)
end|begin
Enc2@input = element(3, Val),
if Enc2@input =:= false ->
<<0:1>>;
Enc2@input =:= true ->
<<1:1>>
end
end].
'enc_Profile_multimediaProfile_profile'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= h310 ->
<<0:4>>;
ChoiceTag =:= h320 ->
<<1:4>>;
ChoiceTag =:= h321 ->
<<2:4>>;
ChoiceTag =:= h322 ->
<<3:4>>;
ChoiceTag =:= h323 ->
<<4:4>>;
ChoiceTag =:= h324 ->
<<5:4>>;
ChoiceTag =:= h324m ->
<<6:4>>;
ChoiceTag =:= asvd ->
<<7:4>>;
ChoiceTag =:= dsvd ->
<<8:4>>
end.

dec_Profile_multimediaProfile_profile(Bytes) ->
{Choice,Bytes1} =
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{h310,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{h320,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{h321,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{h322,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{h323,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{h324,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{h324m,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{asvd,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{dsvd,Val},NewBytes}
end.

dec_Profile_multimediaProfile(Bytes) ->

%% attribute number 1 with type CHOICE
{Term1,Bytes1} = 'dec_Profile_multimediaProfile_profile'(Bytes),

%% attribute number 2 with type BOOLEAN
{Term2,Bytes2} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes1,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end,
{{'Profile_multimediaProfile',Term1,Term2},Bytes2}.



dec_Profile(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_Profile_simpleProfile'(Bytes2)
end,
{{simpleProfile,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_Profile_multimediaProfile'(Bytes2)
end,
{{multimediaProfile,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{dsmccDownloadProfile,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ExtendedE164NetworkAddress'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@input = element(2, Val),
Enc5@len = length(Enc4@input),
Enc5@bin = encode_chars(Enc4@input, 4, {31,{0,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,1,2,3,4,5,6,7,8,9,10}}),
Enc5@len@sub = Enc5@len - 1,
if Enc5@len@sub bsr 4 =:= 0 ->
[<<Enc5@len@sub:4>>,
align|Enc5@bin]
end
end,
begin
Enc6@input = element(3, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@len = length(Enc6@input),
Enc7@bin = encode_chars(Enc6@input, 4, {31,{0,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,1,2,3,4,5,6,7,8,9,10}}),
Enc7@len@sub = Enc7@len - 1,
if 0 =< Enc7@len@sub, Enc7@len@sub < 40 ->
[<<Enc7@len@sub:6>>,
align|Enc7@bin]
end
end
end
end|begin
Enc9@input = element(4, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@len = length(Enc9@input),
Enc10@bin = encode_chars_16bit(Enc9@input),
Enc10@len@sub = Enc10@len - 1,
if 0 =< Enc10@len@sub, Enc10@len@sub < 255 ->
[Enc10@len@sub,
align|Enc10@bin]
end
end
end
end].


dec_ExtendedE164NetworkAddress(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NumericString
{Term1,Bytes3} = begin
<<V3@V0:4/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:4,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V7,V3@Buf8}  = {decode_chars(V3@V3, 4, {32,48,49,50,51,52,53,54,55,56,57}),V3@Buf4},
{V3@V7,V3@Buf8}
end,

%% attribute number 2 with type NumericString
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:6/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/binary-unit:4,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V7,V4@Buf8}  = {decode_chars(V4@V3, 4, {32,48,49,50,51,52,53,54,55,56,57}),V4@Buf4},
{V4@V7,V4@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type BMPString
{Term3,Bytes5} = case Opt band 1 of
1 ->
begin
<<V5@V0:8/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 1,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/binary-unit:16,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V7,V5@Buf8}  = {decode_chars_16bit(V5@V3),V5@Buf4},
{V5@V7,V5@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'ExtendedE164NetworkAddress',Term1,Term2,Term3},Bytes7}.

'enc_TransportAddress'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
Enc3@bin = iolist_to_binary(Enc2@input),
Enc3@len = byte_size(Enc3@bin),
Enc3@len@sub = Enc3@len - 1,
if 0 =< Enc3@len@sub, Enc3@len@sub < 20 ->
[<<Enc3@len@sub:5>>,
align|Enc3@bin]
end
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc5@bin = iolist_to_binary(Enc4@input),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end
end
end].


dec_TransportAddress(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes2} = begin
<<V2@V0:5/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/binary-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
V2@Conv7 = binary_to_list(V2@V3),
{V2@Conv7,V2@Buf4}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
V3@Conv10 = binary_to_list(V3@V0),
{V3@Conv10,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'TransportAddress',Term1,Term2},Bytes3}.

'enc_GSTNConnection'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_ExtendedE164NetworkAddress(Enc2@input)
end].


dec_GSTNConnection(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ExtendedE164NetworkAddress
{Term1,Bytes2} = dec_ExtendedE164NetworkAddress(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'GSTNConnection',Term1},Bytes4}.

'enc_ISDNConnection'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
enc_ISDNConnection_circuitTypes(Enc3@input)
end,
begin
Enc4@input = element(3, Val),
enc_ExtendedE164NetworkAddress(Enc4@input)
end|begin
Enc5@input = element(4, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
true ->
enc_ISDNConnection_highLayerCompatibility(Enc5@input)
end
end].
'enc_ISDNConnection_circuitTypes'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ISDNConnection_circuitTypes_SETOF(Comp) || Comp <- Val]].

'enc_ISDNConnection_circuitTypes_SETOF'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'digital-64k' ->
<<0:3>>;
ChoiceTag =:= 'digital-2x64k' ->
<<1:3>>;
ChoiceTag =:= 'digital-384k' ->
<<2:3>>;
ChoiceTag =:= 'digital-1536' ->
<<3:3>>;
ChoiceTag =:= 'digital-1920k' ->
<<4:3>>;
ChoiceTag =:= 'multirate-base-64k' ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 30 ->
<<5:3,ChoiceVal@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end
end.

dec_ISDNConnection_circuitTypes_SETOF(Bytes) ->
{Choice,Bytes1} =
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{'digital-64k',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{'digital-2x64k',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{'digital-384k',Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{'digital-1536',Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{'digital-1920k',Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
<<V7@V0:5/unsigned-unit:1,V7@Buf1/bitstring>> = Bytes1,
V7@Add2 = V7@V0 + 1,
{V7@Add2,V7@Buf1}
end
end,
{{'multirate-base-64k',Val},NewBytes}
end.

dec_ISDNConnection_circuitTypes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components4(V1@V0, V1@Buf1, []).

'enc_ISDNConnection_highLayerCompatibility'(Val) ->
[begin
Enc2@input = element(2, Val),
Enc4@input = element(3, Val),
if Enc2@input =:= false ->
if Enc4@input =:= false ->
<<0:1,0:1,0:1>>;
Enc4@input =:= true ->
<<0:1,0:1,1:1>>
end;
Enc2@input =:= true ->
if Enc4@input =:= false ->
<<0:1,1:1,0:1>>;
Enc4@input =:= true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc6@input = element(4, Val),
Enc8@input = element(5, Val),
if Enc6@input =:= false ->
if Enc8@input =:= false ->
<<0:1,0:1>>;
Enc8@input =:= true ->
<<0:1,1:1>>
end;
Enc6@input =:= true ->
if Enc8@input =:= false ->
<<1:1,0:1>>;
Enc8@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc10@input = element(6, Val),
Enc12@input = element(7, Val),
if Enc10@input =:= false ->
if Enc12@input =:= false ->
<<0:1,0:1>>;
Enc12@input =:= true ->
<<0:1,1:1>>
end;
Enc10@input =:= true ->
if Enc12@input =:= false ->
<<1:1,0:1>>;
Enc12@input =:= true ->
<<1:1,1:1>>
end
end
end|begin
Enc14@input = element(8, Val),
if Enc14@input =:= false ->
<<0:1>>;
Enc14@input =:= true ->
<<1:1>>
end
end].

dec_ISDNConnection_highLayerCompatibility(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V9@V0,V9@Buf1} = case Bytes8 of
<<0:1,V9@V3:6,V9@Buf4/bitstring>> ->
V9@Add5 = V9@V3 + 1,
{V9@Add5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
V9@Pad6 = bit_size(V9@Buf2) band 7,
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<_:V9@Pad6,0:1,V9@V8:7,V9@Buf9/bitstring>> when V9@V8 =/= 0 ->
{V9@V8,V9@Buf9};
<<_:V9@Pad6,1:1,0:1,V9@V9:14,V9@Buf10/bitstring>> when V9@V9 =/= 0 ->
{V9@V9,V9@Buf10}
end,
{V9@V3,V9@Buf4}
end,
<<V9@V11:V9@V0/bitstring-unit:1,V9@Buf12/bitstring>> = V9@Buf1,
{V9@V11,V9@Buf12}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'ISDNConnection_highLayerCompatibility',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes10}.



dec_ISDNConnection(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SET OF
{Term1,Bytes3} = 'dec_ISDNConnection_circuitTypes'(Bytes2),

%% attribute number 2 with type ExtendedE164NetworkAddress
{Term2,Bytes4} = dec_ExtendedE164NetworkAddress(Bytes3),

%% attribute number 3 with type SEQUENCE
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_ISDNConnection_highLayerCompatibility'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'ISDNConnection',Term1,Term2,Term3},Bytes7}.

'enc_CSDNConnection'(Val) ->
[<<0:1>>,
begin
Enc2@input = element(2, Val),
enc_CSDNConnection_circuitTypes(Enc2@input)
end|begin
Enc3@input = element(3, Val),
enc_ExtendedE164NetworkAddress(Enc3@input)
end].
'enc_CSDNConnection_circuitTypes'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CSDNConnection_circuitTypes_SETOF(Comp) || Comp <- Val]].

'enc_CSDNConnection_circuitTypes_SETOF'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'digital-56k' ->
<<0:1>>;
ChoiceTag =:= 'digital-64k' ->
<<1:1>>
end.

dec_CSDNConnection_circuitTypes_SETOF(Bytes) ->
{Choice,Bytes1} =
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{'digital-56k',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{'digital-64k',Val},NewBytes}
end.

dec_CSDNConnection_circuitTypes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components5(V1@V0, V1@Buf1, []).



dec_CSDNConnection(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SET OF
{Term1,Bytes2} = 'dec_CSDNConnection_circuitTypes'(Bytes1),

%% attribute number 2 with type ExtendedE164NetworkAddress
{Term2,Bytes3} = dec_ExtendedE164NetworkAddress(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V2@V0,V2@Buf1} = case Bytes3 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'CSDNConnection',Term1,Term2},Bytes5}.

'enc_PSDNConnection'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_PSDNConnection_networkAddress(Enc2@input)
end].
'enc_PSDNConnection_networkAddress'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= extendedE164NetworkAddress ->
[<<0:2>>|enc_ExtendedE164NetworkAddress(ChoiceVal)];
ChoiceTag =:= transportAddress ->
[<<1:2>>|enc_TransportAddress(ChoiceVal)];
ChoiceTag =:= nonStandard ->
[<<2:2>>|enc_NonStandardParameter(ChoiceVal)]
end.

dec_PSDNConnection_networkAddress(Bytes) ->
{Choice,Bytes1} =
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_ExtendedE164NetworkAddress(Bytes1)
end,
{{extendedE164NetworkAddress,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_TransportAddress(Bytes1)
end,
{{transportAddress,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes1)
end,
{{nonStandard,Val},NewBytes}
end.


dec_PSDNConnection(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_PSDNConnection_networkAddress'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'PSDNConnection',Term1},Bytes4}.

'enc_ATMConnection'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
enc_ATMConnection_networkAddress(Enc3@input)
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
Enc4@input >= 0 ->
begin
Enc4@input@bin = binary:encode_unsigned(Enc4@input),
Enc4@input@bin_size = byte_size(Enc4@input@bin),
if Enc4@input@bin_size < 128 ->
[align,
Enc4@input@bin_size|Enc4@input@bin];
Enc4@input@bin_size < 16384 ->
[align,
<<2:2,Enc4@input@bin_size:14>>|Enc4@input@bin];
true ->
[align|encode_fragmented(Enc4@input@bin, 8)]
end
end;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end].
'enc_ATMConnection_networkAddress'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= extendedE164 ->
[<<0:2>>|enc_ExtendedE164NetworkAddress(ChoiceVal)];
ChoiceTag =:= nsapAddress ->
[<<1:2>>|enc_TransportAddress(ChoiceVal)];
ChoiceTag =:= nonStandard ->
[<<2:2>>|enc_NonStandardParameter(ChoiceVal)]
end.

dec_ATMConnection_networkAddress(Bytes) ->
{Choice,Bytes1} =
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_ExtendedE164NetworkAddress(Bytes1)
end,
{{extendedE164,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_TransportAddress(Bytes1)
end,
{{nsapAddress,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes1)
end,
{{nonStandard,Val},NewBytes}
end.


dec_ATMConnection(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes3} = 'dec_ATMConnection_networkAddress'(Bytes2),

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
V3@Pad3 = bit_size(Bytes3) band 7,
{V3@V0,V3@Buf1} = case Bytes3 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> when V3@V5 =/= 0 ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/unit:8,V3@Buf9/bitstring>> = V3@Buf1,
{V3@V8,V3@Buf9}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'ATMConnection',Term1,Term2},Bytes6}.

'enc_NetworkConnection'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= gstnConnection ->
[<<0:1,0:3>>|enc_GSTNConnection(ChoiceVal)];
ChoiceTag =:= isdnConnection ->
[<<0:1,1:3>>|enc_ISDNConnection(ChoiceVal)];
ChoiceTag =:= csdnConnection ->
[<<0:1,2:3>>|enc_CSDNConnection(ChoiceVal)];
ChoiceTag =:= psdnConnection ->
[<<0:1,3:3>>|enc_PSDNConnection(ChoiceVal)];
ChoiceTag =:= atmConnection ->
[<<0:1,4:3>>|enc_ATMConnection(ChoiceVal)];
ChoiceTag =:= extendedE164NetworkAddress ->
[<<0:1,5:3>>|enc_ExtendedE164NetworkAddress(ChoiceVal)];
ChoiceTag =:= transportAddress ->
[<<0:1,6:3>>|enc_TransportAddress(ChoiceVal)];
ChoiceTag =:= nonStandard ->
[<<0:1,7:3>>|enc_NonStandardParameter(ChoiceVal)]
end.


dec_NetworkConnection(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_GSTNConnection(Bytes2)
end,
{{gstnConnection,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_ISDNConnection(Bytes2)
end,
{{isdnConnection,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_CSDNConnection(Bytes2)
end,
{{csdnConnection,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_PSDNConnection(Bytes2)
end,
{{psdnConnection,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_ATMConnection(Bytes2)
end,
{{atmConnection,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_ExtendedE164NetworkAddress(Bytes2)
end,
{{extendedE164NetworkAddress,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_TransportAddress(Bytes2)
end,
{{transportAddress,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_NetworkAddressV2'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_NetworkAddressV2_SETOF(Comp) || Comp <- Val]].

'enc_NetworkAddressV2_SETOF'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@input = element(2, Val),
enc_NetworkAddressV2_SETOF_networkConnection(Enc4@input)
end,
begin
Enc5@input = element(3, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
true ->
enc_NetworkAddressV2_SETOF_profiles(Enc5@input)
end
end|begin
Enc7@input = element(4, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
enc_MediaList(Enc7@input)
end
end].
'enc_NetworkAddressV2_SETOF_networkConnection'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= singleConnection ->
[<<0:1>>|enc_NetworkConnection(ChoiceVal)];
ChoiceTag =:= aggregatedConnections ->
[<<1:1>>|enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections(ChoiceVal)]
end.
'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList(Enc3@input)
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods(Enc4@input)
end
end].
'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 30 ->
[<<Enc1@len@sub:5>>|[enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_SETOF(Comp) || Comp <- Val]]
end.

'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_SETOF'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= isdnConnection ->
[<<0:1,0:1>>|enc_ISDNConnection(ChoiceVal)];
ChoiceTag =:= csdnConnection ->
[<<0:1,1:1>>|enc_CSDNConnection(ChoiceVal)]
end.

dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_SETOF(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_ISDNConnection(Bytes2)
end,
{{isdnConnection,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_CSDNConnection(Bytes2)
end,
{{csdnConnection,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList(Bytes) ->
%% Length with constraint {1,30}
<<V1@V0:5/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components6(V1@Add2, V1@Buf1, []).

'enc_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ChannelAggregationMethod(Comp) || Comp <- Val]].


dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components7(V1@V0, V1@Buf1, []).


dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SET OF
{Term1,Bytes3} = 'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList'(Bytes2),

%% attribute number 2 with type SET OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_aggregationMethods'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'NetworkAddressV2_SETOF_networkConnection_aggregatedConnections',Term1,Term2},Bytes6}.


dec_NetworkAddressV2_SETOF_networkConnection(Bytes) ->
{Choice,Bytes1} =
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NetworkConnection(Bytes1)
end,
{{singleConnection,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections'(Bytes1)
end,
{{aggregatedConnections,Val},NewBytes}
end.
'enc_NetworkAddressV2_SETOF_profiles'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_Profile(Comp) || Comp <- Val]].


dec_NetworkAddressV2_SETOF_profiles(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components8(V1@V0, V1@Buf1, []).


dec_NetworkAddressV2_SETOF(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes3} = 'dec_NetworkAddressV2_SETOF_networkConnection'(Bytes2),

%% attribute number 2 with type SET OF
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
'dec_NetworkAddressV2_SETOF_profiles'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type MediaList
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_MediaList(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'NetworkAddressV2_SETOF',Term1,Term2,Term3},Bytes7}.



dec_NetworkAddressV2(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components9(V1@V0, V1@Buf1, []).

'enc_NodeType'(Val) ->
if Val =:= terminal ->
<<0:1,0:2>>;
Val =:= multiportTerminal ->
<<0:1,1:2>>;
Val =:= mcu ->
<<0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_NodeType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> terminal;
1 -> multiportTerminal;
2 -> mcu;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V3,[terminal,multiportTerminal,mcu]}}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_NodeProperties'(Val) ->
Enc2@input = element(2, Val),
Enc4@input = element(3, Val),
if Enc2@input =:= false ->
if Enc4@input =:= false ->
<<0:1,0:1,0:1>>;
Enc4@input =:= true ->
<<0:1,0:1,1:1>>
end;
Enc2@input =:= true ->
if Enc4@input =:= false ->
<<0:1,1:1,0:1>>;
Enc4@input =:= true ->
<<0:1,1:1,1:1>>
end
end.


dec_NodeProperties(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'NodeProperties',Term1,Term2},Bytes5}.

'enc_AsymmetryIndicator'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= callingNode ->
<<0:2>>;
ChoiceTag =:= calledNode ->
<<1:2>>;
ChoiceTag =:= unknown ->
if ChoiceVal bsr 32 =:= 0 ->
[<<2:2>>|begin
ChoiceVal@bin = binary:encode_unsigned(ChoiceVal),
ChoiceVal@bin_size0 = byte_size(ChoiceVal@bin),
ChoiceVal@bin_size = ChoiceVal@bin_size0 - 1,
[<<ChoiceVal@bin_size:2>>,
align|ChoiceVal@bin]
end];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end.


dec_AsymmetryIndicator(Bytes) ->
{Choice,Bytes1} =
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{callingNode,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{calledNode,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes1,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end
end,
{{unknown,Val},NewBytes}
end.
'enc_AlternativeNodeID'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= h243NodeID ->
begin
Enc2@bin = iolist_to_binary(ChoiceVal),
Enc2@len = byte_size(Enc2@bin),
if Enc2@len =:= 2 ->
[<<0:1>>|Enc2@bin]
end
end
end.


dec_AlternativeNodeID(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:2/binary-unit:8,V2@Buf1/bitstring>> = Bytes2,
V2@Conv2 = binary_to_list(V2@V0),
{V2@Conv2,V2@Buf1}
end
end,
{{h243NodeID,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ConferenceDescriptor'(Val) ->
Enc4@bitmap = extension_bitmap(Val, 8, 10),
Extensions = if Enc4@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc4@bitmap:2>>
end,
[begin
Enc1@input = element(3, Val),
if Extensions =:= [] ->
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@input = element(4, Val),
Enc3@input = element(7, Val),
if Enc2@input =:= asn1_NOVALUE ->
if Enc3@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@input = element(2, Val),
enc_ConferenceName(Enc6@input)
end,
begin
Enc7@input = element(3, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@len = length(Enc7@input),
Enc8@bin = encode_chars(Enc7@input, 4, {31,{0,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,1,2,3,4,5,6,7,8,9,10}}),
Enc8@len@sub = Enc8@len - 1,
if 0 =< Enc8@len@sub, Enc8@len@sub < 255 ->
[Enc8@len@sub,
align|Enc8@bin]
end
end
end
end,
begin
Enc10@input = element(4, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc11@len = length(Enc10@input),
Enc11@bin = encode_chars_16bit(Enc10@input),
if Enc11@len < 256 ->
[align,
Enc11@len|Enc11@bin]
end
end
end
end,
begin
Enc13@input = element(5, Val),
Enc15@input = element(6, Val),
if Enc13@input =:= false ->
if Enc15@input =:= false ->
<<0:1,0:1>>;
Enc15@input =:= true ->
<<0:1,1:1>>
end;
Enc13@input =:= true ->
if Enc15@input =:= false ->
<<1:1,0:1>>;
Enc15@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc17@input = element(7, Val),
if Enc17@input =:= asn1_NOVALUE ->
[];
true ->
enc_NetworkAddress(Enc17@input)
end
end,
Extensions,
begin
Enc19@input = element(8, Val),
if Enc19@input =:= asn1_NOVALUE ->
[];
Enc19@input =:= false ->
[align|<<1:8,0:1,0:7>>];
Enc19@input =:= true ->
[align|<<1:8,1:1,0:7>>]
end
end|begin
Enc22@input = element(9, Val),
if Enc22@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@output = enc_ConferenceMode(Enc22@input),
Enc24@bin = complete(Enc23@output),
Enc24@len = byte_size(Enc24@bin),
if Enc24@len < 128 ->
[align,
Enc24@len|Enc24@bin];
Enc24@len < 16384 ->
[align,
<<2:2,Enc24@len:14>>|Enc24@bin];
true ->
[align|encode_fragmented(Enc24@bin, 8)]
end
end
end
end].


dec_ConferenceDescriptor(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ConferenceName
{Term1,Bytes3} = dec_ConferenceName(Bytes2),

%% attribute number 2 with type NumericString
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:8/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:4,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V7,V3@Buf8}  = {decode_chars(V3@V3, 4, {32,48,49,50,51,52,53,54,55,56,57}),V3@Buf4},
{V3@V7,V3@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type BMPString
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
V4@Pad2 = bit_size(Bytes4) band 7,
<<_:V4@Pad2,V4@V0:1/unsigned-unit:8,V4@V4:V4@V0/binary-unit:16,V4@Buf5/bitstring>> = Bytes4,
{V4@V6,V4@Buf7}  = {decode_chars_16bit(V4@V4),V4@Buf5},
{V4@V6,V4@Buf7}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes6} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes5,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes7} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes6,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 6 with type NetworkAddress
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_NetworkAddress(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V7@V0,V7@Buf1} = case Bytes8 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V11:V7@V0/bitstring-unit:1,V7@Buf12/bitstring>> = V7@Buf1,
{V7@V11,V7@Buf12}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes10} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes9) band 7,
{V8@V0,V8@Buf1} = case Bytes9 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx7,_} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = V8@V0,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,
{TmpValx7,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type ConferenceMode
{Term8,Bytes11} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes10) band 7,
{V10@V0,V10@Buf1} = case Bytes10 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx8,_} = dec_ConferenceMode(V10@V0),
{TmpValx8,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,
Bytes12= skipextensions(Bytes11, 3, Extensions),
{{'ConferenceDescriptor',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes12}.

'enc_NodeRecord'(Val) ->
Enc8@bitmap = extension_bitmap(Val, 11, 13),
Extensions = if Enc8@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc8@bitmap:2>>
end,
[begin
Enc1@input = element(2, Val),
if Extensions =:= [] ->
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@input = element(5, Val),
Enc3@input = element(6, Val),
if Enc2@input =:= asn1_NOVALUE ->
if Enc3@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@input = element(7, Val),
Enc5@input = element(8, Val),
if Enc4@input =:= asn1_NOVALUE ->
if Enc5@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc5@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@input = element(9, Val),
Enc7@input = element(10, Val),
if Enc6@input =:= asn1_NOVALUE ->
if Enc7@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc7@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc10@input = element(2, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@input@sub = Enc10@input - 1001,
if 0 =< Enc10@input@sub, Enc10@input@sub < 64535 ->
[align|<<Enc10@input@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc10@input}}})
end
end
end
end,
begin
Enc13@input = element(3, Val),
if Enc13@input =:= terminal ->
<<0:1,0:2>>;
Enc13@input =:= multiportTerminal ->
<<0:1,1:2>>;
Enc13@input =:= mcu ->
<<0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc13@input}}})
end
end,
begin
Enc15@input = element(4, Val),
enc_NodeProperties(Enc15@input)
end,
begin
Enc16@input = element(5, Val),
if Enc16@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@len = length(Enc16@input),
Enc17@bin = encode_chars_16bit(Enc16@input),
if Enc17@len < 256 ->
[align,
Enc17@len|Enc17@bin]
end
end
end
end,
begin
Enc19@input = element(6, Val),
if Enc19@input =:= asn1_NOVALUE ->
[];
true ->
enc_NodeRecord_participantsList(Enc19@input)
end
end,
begin
Enc21@input = element(7, Val),
if Enc21@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@len = length(Enc21@input),
Enc22@bin = encode_chars_16bit(Enc21@input),
if Enc22@len < 256 ->
[align,
Enc22@len|Enc22@bin]
end
end
end
end,
begin
Enc24@input = element(8, Val),
if Enc24@input =:= asn1_NOVALUE ->
[];
true ->
enc_NetworkAddress(Enc24@input)
end
end,
begin
Enc26@input = element(9, Val),
if Enc26@input =:= asn1_NOVALUE ->
[];
true ->
enc_AlternativeNodeID(Enc26@input)
end
end,
begin
Enc28@input = element(10, Val),
if Enc28@input =:= asn1_NOVALUE ->
[];
true ->
enc_UserData(Enc28@input)
end
end,
Extensions,
begin
Enc30@input = element(11, Val),
if Enc30@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc31@output = enc_NodeCategory(Enc30@input),
Enc32@bin = complete(Enc31@output),
Enc32@len = byte_size(Enc32@bin),
if Enc32@len < 128 ->
[align,
Enc32@len|Enc32@bin];
Enc32@len < 16384 ->
[align,
<<2:2,Enc32@len:14>>|Enc32@bin];
true ->
[align|encode_fragmented(Enc32@bin, 8)]
end
end
end
end|begin
Enc34@input = element(12, Val),
if Enc34@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc35@output = enc_NetworkAddressV2(Enc34@input),
Enc36@bin = complete(Enc35@output),
Enc36@len = byte_size(Enc36@bin),
if Enc36@len < 128 ->
[align,
Enc36@len|Enc36@bin];
Enc36@len < 16384 ->
[align,
<<2:2,Enc36@len:14>>|Enc36@bin];
true ->
[align|encode_fragmented(Enc36@bin, 8)]
end
end
end
end].
'enc_NodeRecord_participantsList'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@len = length(Comp),
Enc1@bin = encode_chars_16bit(Comp),
if Enc1@len < 256 ->
[Enc1@len|Enc1@bin]
end
end || Comp <- Val]].


dec_NodeRecord_participantsList(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components10(V1@V0, V1@Buf1, []).



dec_NodeRecord(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case (Opt bsr 6) band 1 of
1 ->
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1001,
{V3@Add4,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:2/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> terminal;
1 -> multiportTerminal;
2 -> mcu;
_ -> exit({error,{asn1,{decode_enumerated,{V4@V3,[terminal,multiportTerminal,mcu]}}}})
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
V4@Pad9 = bit_size(V4@Buf5) band 7,
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<_:V4@Pad9,0:1,V4@V11:7,V4@Buf12/bitstring>> when V4@V11 =/= 0 ->
{V4@V11,V4@Buf12};
<<_:V4@Pad9,1:1,0:1,V4@V12:14,V4@Buf13/bitstring>> when V4@V12 =/= 0 ->
{V4@V12,V4@Buf13}
end,
<<V4@V14:V4@V6/unit:8,V4@Buf15/bitstring>> = V4@Buf7,
{V4@V14,V4@Buf15}
end,
V4@Int16 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int16,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,

%% attribute number 3 with type NodeProperties
{Term3,Bytes5} = dec_NodeProperties(Bytes4),

%% attribute number 4 with type BMPString
{Term4,Bytes6} = case (Opt bsr 5) band 1 of
1 ->
begin
V5@Pad2 = bit_size(Bytes5) band 7,
<<_:V5@Pad2,V5@V0:1/unsigned-unit:8,V5@V4:V5@V0/binary-unit:16,V5@Buf5/bitstring>> = Bytes5,
{V5@V6,V5@Buf7}  = {decode_chars_16bit(V5@V4),V5@Buf5},
{V5@V6,V5@Buf7}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case (Opt bsr 4) band 1 of
1 ->
'dec_NodeRecord_participantsList'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type BMPString
{Term6,Bytes8} = case (Opt bsr 3) band 1 of
1 ->
begin
V6@Pad2 = bit_size(Bytes7) band 7,
<<_:V6@Pad2,V6@V0:1/unsigned-unit:8,V6@V4:V6@V0/binary-unit:16,V6@Buf5/bitstring>> = Bytes7,
{V6@V6,V6@Buf7}  = {decode_chars_16bit(V6@V4),V6@Buf5},
{V6@V6,V6@Buf7}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type NetworkAddress
{Term7,Bytes9} = case (Opt bsr 2) band 1 of
1 ->
dec_NetworkAddress(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type AlternativeNodeID
{Term8,Bytes10} = case (Opt bsr 1) band 1 of
1 ->
dec_AlternativeNodeID(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 9 with type UserData
{Term9,Bytes11} = case Opt band 1 of
1 ->
dec_UserData(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% Extensions
{Extensions,Bytes12} = case Ext of
0 -> {<<>>,Bytes11};
1 ->
{V7@V0,V7@Buf1} = case Bytes11 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V11:V7@V0/bitstring-unit:1,V7@Buf12/bitstring>> = V7@Buf1,
{V7@V11,V7@Buf12}
end,

%% attribute number 10 with type NodeCategory
{Term10,Bytes13} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes12) band 7,
{V8@V0,V8@Buf1} = case Bytes12 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx10,_} = dec_NodeCategory(V8@V0),
{TmpValx10,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type NetworkAddressV2
{Term11,Bytes14} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes13) band 7,
{V9@V0,V9@Buf1} = case Bytes13 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx11,_} = dec_NetworkAddressV2(V9@V0),
{TmpValx11,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,
Bytes15= skipextensions(Bytes14, 3, Extensions),
{{'NodeRecord',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11},Bytes15}.

'enc_SessionKey'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
enc_Key(Enc2@input)
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc3@input@sub = Enc3@input - 1,
if 0 =< Enc3@input@sub, Enc3@input@sub < 65535 ->
[align|<<Enc3@input@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end
end
end].


dec_SessionKey(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type Key
{Term1,Bytes2} = dec_Key(Bytes1),

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes2,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'SessionKey',Term1,Term2},Bytes3}.

'enc_ChannelType'(Val) ->
if Val =:= static ->
<<0:2>>;
Val =:= dynamicMulticast ->
<<1:2>>;
Val =:= dynamicPrivate ->
<<2:2>>;
Val =:= dynamicUserId ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_ChannelType(Bytes) ->
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> static;
1 -> dynamicMulticast;
2 -> dynamicPrivate;
3 -> dynamicUserId
end,
{V1@Int2,V1@Buf1}
end.

'enc_ApplicationRecord'(Val) ->
[begin
Enc1@input = element(4, Val),
Enc2@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(6, Val),
Enc5@input = element(2, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc5@input =:= false ->
<<0:1,0:1>>;
Enc5@input =:= true ->
<<0:1,1:1>>
end;
true ->
if Enc5@input =:= false ->
<<1:1,0:1>>;
Enc5@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@input = element(3, Val),
if Enc7@input =:= false ->
<<0:1>>;
Enc7@input =:= true ->
<<1:1>>
end
end,
begin
Enc9@input = element(4, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
Enc9@input =:= static ->
<<0:2>>;
Enc9@input =:= dynamicMulticast ->
<<1:2>>;
Enc9@input =:= dynamicPrivate ->
<<2:2>>;
Enc9@input =:= dynamicUserId ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@input}}})
end
end,
begin
Enc12@input = element(5, Val),
if Enc12@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@input@sub = Enc12@input - 1001,
if 0 =< Enc12@input@sub, Enc12@input@sub < 64535 ->
[align|<<Enc12@input@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc12@input}}})
end
end
end
end|begin
Enc15@input = element(6, Val),
if Enc15@input =:= asn1_NOVALUE ->
[];
true ->
enc_ApplicationRecord_nonCollapsingCapabilities(Enc15@input)
end
end].
'enc_ApplicationRecord_nonCollapsingCapabilities'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ApplicationRecord_nonCollapsingCapabilities_SETOF(Comp) || Comp <- Val]].

'enc_ApplicationRecord_nonCollapsingCapabilities_SETOF'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
enc_CapabilityID(Enc2@input)
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc4@bin = iolist_to_binary(Enc3@input),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len < 128 ->
[align,
Enc4@len|Enc4@bin];
Enc4@len < 16384 ->
[align,
<<2:2,Enc4@len:14>>|Enc4@bin];
true ->
[align|encode_fragmented(Enc4@bin, 8)]
end
end
end
end].

dec_ApplicationRecord_nonCollapsingCapabilities_SETOF(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CapabilityID
{Term1,Bytes2} = dec_CapabilityID(Bytes1),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end,
V2@Conv10 = binary_to_list(V2@V0),
{V2@Conv10,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'ApplicationRecord_nonCollapsingCapabilities_SETOF',Term1,Term2},Bytes3}.


dec_ApplicationRecord_nonCollapsingCapabilities(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components11(V1@V0, V1@Buf1, []).



dec_ApplicationRecord(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V5@V0:2/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> static;
1 -> dynamicMulticast;
2 -> dynamicPrivate;
3 -> dynamicUserId
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
V6@Pad2 = bit_size(Bytes5) band 7,
<<_:V6@Pad2,V6@V0:2/unsigned-unit:8,V6@Buf1/bitstring>> = Bytes5,
V6@Add4 = V6@V0 + 1001,
{V6@Add4,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type SET OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_ApplicationRecord_nonCollapsingCapabilities'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V7@V0,V7@Buf1} = case Bytes7 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V11:V7@V0/bitstring-unit:1,V7@Buf12/bitstring>> = V7@Buf1,
{V7@V11,V7@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'ApplicationRecord',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_CapabilityID'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= standard ->
if ChoiceVal bsr 16 =:= 0 ->
[<<0:1>>,
align|<<ChoiceVal:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= nonStandard ->
[<<1:1>>|enc_Key(ChoiceVal)]
end.


dec_CapabilityID(Bytes) ->
{Choice,Bytes1} =
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end
end,
{{standard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_Key(Bytes1)
end,
{{nonStandard,Val},NewBytes}
end.
'enc_CapabilityClass'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= logical ->
<<0:1,0:2>>;
ChoiceTag =:= unsignedMin ->
if ChoiceVal >= 0 ->
[<<0:1,1:2>>|begin
ChoiceVal@bin = binary:encode_unsigned(ChoiceVal),
ChoiceVal@bin_size = byte_size(ChoiceVal@bin),
if ChoiceVal@bin_size < 128 ->
[align,
ChoiceVal@bin_size|ChoiceVal@bin];
ChoiceVal@bin_size < 16384 ->
[align,
<<2:2,ChoiceVal@bin_size:14>>|ChoiceVal@bin];
true ->
[align|encode_fragmented(ChoiceVal@bin, 8)]
end
end];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= unsignedMax ->
if ChoiceVal >= 0 ->
[<<0:1,2:2>>|begin
ChoiceVal@bin = binary:encode_unsigned(ChoiceVal),
ChoiceVal@bin_size = byte_size(ChoiceVal@bin),
if ChoiceVal@bin_size < 128 ->
[align,
ChoiceVal@bin_size|ChoiceVal@bin];
ChoiceVal@bin_size < 16384 ->
[align,
<<2:2,ChoiceVal@bin_size:14>>|ChoiceVal@bin];
true ->
[align|encode_fragmented(ChoiceVal@bin, 8)]
end
end];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end.


dec_CapabilityClass(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{logical,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> when V3@V5 =/= 0 ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/unit:8,V3@Buf9/bitstring>> = V3@Buf1,
{V3@V8,V3@Buf9}
end
end,
{{unsignedMin,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
V4@Pad3 = bit_size(Bytes2) band 7,
{V4@V0,V4@Buf1} = case Bytes2 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@Buf6/bitstring>> when V4@V5 =/= 0 ->
{V4@V5,V4@Buf6};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7}
end,
<<V4@V8:V4@V0/unit:8,V4@Buf9/bitstring>> = V4@Buf1,
{V4@V8,V4@Buf9}
end
end,
{{unsignedMax,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_EntityID'(Val) ->
if Val bsr 16 =:= 0 ->
[align|<<Val:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_EntityID(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_ApplicationInvokeSpecifier'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@input = element(2, Val),
enc_SessionKey(Enc4@input)
end,
begin
Enc5@input = element(3, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
true ->
enc_ApplicationInvokeSpecifier_expectedCapabilitySet(Enc5@input)
end
end,
begin
Enc7@input = element(4, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
Enc7@input =:= static ->
<<0:2>>;
Enc7@input =:= dynamicMulticast ->
<<1:2>>;
Enc7@input =:= dynamicPrivate ->
<<2:2>>;
Enc7@input =:= dynamicUserId ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end|begin
Enc10@input = element(5, Val),
if Enc10@input =:= false ->
<<0:1>>;
Enc10@input =:= true ->
<<1:1>>
end
end].
'enc_ApplicationInvokeSpecifier_expectedCapabilitySet'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ApplicationInvokeSpecifier_expectedCapabilitySet_SETOF(Comp) || Comp <- Val]].

'enc_ApplicationInvokeSpecifier_expectedCapabilitySet_SETOF'(Val) ->
[<<0:1>>,
begin
Enc2@input = element(2, Val),
enc_CapabilityID(Enc2@input)
end|begin
Enc3@input = element(3, Val),
enc_CapabilityClass(Enc3@input)
end].

dec_ApplicationInvokeSpecifier_expectedCapabilitySet_SETOF(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CapabilityID
{Term1,Bytes2} = dec_CapabilityID(Bytes1),

%% attribute number 2 with type CapabilityClass
{Term2,Bytes3} = dec_CapabilityClass(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V2@V0,V2@Buf1} = case Bytes3 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'ApplicationInvokeSpecifier_expectedCapabilitySet_SETOF',Term1,Term2},Bytes5}.


dec_ApplicationInvokeSpecifier_expectedCapabilitySet(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components12(V1@V0, V1@Buf1, []).



dec_ApplicationInvokeSpecifier(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SessionKey
{Term1,Bytes3} = dec_SessionKey(Bytes2),

%% attribute number 2 with type SET OF
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
'dec_ApplicationInvokeSpecifier_expectedCapabilitySet'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = case Opt band 1 of
1 ->
begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes4,
V3@Int2 = case V3@V0 of
0 -> static;
1 -> dynamicMulticast;
2 -> dynamicPrivate;
3 -> dynamicUserId
end,
{V3@Int2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes6} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes5,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V5@V0,V5@Buf1} = case Bytes6 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'ApplicationInvokeSpecifier',Term1,Term2,Term3,Term4},Bytes8}.

'enc_RegistryKey'(Val) ->
[begin
Enc1@input = element(2, Val),
enc_SessionKey(Enc1@input)
end|begin
Enc2@input = element(3, Val),
Enc3@bin = iolist_to_binary(Enc2@input),
Enc3@len = byte_size(Enc3@bin),
if Enc3@len < 65 ->
[<<Enc3@len:7>>,
align|Enc3@bin]
end
end].


dec_RegistryKey(Bytes) ->

%% attribute number 1 with type SessionKey
{Term1,Bytes1} = dec_SessionKey(Bytes),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes2} = begin
<<V1@V0:7/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
V1@Pad4 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad4,V1@V2:V1@V0/binary-unit:8,V1@Buf3/bitstring>> = V1@Buf1,
V1@Conv6 = binary_to_list(V1@V2),
{V1@Conv6,V1@Buf3}
end,
{{'RegistryKey',Term1,Term2},Bytes2}.

'enc_RegistryItem'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= channelID ->
begin
ChoiceVal@sub = ChoiceVal - 1001,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 64535 ->
[<<0:1,0:2>>,
align|<<ChoiceVal@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= tokenID ->
begin
ChoiceVal@sub = ChoiceVal - 16384,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 49152 ->
[<<0:1,1:2>>,
align|<<ChoiceVal@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= parameter ->
begin
Enc6@bin = iolist_to_binary(ChoiceVal),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len < 65 ->
[<<0:1,2:2,Enc6@len:7>>,
align|Enc6@bin]
end
end;
ChoiceTag =:= vacant ->
<<0:1,3:2>>
end.


dec_RegistryItem(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes2,
V2@Add4 = V2@V0 + 1001,
{V2@Add4,V2@Buf1}
end
end,
{{channelID,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 16384,
{V3@Add4,V3@Buf1}
end
end,
{{tokenID,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
<<V4@V0:7/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes2,
V4@Pad4 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad4,V4@V2:V4@V0/binary-unit:8,V4@Buf3/bitstring>> = V4@Buf1,
V4@Conv6 = binary_to_list(V4@V2),
{V4@Conv6,V4@Buf3}
end
end,
{{parameter,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{vacant,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_RegistryEntryOwner'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= owned ->
[<<0:1>>|enc_RegistryEntryOwner_owned(ChoiceVal)];
ChoiceTag =:= notOwned ->
<<1:1>>
end.
'enc_RegistryEntryOwner_owned'(Val) ->
[align,
begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - 1001,
if 0 =< Enc1@input@sub, Enc1@input@sub < 64535 ->
<<Enc1@input@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input bsr 16 =:= 0 ->
<<Enc3@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].

dec_RegistryEntryOwner_owned(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1001,
{V1@Add4,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
{{'RegistryEntryOwner_owned',Term1,Term2},Bytes2}.



dec_RegistryEntryOwner(Bytes) ->
{Choice,Bytes1} =
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_RegistryEntryOwner_owned'(Bytes1)
end,
{{owned,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{notOwned,Val},NewBytes}
end.
'enc_RegistryModificationRights'(Val) ->
if Val =:= owner ->
<<0:2>>;
Val =:= session ->
<<1:2>>;
Val =:= public ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_RegistryModificationRights(Bytes) ->
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> owner;
1 -> session;
2 -> public;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V0,[owner,session,public]}}}})
end,
{V1@Int2,V1@Buf1}
end.

'enc_UserIDIndication'(Val) ->
Enc2@input = element(2, Val),
[<<0:1>>,
align|encode_unconstrained_number(Enc2@input)].


dec_UserIDIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad3 = bit_size(Bytes1) band 7,
{V2@V0,V2@Buf1} = case Bytes1 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@Buf6/bitstring>> when V2@V5 =/= 0 ->
{V2@V5,V2@Buf6};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@Buf7/bitstring>> when V2@V6 =/= 0 ->
{V2@V6,V2@Buf7}
end,
<<V2@V8:V2@V0/signed-unit:8,V2@Buf9/bitstring>> = V2@Buf1,
{V2@V8,V2@Buf9}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UserIDIndication',Term1},Bytes4}.

'enc_ConferenceCreateRequest'(Val) ->
Enc9@bitmap = extension_bitmap(Val, 15, 17),
Extensions = if Enc9@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc9@bitmap:2>>
end,
[begin
Enc1@input = element(3, Val),
if Extensions =:= [] ->
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@input = element(4, Val),
Enc3@input = element(9, Val),
if Enc2@input =:= asn1_NOVALUE ->
if Enc3@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@input = element(10, Val),
Enc5@input = element(11, Val),
if Enc4@input =:= asn1_NOVALUE ->
if Enc5@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc5@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@input = element(12, Val),
Enc7@input = element(13, Val),
if Enc6@input =:= asn1_NOVALUE ->
if Enc7@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc7@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc8@input = element(14, Val),
if Enc8@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc11@input = element(2, Val),
enc_ConferenceName(Enc11@input)
end,
begin
Enc12@input = element(3, Val),
if Enc12@input =:= asn1_NOVALUE ->
[];
true ->
enc_Password(Enc12@input)
end
end,
begin
Enc14@input = element(4, Val),
if Enc14@input =:= asn1_NOVALUE ->
[];
true ->
enc_Password(Enc14@input)
end
end,
begin
Enc16@input = element(5, Val),
Enc18@input = element(6, Val),
if Enc16@input =:= false ->
if Enc18@input =:= false ->
<<0:1,0:1>>;
Enc18@input =:= true ->
<<0:1,1:1>>
end;
Enc16@input =:= true ->
if Enc18@input =:= false ->
<<1:1,0:1>>;
Enc18@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc20@input = element(7, Val),
Enc22@input = element(8, Val),
if Enc20@input =:= false ->
if Enc22@input =:= automatic ->
<<0:1,0:1,0:1>>;
Enc22@input =:= manual ->
<<0:1,0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc22@input}}})
end;
Enc20@input =:= true ->
if Enc22@input =:= automatic ->
<<1:1,0:1,0:1>>;
Enc22@input =:= manual ->
<<1:1,0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc22@input}}})
end
end
end,
begin
Enc24@input = element(9, Val),
if Enc24@input =:= asn1_NOVALUE ->
[];
true ->
enc_ConferenceCreateRequest_conductorPrivileges(Enc24@input)
end
end,
begin
Enc26@input = element(10, Val),
if Enc26@input =:= asn1_NOVALUE ->
[];
true ->
enc_ConferenceCreateRequest_conductedPrivileges(Enc26@input)
end
end,
begin
Enc28@input = element(11, Val),
if Enc28@input =:= asn1_NOVALUE ->
[];
true ->
enc_ConferenceCreateRequest_nonConductedPrivileges(Enc28@input)
end
end,
begin
Enc30@input = element(12, Val),
if Enc30@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc31@len = length(Enc30@input),
Enc31@bin = encode_chars_16bit(Enc30@input),
if Enc31@len < 256 ->
[align,
Enc31@len|Enc31@bin]
end
end
end
end,
begin
Enc33@input = element(13, Val),
if Enc33@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc34@len = length(Enc33@input),
Enc34@bin = encode_chars_16bit(Enc33@input),
if Enc34@len < 256 ->
[align,
Enc34@len|Enc34@bin]
end
end
end
end,
begin
Enc36@input = element(14, Val),
if Enc36@input =:= asn1_NOVALUE ->
[];
true ->
enc_UserData(Enc36@input)
end
end,
Extensions,
begin
Enc38@input = element(15, Val),
if Enc38@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc39@output = enc_ConferencePriority(Enc38@input),
Enc40@bin = complete(Enc39@output),
Enc40@len = byte_size(Enc40@bin),
if Enc40@len < 128 ->
[align,
Enc40@len|Enc40@bin];
Enc40@len < 16384 ->
[align,
<<2:2,Enc40@len:14>>|Enc40@bin];
true ->
[align|encode_fragmented(Enc40@bin, 8)]
end
end
end
end|begin
Enc42@input = element(16, Val),
if Enc42@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc43@output = enc_ConferenceMode(Enc42@input),
Enc44@bin = complete(Enc43@output),
Enc44@len = byte_size(Enc44@bin),
if Enc44@len < 128 ->
[align,
Enc44@len|Enc44@bin];
Enc44@len < 16384 ->
[align,
<<2:2,Enc44@len:14>>|Enc44@bin];
true ->
[align|encode_fragmented(Enc44@bin, 8)]
end
end
end
end].
'enc_ConferenceCreateRequest_conductorPrivileges'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[if Comp =:= terminate ->
<<0:1,0:3>>;
Comp =:= ejectUser ->
<<0:1,1:3>>;
Comp =:= add ->
<<0:1,2:3>>;
Comp =:= lockUnlock ->
<<0:1,3:3>>;
Comp =:= transfer ->
<<0:1,4:3>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]].


dec_ConferenceCreateRequest_conductorPrivileges(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components13(V1@V0, V1@Buf1, []).

'enc_ConferenceCreateRequest_conductedPrivileges'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[if Comp =:= terminate ->
<<0:1,0:3>>;
Comp =:= ejectUser ->
<<0:1,1:3>>;
Comp =:= add ->
<<0:1,2:3>>;
Comp =:= lockUnlock ->
<<0:1,3:3>>;
Comp =:= transfer ->
<<0:1,4:3>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]].


dec_ConferenceCreateRequest_conductedPrivileges(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components14(V1@V0, V1@Buf1, []).

'enc_ConferenceCreateRequest_nonConductedPrivileges'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[if Comp =:= terminate ->
<<0:1,0:3>>;
Comp =:= ejectUser ->
<<0:1,1:3>>;
Comp =:= add ->
<<0:1,2:3>>;
Comp =:= lockUnlock ->
<<0:1,3:3>>;
Comp =:= transfer ->
<<0:1,4:3>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]].


dec_ConferenceCreateRequest_nonConductedPrivileges(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components15(V1@V0, V1@Buf1, []).



dec_ConferenceCreateRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ConferenceName
{Term1,Bytes3} = dec_ConferenceName(Bytes2),

%% attribute number 2 with type Password
{Term2,Bytes4} = case (Opt bsr 7) band 1 of
1 ->
dec_Password(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type Password
{Term3,Bytes5} = case (Opt bsr 6) band 1 of
1 ->
dec_Password(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes6} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes5,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes7} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes6,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes8} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes7,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 7 with type ENUMERATED
{Term7,Bytes9} = begin
{V6@V0,V6@Buf1} = case Bytes8 of
<<0:1,V6@V3:1/unsigned-unit:1,V6@Buf4/bitstring>> ->
V6@Int5 = case V6@V3 of
0 -> automatic;
1 -> manual
end,
{V6@Int5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V6,V6@Buf7};
<<1:1,V6@Buf5/bitstring>> ->
V6@Pad9 = bit_size(V6@Buf5) band 7,
{V6@V6,V6@Buf7} = case V6@Buf5 of
<<_:V6@Pad9,0:1,V6@V11:7,V6@Buf12/bitstring>> when V6@V11 =/= 0 ->
{V6@V11,V6@Buf12};
<<_:V6@Pad9,1:1,0:1,V6@V12:14,V6@Buf13/bitstring>> when V6@V12 =/= 0 ->
{V6@V12,V6@Buf13}
end,
<<V6@V14:V6@V6/unit:8,V6@Buf15/bitstring>> = V6@Buf7,
{V6@V14,V6@Buf15}
end,
V6@Int16 = case V6@V3 of
_ -> {asn1_enum,V6@V3}
end,
{V6@Int16,V6@Buf4}
end,
{V6@V0,V6@Buf1}
end,

%% attribute number 8 with type SET OF
{Term8,Bytes10} = case (Opt bsr 5) band 1 of
1 ->
'dec_ConferenceCreateRequest_conductorPrivileges'(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 9 with type SET OF
{Term9,Bytes11} = case (Opt bsr 4) band 1 of
1 ->
'dec_ConferenceCreateRequest_conductedPrivileges'(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 10 with type SET OF
{Term10,Bytes12} = case (Opt bsr 3) band 1 of
1 ->
'dec_ConferenceCreateRequest_nonConductedPrivileges'(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 11 with type BMPString
{Term11,Bytes13} = case (Opt bsr 2) band 1 of
1 ->
begin
V7@Pad2 = bit_size(Bytes12) band 7,
<<_:V7@Pad2,V7@V0:1/unsigned-unit:8,V7@V4:V7@V0/binary-unit:16,V7@Buf5/bitstring>> = Bytes12,
{V7@V6,V7@Buf7}  = {decode_chars_16bit(V7@V4),V7@Buf5},
{V7@V6,V7@Buf7}
end;
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 12 with type BMPString
{Term12,Bytes14} = case (Opt bsr 1) band 1 of
1 ->
begin
V8@Pad2 = bit_size(Bytes13) band 7,
<<_:V8@Pad2,V8@V0:1/unsigned-unit:8,V8@V4:V8@V0/binary-unit:16,V8@Buf5/bitstring>> = Bytes13,
{V8@V6,V8@Buf7}  = {decode_chars_16bit(V8@V4),V8@Buf5},
{V8@V6,V8@Buf7}
end;
0 ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 13 with type UserData
{Term13,Bytes15} = case Opt band 1 of
1 ->
dec_UserData(Bytes14);
0 ->
{asn1_NOVALUE,Bytes14}
end,

%% Extensions
{Extensions,Bytes16} = case Ext of
0 -> {<<>>,Bytes15};
1 ->
{V9@V0,V9@Buf1} = case Bytes15 of
<<0:1,V9@V3:6,V9@Buf4/bitstring>> ->
V9@Add5 = V9@V3 + 1,
{V9@Add5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
V9@Pad6 = bit_size(V9@Buf2) band 7,
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<_:V9@Pad6,0:1,V9@V8:7,V9@Buf9/bitstring>> when V9@V8 =/= 0 ->
{V9@V8,V9@Buf9};
<<_:V9@Pad6,1:1,0:1,V9@V9:14,V9@Buf10/bitstring>> when V9@V9 =/= 0 ->
{V9@V9,V9@Buf10}
end,
{V9@V3,V9@Buf4}
end,
<<V9@V11:V9@V0/bitstring-unit:1,V9@Buf12/bitstring>> = V9@Buf1,
{V9@V11,V9@Buf12}
end,

%% attribute number 14 with type ConferencePriority
{Term14,Bytes17} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes16) band 7,
{V10@V0,V10@Buf1} = case Bytes16 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx14,_} = dec_ConferencePriority(V10@V0),
{TmpValx14,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 15 with type ConferenceMode
{Term15,Bytes18} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes17) band 7,
{V11@V0,V11@Buf1} = case Bytes17 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx15,_} = dec_ConferenceMode(V11@V0),
{TmpValx15,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes17}
end,
Bytes19= skipextensions(Bytes18, 3, Extensions),
{{'ConferenceCreateRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15},Bytes19}.

'enc_ConferenceCreateResponse'(Val) ->
[begin
Enc1@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@input = element(2, Val),
Enc3@input@sub = Enc3@input - 1001,
if 0 =< Enc3@input@sub, Enc3@input@sub < 64535 ->
<<Enc3@input@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
encode_unconstrained_number(Enc5@input)
end,
begin
Enc7@input = element(4, Val),
if Enc7@input =:= success ->
<<0:1,0:3>>;
Enc7@input =:= userRejected ->
<<0:1,1:3>>;
Enc7@input =:= resourcesNotAvailable ->
<<0:1,2:3>>;
Enc7@input =:= rejectedForSymmetryBreaking ->
<<0:1,3:3>>;
Enc7@input =:= lockedConferenceNotSupported ->
<<0:1,4:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end|begin
Enc9@input = element(5, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
enc_UserData(Enc9@input)
end
end].


dec_ConferenceCreateResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1001,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:7,V4@Buf4/bitstring>> when V4@V3 =/= 0 ->
{V4@V3,V4@Buf4};
<<1:1,0:1,V4@V4:14,V4@Buf5/bitstring>> when V4@V4 =/= 0 ->
{V4@V4,V4@Buf5}
end,
<<V4@V6:V4@V0/signed-unit:8,V4@Buf7/bitstring>> = V4@Buf1,
{V4@V6,V4@Buf7}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = begin
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:3/unsigned-unit:1,V5@Buf4/bitstring>> ->
V5@Int5 = case V5@V3 of
0 -> success;
1 -> userRejected;
2 -> resourcesNotAvailable;
3 -> rejectedForSymmetryBreaking;
4 -> lockedConferenceNotSupported;
_ -> exit({error,{asn1,{decode_enumerated,{V5@V3,[success,userRejected,resourcesNotAvailable,rejectedForSymmetryBreaking,lockedConferenceNotSupported]}}}})
end,
{V5@Int5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,V5@Buf5/bitstring>> ->
{V5@V6,V5@Buf7} = case V5@Buf5 of
<<_:6,0:1,V5@V10:7,V5@Buf11/bitstring>> when V5@V10 =/= 0 ->
{V5@V10,V5@Buf11};
<<_:6,1:1,0:1,V5@V11:14,V5@Buf12/bitstring>> when V5@V11 =/= 0 ->
{V5@V11,V5@Buf12}
end,
<<V5@V13:V5@V6/unit:8,V5@Buf14/bitstring>> = V5@Buf7,
{V5@V13,V5@Buf14}
end,
V5@Int15 = case V5@V3 of
_ -> {asn1_enum,V5@V3}
end,
{V5@Int15,V5@Buf4}
end,
{V5@V0,V5@Buf1}
end,

%% attribute number 4 with type UserData
{Term4,Bytes6} = case Opt band 1 of
1 ->
dec_UserData(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'ConferenceCreateResponse',Term1,Term2,Term3,Term4},Bytes8}.

'enc_ConferenceQueryRequest'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@input = element(2, Val),
if Enc4@input =:= terminal ->
<<0:1,0:2>>;
Enc4@input =:= multiportTerminal ->
<<0:1,1:2>>;
Enc4@input =:= mcu ->
<<0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end,
begin
Enc6@input = element(3, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
enc_AsymmetryIndicator(Enc6@input)
end
end|begin
Enc8@input = element(4, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
true ->
enc_UserData(Enc8@input)
end
end].


dec_ConferenceQueryRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:2/unsigned-unit:1,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> terminal;
1 -> multiportTerminal;
2 -> mcu;
_ -> exit({error,{asn1,{decode_enumerated,{V3@V3,[terminal,multiportTerminal,mcu]}}}})
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
V3@Pad9 = bit_size(V3@Buf5) band 7,
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<_:V3@Pad9,0:1,V3@V11:7,V3@Buf12/bitstring>> when V3@V11 =/= 0 ->
{V3@V11,V3@Buf12};
<<_:V3@Pad9,1:1,0:1,V3@V12:14,V3@Buf13/bitstring>> when V3@V12 =/= 0 ->
{V3@V12,V3@Buf13}
end,
<<V3@V14:V3@V6/unit:8,V3@Buf15/bitstring>> = V3@Buf7,
{V3@V14,V3@Buf15}
end,
V3@Int16 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int16,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type AsymmetryIndicator
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
dec_AsymmetryIndicator(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type UserData
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_UserData(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'ConferenceQueryRequest',Term1,Term2,Term3},Bytes7}.

'enc_ConferenceQueryResponse'(Val) ->
Enc3@bitmap = extension_bitmap(Val, 7, 9),
Extensions = if Enc3@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc3@bitmap:2>>
end,
[begin
Enc1@input = element(3, Val),
if Extensions =:= [] ->
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@input = element(6, Val),
Enc5@input = element(2, Val),
if Enc2@input =:= asn1_NOVALUE ->
if Enc5@input =:= terminal ->
<<0:1,0:1,0:2>>;
Enc5@input =:= multiportTerminal ->
<<0:1,0:1,1:2>>;
Enc5@input =:= mcu ->
<<0:1,0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end;
true ->
if Enc5@input =:= terminal ->
<<1:1,0:1,0:2>>;
Enc5@input =:= multiportTerminal ->
<<1:1,0:1,1:2>>;
Enc5@input =:= mcu ->
<<1:1,0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end
end,
begin
Enc7@input = element(3, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
enc_AsymmetryIndicator(Enc7@input)
end
end,
begin
Enc9@input = element(4, Val),
enc_ConferenceQueryResponse_conferenceList(Enc9@input)
end,
begin
Enc10@input = element(5, Val),
if Enc10@input =:= success ->
<<0:1,0:1>>;
Enc10@input =:= userRejected ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@input}}})
end
end,
begin
Enc12@input = element(6, Val),
if Enc12@input =:= asn1_NOVALUE ->
[];
true ->
enc_UserData(Enc12@input)
end
end,
Extensions,
begin
Enc14@input = element(7, Val),
if Enc14@input =:= asn1_NOVALUE ->
[];
Enc14@input =:= false ->
[align|<<1:8,0:1,0:7>>];
Enc14@input =:= true ->
[align|<<1:8,1:1,0:7>>]
end
end|begin
Enc17@input = element(8, Val),
if Enc17@input =:= asn1_NOVALUE ->
[];
Enc17@input =:= false ->
[align|<<1:8,0:1,0:7>>];
Enc17@input =:= true ->
[align|<<1:8,1:1,0:7>>]
end
end].
'enc_ConferenceQueryResponse_conferenceList'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ConferenceDescriptor(Comp) || Comp <- Val]].


dec_ConferenceQueryResponse_conferenceList(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components16(V1@V0, V1@Buf1, []).



dec_ConferenceQueryResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:2/unsigned-unit:1,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> terminal;
1 -> multiportTerminal;
2 -> mcu;
_ -> exit({error,{asn1,{decode_enumerated,{V3@V3,[terminal,multiportTerminal,mcu]}}}})
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
V3@Pad9 = bit_size(V3@Buf5) band 7,
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<_:V3@Pad9,0:1,V3@V11:7,V3@Buf12/bitstring>> when V3@V11 =/= 0 ->
{V3@V11,V3@Buf12};
<<_:V3@Pad9,1:1,0:1,V3@V12:14,V3@Buf13/bitstring>> when V3@V12 =/= 0 ->
{V3@V12,V3@Buf13}
end,
<<V3@V14:V3@V6/unit:8,V3@Buf15/bitstring>> = V3@Buf7,
{V3@V14,V3@Buf15}
end,
V3@Int16 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int16,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type AsymmetryIndicator
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
dec_AsymmetryIndicator(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SET OF
{Term3,Bytes5} = 'dec_ConferenceQueryResponse_conferenceList'(Bytes4),

%% attribute number 4 with type ENUMERATED
{Term4,Bytes6} = begin
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:1/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> success;
1 -> userRejected
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
V4@Pad9 = bit_size(V4@Buf5) band 7,
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<_:V4@Pad9,0:1,V4@V11:7,V4@Buf12/bitstring>> when V4@V11 =/= 0 ->
{V4@V11,V4@Buf12};
<<_:V4@Pad9,1:1,0:1,V4@V12:14,V4@Buf13/bitstring>> when V4@V12 =/= 0 ->
{V4@V12,V4@Buf13}
end,
<<V4@V14:V4@V6/unit:8,V4@Buf15/bitstring>> = V4@Buf7,
{V4@V14,V4@Buf15}
end,
V4@Int16 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int16,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,

%% attribute number 5 with type UserData
{Term5,Bytes7} = case Opt band 1 of
1 ->
dec_UserData(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V5@V0,V5@Buf1} = case Bytes7 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes9} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes8) band 7,
{V6@V0,V6@Buf1} = case Bytes8 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx6,_} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = V6@V0,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,
{TmpValx6,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes10} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes9) band 7,
{V8@V0,V8@Buf1} = case Bytes9 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx7,_} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = V8@V0,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,
{TmpValx7,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,
Bytes11= skipextensions(Bytes10, 3, Extensions),
{{'ConferenceQueryResponse',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes11}.

'enc_ConferenceJoinRequest'(Val) ->
Enc8@bitmap = extension_bitmap(Val, 9, 10),
Extensions = if Enc8@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@input = element(2, Val),
if Extensions =:= [] ->
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@input = element(3, Val),
Enc3@input = element(4, Val),
if Enc2@input =:= asn1_NOVALUE ->
if Enc3@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@input = element(5, Val),
Enc5@input = element(6, Val),
if Enc4@input =:= asn1_NOVALUE ->
if Enc5@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc5@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@input = element(7, Val),
Enc7@input = element(8, Val),
if Enc6@input =:= asn1_NOVALUE ->
if Enc7@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc7@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc10@input = element(2, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
true ->
enc_ConferenceNameSelector(Enc10@input)
end
end,
begin
Enc12@input = element(3, Val),
if Enc12@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@len = length(Enc12@input),
Enc13@bin = encode_chars(Enc12@input, 4, {31,{0,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,1,2,3,4,5,6,7,8,9,10}}),
Enc13@len@sub = Enc13@len - 1,
if 0 =< Enc13@len@sub, Enc13@len@sub < 255 ->
[Enc13@len@sub,
align|Enc13@bin]
end
end
end
end,
begin
Enc15@input = element(4, Val),
if Enc15@input =:= asn1_NOVALUE ->
[];
true ->
[align|encode_unconstrained_number(Enc15@input)]
end
end,
begin
Enc18@input = element(5, Val),
if Enc18@input =:= asn1_NOVALUE ->
[];
true ->
enc_PasswordChallengeRequestResponse(Enc18@input)
end
end,
begin
Enc20@input = element(6, Val),
if Enc20@input =:= asn1_NOVALUE ->
[];
true ->
enc_PasswordSelector(Enc20@input)
end
end,
begin
Enc22@input = element(7, Val),
if Enc22@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@len = length(Enc22@input),
Enc23@bin = encode_chars_16bit(Enc22@input),
if Enc23@len < 256 ->
[align,
Enc23@len|Enc23@bin]
end
end
end
end,
begin
Enc25@input = element(8, Val),
if Enc25@input =:= asn1_NOVALUE ->
[];
true ->
enc_UserData(Enc25@input)
end
end,
Extensions|begin
Enc27@input = element(9, Val),
if Enc27@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc28@output = enc_NodeCategory(Enc27@input),
Enc29@bin = complete(Enc28@output),
Enc29@len = byte_size(Enc29@bin),
if Enc29@len < 128 ->
[align,
Enc29@len|Enc29@bin];
Enc29@len < 16384 ->
[align,
<<2:2,Enc29@len:14>>|Enc29@bin];
true ->
[align|encode_fragmented(Enc29@bin, 8)]
end
end
end
end].


dec_ConferenceJoinRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ConferenceNameSelector
{Term1,Bytes3} = case (Opt bsr 6) band 1 of
1 ->
dec_ConferenceNameSelector(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type NumericString
{Term2,Bytes4} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V3@V0:8/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:4,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V7,V3@Buf8}  = {decode_chars(V3@V3, 4, {32,48,49,50,51,52,53,54,55,56,57}),V3@Buf4},
{V3@V7,V3@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = case (Opt bsr 4) band 1 of
1 ->
begin
V4@Pad3 = bit_size(Bytes4) band 7,
{V4@V0,V4@Buf1} = case Bytes4 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@Buf6/bitstring>> when V4@V5 =/= 0 ->
{V4@V5,V4@Buf6};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7}
end,
<<V4@V8:V4@V0/signed-unit:8,V4@Buf9/bitstring>> = V4@Buf1,
{V4@V8,V4@Buf9}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type PasswordChallengeRequestResponse
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
dec_PasswordChallengeRequestResponse(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type PasswordSelector
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
dec_PasswordSelector(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type BMPString
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
begin
V5@Pad2 = bit_size(Bytes7) band 7,
<<_:V5@Pad2,V5@V0:1/unsigned-unit:8,V5@V4:V5@V0/binary-unit:16,V5@Buf5/bitstring>> = Bytes7,
{V5@V6,V5@Buf7}  = {decode_chars_16bit(V5@V4),V5@Buf5},
{V5@V6,V5@Buf7}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type UserData
{Term7,Bytes9} = case Opt band 1 of
1 ->
dec_UserData(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V6@V0,V6@Buf1} = case Bytes9 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,

%% attribute number 8 with type NodeCategory
{Term8,Bytes11} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes10) band 7,
{V7@V0,V7@Buf1} = case Bytes10 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx8,_} = dec_NodeCategory(V7@V0),
{TmpValx8,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,
Bytes12= skipextensions(Bytes11, 2, Extensions),
{{'ConferenceJoinRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes12}.

'enc_ConferenceJoinResponse'(Val) ->
Enc9@bitmap = extension_bitmap(Val, 18, 20),
Extensions = if Enc9@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc9@bitmap:2>>
end,
[begin
Enc1@input = element(2, Val),
if Extensions =:= [] ->
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@input = element(5, Val),
Enc3@input = element(11, Val),
if Enc2@input =:= asn1_NOVALUE ->
if Enc3@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@input = element(12, Val),
Enc5@input = element(13, Val),
if Enc4@input =:= asn1_NOVALUE ->
if Enc5@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc5@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@input = element(14, Val),
Enc7@input = element(15, Val),
if Enc6@input =:= asn1_NOVALUE ->
if Enc7@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc7@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc8@input = element(17, Val),
if Enc8@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc11@input = element(2, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc11@input@sub = Enc11@input - 1001,
if 0 =< Enc11@input@sub, Enc11@input@sub < 64535 ->
[align|<<Enc11@input@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc11@input}}})
end
end
end
end,
align,
begin
Enc14@input = element(3, Val),
Enc14@input@sub = Enc14@input - 1001,
if 0 =< Enc14@input@sub, Enc14@input@sub < 64535 ->
<<Enc14@input@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc14@input}}})
end
end,
begin
Enc16@input = element(4, Val),
encode_unconstrained_number(Enc16@input)
end,
begin
Enc18@input = element(5, Val),
if Enc18@input =:= asn1_NOVALUE ->
[];
true ->
enc_ConferenceNameSelector(Enc18@input)
end
end,
begin
Enc20@input = element(6, Val),
Enc22@input = element(7, Val),
if Enc20@input =:= false ->
if Enc22@input =:= false ->
<<0:1,0:1>>;
Enc22@input =:= true ->
<<0:1,1:1>>
end;
Enc20@input =:= true ->
if Enc22@input =:= false ->
<<1:1,0:1>>;
Enc22@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc24@input = element(8, Val),
Enc26@input = element(9, Val),
if Enc24@input =:= false ->
if Enc26@input =:= false ->
<<0:1,0:1>>;
Enc26@input =:= true ->
<<0:1,1:1>>
end;
Enc24@input =:= true ->
if Enc26@input =:= false ->
<<1:1,0:1>>;
Enc26@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc28@input = element(10, Val),
if Enc28@input =:= automatic ->
<<0:1,0:1>>;
Enc28@input =:= manual ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc28@input}}})
end
end,
begin
Enc30@input = element(11, Val),
if Enc30@input =:= asn1_NOVALUE ->
[];
true ->
enc_ConferenceJoinResponse_conductorPrivileges(Enc30@input)
end
end,
begin
Enc32@input = element(12, Val),
if Enc32@input =:= asn1_NOVALUE ->
[];
true ->
enc_ConferenceJoinResponse_conductedPrivileges(Enc32@input)
end
end,
begin
Enc34@input = element(13, Val),
if Enc34@input =:= asn1_NOVALUE ->
[];
true ->
enc_ConferenceJoinResponse_nonConductedPrivileges(Enc34@input)
end
end,
begin
Enc36@input = element(14, Val),
if Enc36@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc37@len = length(Enc36@input),
Enc37@bin = encode_chars_16bit(Enc36@input),
if Enc37@len < 256 ->
[align,
Enc37@len|Enc37@bin]
end
end
end
end,
begin
Enc39@input = element(15, Val),
if Enc39@input =:= asn1_NOVALUE ->
[];
true ->
enc_PasswordChallengeRequestResponse(Enc39@input)
end
end,
begin
Enc41@input = element(16, Val),
if Enc41@input =:= success ->
<<0:1,0:3>>;
Enc41@input =:= userRejected ->
<<0:1,1:3>>;
Enc41@input =:= invalidConference ->
<<0:1,2:3>>;
Enc41@input =:= invalidPassword ->
<<0:1,3:3>>;
Enc41@input =:= invalidConvenerPassword ->
<<0:1,4:3>>;
Enc41@input =:= challengeResponseRequired ->
<<0:1,5:3>>;
Enc41@input =:= invalidChallengeResponse ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc41@input}}})
end
end,
begin
Enc43@input = element(17, Val),
if Enc43@input =:= asn1_NOVALUE ->
[];
true ->
enc_UserData(Enc43@input)
end
end,
Extensions,
begin
Enc45@input = element(18, Val),
if Enc45@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc46@output = enc_NodeCategory(Enc45@input),
Enc47@bin = complete(Enc46@output),
Enc47@len = byte_size(Enc47@bin),
if Enc47@len < 128 ->
[align,
Enc47@len|Enc47@bin];
Enc47@len < 16384 ->
[align,
<<2:2,Enc47@len:14>>|Enc47@bin];
true ->
[align|encode_fragmented(Enc47@bin, 8)]
end
end
end
end|begin
Enc49@input = element(19, Val),
if Enc49@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc50@output = enc_ConferenceMode(Enc49@input),
Enc51@bin = complete(Enc50@output),
Enc51@len = byte_size(Enc51@bin),
if Enc51@len < 128 ->
[align,
Enc51@len|Enc51@bin];
Enc51@len < 16384 ->
[align,
<<2:2,Enc51@len:14>>|Enc51@bin];
true ->
[align|encode_fragmented(Enc51@bin, 8)]
end
end
end
end].
'enc_ConferenceJoinResponse_conductorPrivileges'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[if Comp =:= terminate ->
<<0:1,0:3>>;
Comp =:= ejectUser ->
<<0:1,1:3>>;
Comp =:= add ->
<<0:1,2:3>>;
Comp =:= lockUnlock ->
<<0:1,3:3>>;
Comp =:= transfer ->
<<0:1,4:3>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]].


dec_ConferenceJoinResponse_conductorPrivileges(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components17(V1@V0, V1@Buf1, []).

'enc_ConferenceJoinResponse_conductedPrivileges'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[if Comp =:= terminate ->
<<0:1,0:3>>;
Comp =:= ejectUser ->
<<0:1,1:3>>;
Comp =:= add ->
<<0:1,2:3>>;
Comp =:= lockUnlock ->
<<0:1,3:3>>;
Comp =:= transfer ->
<<0:1,4:3>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]].


dec_ConferenceJoinResponse_conductedPrivileges(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components18(V1@V0, V1@Buf1, []).

'enc_ConferenceJoinResponse_nonConductedPrivileges'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[if Comp =:= terminate ->
<<0:1,0:3>>;
Comp =:= ejectUser ->
<<0:1,1:3>>;
Comp =:= add ->
<<0:1,2:3>>;
Comp =:= lockUnlock ->
<<0:1,3:3>>;
Comp =:= transfer ->
<<0:1,4:3>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]].


dec_ConferenceJoinResponse_nonConductedPrivileges(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components19(V1@V0, V1@Buf1, []).



dec_ConferenceJoinResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case (Opt bsr 7) band 1 of
1 ->
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1001,
{V3@Add4,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
V4@Pad2 = bit_size(Bytes3) band 7,
<<_:V4@Pad2,V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Add4 = V4@V0 + 1001,
{V4@Add4,V4@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = begin
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:7,V5@Buf4/bitstring>> when V5@V3 =/= 0 ->
{V5@V3,V5@Buf4};
<<1:1,0:1,V5@V4:14,V5@Buf5/bitstring>> when V5@V4 =/= 0 ->
{V5@V4,V5@Buf5}
end,
<<V5@V6:V5@V0/signed-unit:8,V5@Buf7/bitstring>> = V5@Buf1,
{V5@V6,V5@Buf7}
end,

%% attribute number 4 with type ConferenceNameSelector
{Term4,Bytes6} = case (Opt bsr 6) band 1 of
1 ->
dec_ConferenceNameSelector(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes7} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes6,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes8} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes7,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes9} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes8,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes10} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes9,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% attribute number 9 with type ENUMERATED
{Term9,Bytes11} = begin
{V10@V0,V10@Buf1} = case Bytes10 of
<<0:1,V10@V3:1/unsigned-unit:1,V10@Buf4/bitstring>> ->
V10@Int5 = case V10@V3 of
0 -> automatic;
1 -> manual
end,
{V10@Int5,V10@Buf4};
<<1:1,V10@Buf2/bitstring>> ->
{V10@V3,V10@Buf4} = case V10@Buf2 of
<<0:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V6,V10@Buf7};
<<1:1,V10@Buf5/bitstring>> ->
V10@Pad9 = bit_size(V10@Buf5) band 7,
{V10@V6,V10@Buf7} = case V10@Buf5 of
<<_:V10@Pad9,0:1,V10@V11:7,V10@Buf12/bitstring>> when V10@V11 =/= 0 ->
{V10@V11,V10@Buf12};
<<_:V10@Pad9,1:1,0:1,V10@V12:14,V10@Buf13/bitstring>> when V10@V12 =/= 0 ->
{V10@V12,V10@Buf13}
end,
<<V10@V14:V10@V6/unit:8,V10@Buf15/bitstring>> = V10@Buf7,
{V10@V14,V10@Buf15}
end,
V10@Int16 = case V10@V3 of
_ -> {asn1_enum,V10@V3}
end,
{V10@Int16,V10@Buf4}
end,
{V10@V0,V10@Buf1}
end,

%% attribute number 10 with type SET OF
{Term10,Bytes12} = case (Opt bsr 5) band 1 of
1 ->
'dec_ConferenceJoinResponse_conductorPrivileges'(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 11 with type SET OF
{Term11,Bytes13} = case (Opt bsr 4) band 1 of
1 ->
'dec_ConferenceJoinResponse_conductedPrivileges'(Bytes12);
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 12 with type SET OF
{Term12,Bytes14} = case (Opt bsr 3) band 1 of
1 ->
'dec_ConferenceJoinResponse_nonConductedPrivileges'(Bytes13);
0 ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 13 with type BMPString
{Term13,Bytes15} = case (Opt bsr 2) band 1 of
1 ->
begin
V11@Pad2 = bit_size(Bytes14) band 7,
<<_:V11@Pad2,V11@V0:1/unsigned-unit:8,V11@V4:V11@V0/binary-unit:16,V11@Buf5/bitstring>> = Bytes14,
{V11@V6,V11@Buf7}  = {decode_chars_16bit(V11@V4),V11@Buf5},
{V11@V6,V11@Buf7}
end;
0 ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 14 with type PasswordChallengeRequestResponse
{Term14,Bytes16} = case (Opt bsr 1) band 1 of
1 ->
dec_PasswordChallengeRequestResponse(Bytes15);
0 ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 15 with type ENUMERATED
{Term15,Bytes17} = begin
{V12@V0,V12@Buf1} = case Bytes16 of
<<0:1,V12@V3:3/unsigned-unit:1,V12@Buf4/bitstring>> ->
V12@Int5 = case V12@V3 of
0 -> success;
1 -> userRejected;
2 -> invalidConference;
3 -> invalidPassword;
4 -> invalidConvenerPassword;
5 -> challengeResponseRequired;
6 -> invalidChallengeResponse;
_ -> exit({error,{asn1,{decode_enumerated,{V12@V3,[success,userRejected,invalidConference,invalidPassword,invalidConvenerPassword,challengeResponseRequired,invalidChallengeResponse]}}}})
end,
{V12@Int5,V12@Buf4};
<<1:1,V12@Buf2/bitstring>> ->
{V12@V3,V12@Buf4} = case V12@Buf2 of
<<0:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V6,V12@Buf7};
<<1:1,V12@Buf5/bitstring>> ->
V12@Pad9 = bit_size(V12@Buf5) band 7,
{V12@V6,V12@Buf7} = case V12@Buf5 of
<<_:V12@Pad9,0:1,V12@V11:7,V12@Buf12/bitstring>> when V12@V11 =/= 0 ->
{V12@V11,V12@Buf12};
<<_:V12@Pad9,1:1,0:1,V12@V12:14,V12@Buf13/bitstring>> when V12@V12 =/= 0 ->
{V12@V12,V12@Buf13}
end,
<<V12@V14:V12@V6/unit:8,V12@Buf15/bitstring>> = V12@Buf7,
{V12@V14,V12@Buf15}
end,
V12@Int16 = case V12@V3 of
_ -> {asn1_enum,V12@V3}
end,
{V12@Int16,V12@Buf4}
end,
{V12@V0,V12@Buf1}
end,

%% attribute number 16 with type UserData
{Term16,Bytes18} = case Opt band 1 of
1 ->
dec_UserData(Bytes17);
0 ->
{asn1_NOVALUE,Bytes17}
end,

%% Extensions
{Extensions,Bytes19} = case Ext of
0 -> {<<>>,Bytes18};
1 ->
{V13@V0,V13@Buf1} = case Bytes18 of
<<0:1,V13@V3:6,V13@Buf4/bitstring>> ->
V13@Add5 = V13@V3 + 1,
{V13@Add5,V13@Buf4};
<<1:1,V13@Buf2/bitstring>> ->
V13@Pad6 = bit_size(V13@Buf2) band 7,
{V13@V3,V13@Buf4} = case V13@Buf2 of
<<_:V13@Pad6,0:1,V13@V8:7,V13@Buf9/bitstring>> when V13@V8 =/= 0 ->
{V13@V8,V13@Buf9};
<<_:V13@Pad6,1:1,0:1,V13@V9:14,V13@Buf10/bitstring>> when V13@V9 =/= 0 ->
{V13@V9,V13@Buf10}
end,
{V13@V3,V13@Buf4}
end,
<<V13@V11:V13@V0/bitstring-unit:1,V13@Buf12/bitstring>> = V13@Buf1,
{V13@V11,V13@Buf12}
end,

%% attribute number 17 with type NodeCategory
{Term17,Bytes20} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes19) band 7,
{V14@V0,V14@Buf1} = case Bytes19 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx17,_} = dec_NodeCategory(V14@V0),
{TmpValx17,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute number 18 with type ConferenceMode
{Term18,Bytes21} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V15@Pad3 = bit_size(Bytes20) band 7,
{V15@V0,V15@Buf1} = case Bytes20 of
<<_:V15@Pad3,0:1,V15@V5:7,V15@V7:V15@V5/binary-unit:8,V15@Buf8/bitstring>> ->
{V15@V7,V15@Buf8};
<<_:V15@Pad3,1:1,0:1,V15@V6:14,V15@V8:V15@V6/binary-unit:8,V15@Buf9/bitstring>> ->
{V15@V8,V15@Buf9};
<<_:V15@Pad3,1:1,1:1,V15@V6:6,V15@Buf7/bitstring>> ->
{V15@V8,V15@Buf9}  = decode_fragmented(V15@V6, V15@Buf7, 8),
{V15@V8,V15@Buf9}
end,
{TmpValx18,_} = dec_ConferenceMode(V15@V0),
{TmpValx18,V15@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes20}
end,
Bytes22= skipextensions(Bytes21, 3, Extensions),
{{'ConferenceJoinResponse',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18},Bytes22}.

'enc_ConferenceInviteRequest'(Val) ->
Enc7@bitmap = extension_bitmap(Val, 17, 20),
Extensions = if Enc7@bitmap =:= 0 ->
[];
true ->
<<2:7,Enc7@bitmap:3>>
end,
[begin
Enc1@input = element(11, Val),
if Extensions =:= [] ->
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@input = element(12, Val),
Enc3@input = element(13, Val),
if Enc2@input =:= asn1_NOVALUE ->
if Enc3@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@input = element(14, Val),
Enc5@input = element(15, Val),
if Enc4@input =:= asn1_NOVALUE ->
if Enc5@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc5@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@input = element(16, Val),
if Enc6@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc9@input = element(2, Val),
enc_ConferenceName(Enc9@input)
end,
align,
begin
Enc10@input = element(3, Val),
Enc10@input@sub = Enc10@input - 1001,
if 0 =< Enc10@input@sub, Enc10@input@sub < 64535 ->
<<Enc10@input@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@input}}})
end
end,
begin
Enc12@input = element(4, Val),
Enc12@input@sub = Enc12@input - 1001,
if 0 =< Enc12@input@sub, Enc12@input@sub < 64535 ->
<<Enc12@input@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc12@input}}})
end
end,
begin
Enc14@input = element(5, Val),
encode_unconstrained_number(Enc14@input)
end,
begin
Enc16@input = element(6, Val),
Enc18@input = element(7, Val),
if Enc16@input =:= false ->
if Enc18@input =:= false ->
<<0:1,0:1>>;
Enc18@input =:= true ->
<<0:1,1:1>>
end;
Enc16@input =:= true ->
if Enc18@input =:= false ->
<<1:1,0:1>>;
Enc18@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc20@input = element(8, Val),
Enc22@input = element(9, Val),
if Enc20@input =:= false ->
if Enc22@input =:= false ->
<<0:1,0:1>>;
Enc22@input =:= true ->
<<0:1,1:1>>
end;
Enc20@input =:= true ->
if Enc22@input =:= false ->
<<1:1,0:1>>;
Enc22@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc24@input = element(10, Val),
if Enc24@input =:= automatic ->
<<0:1,0:1>>;
Enc24@input =:= manual ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc24@input}}})
end
end,
begin
Enc26@input = element(11, Val),
if Enc26@input =:= asn1_NOVALUE ->
[];
true ->
enc_ConferenceInviteRequest_conductorPrivileges(Enc26@input)
end
end,
begin
Enc28@input = element(12, Val),
if Enc28@input =:= asn1_NOVALUE ->
[];
true ->
enc_ConferenceInviteRequest_conductedPrivileges(Enc28@input)
end
end,
begin
Enc30@input = element(13, Val),
if Enc30@input =:= asn1_NOVALUE ->
[];
true ->
enc_ConferenceInviteRequest_nonConductedPrivileges(Enc30@input)
end
end,
begin
Enc32@input = element(14, Val),
if Enc32@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc33@len = length(Enc32@input),
Enc33@bin = encode_chars_16bit(Enc32@input),
if Enc33@len < 256 ->
[align,
Enc33@len|Enc33@bin]
end
end
end
end,
begin
Enc35@input = element(15, Val),
if Enc35@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc36@len = length(Enc35@input),
Enc36@bin = encode_chars_16bit(Enc35@input),
if Enc36@len < 256 ->
[align,
Enc36@len|Enc36@bin]
end
end
end
end,
begin
Enc38@input = element(16, Val),
if Enc38@input =:= asn1_NOVALUE ->
[];
true ->
enc_UserData(Enc38@input)
end
end,
Extensions,
begin
Enc40@input = element(17, Val),
if Enc40@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc41@output = enc_ConferencePriority(Enc40@input),
Enc42@bin = complete(Enc41@output),
Enc42@len = byte_size(Enc42@bin),
if Enc42@len < 128 ->
[align,
Enc42@len|Enc42@bin];
Enc42@len < 16384 ->
[align,
<<2:2,Enc42@len:14>>|Enc42@bin];
true ->
[align|encode_fragmented(Enc42@bin, 8)]
end
end
end
end,
begin
Enc44@input = element(18, Val),
if Enc44@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc45@output = enc_NodeCategory(Enc44@input),
Enc46@bin = complete(Enc45@output),
Enc46@len = byte_size(Enc46@bin),
if Enc46@len < 128 ->
[align,
Enc46@len|Enc46@bin];
Enc46@len < 16384 ->
[align,
<<2:2,Enc46@len:14>>|Enc46@bin];
true ->
[align|encode_fragmented(Enc46@bin, 8)]
end
end
end
end|begin
Enc48@input = element(19, Val),
if Enc48@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc49@output = enc_ConferenceMode(Enc48@input),
Enc50@bin = complete(Enc49@output),
Enc50@len = byte_size(Enc50@bin),
if Enc50@len < 128 ->
[align,
Enc50@len|Enc50@bin];
Enc50@len < 16384 ->
[align,
<<2:2,Enc50@len:14>>|Enc50@bin];
true ->
[align|encode_fragmented(Enc50@bin, 8)]
end
end
end
end].
'enc_ConferenceInviteRequest_conductorPrivileges'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[if Comp =:= terminate ->
<<0:1,0:3>>;
Comp =:= ejectUser ->
<<0:1,1:3>>;
Comp =:= add ->
<<0:1,2:3>>;
Comp =:= lockUnlock ->
<<0:1,3:3>>;
Comp =:= transfer ->
<<0:1,4:3>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]].


dec_ConferenceInviteRequest_conductorPrivileges(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components20(V1@V0, V1@Buf1, []).

'enc_ConferenceInviteRequest_conductedPrivileges'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[if Comp =:= terminate ->
<<0:1,0:3>>;
Comp =:= ejectUser ->
<<0:1,1:3>>;
Comp =:= add ->
<<0:1,2:3>>;
Comp =:= lockUnlock ->
<<0:1,3:3>>;
Comp =:= transfer ->
<<0:1,4:3>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]].


dec_ConferenceInviteRequest_conductedPrivileges(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components21(V1@V0, V1@Buf1, []).

'enc_ConferenceInviteRequest_nonConductedPrivileges'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[if Comp =:= terminate ->
<<0:1,0:3>>;
Comp =:= ejectUser ->
<<0:1,1:3>>;
Comp =:= add ->
<<0:1,2:3>>;
Comp =:= lockUnlock ->
<<0:1,3:3>>;
Comp =:= transfer ->
<<0:1,4:3>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]].


dec_ConferenceInviteRequest_nonConductedPrivileges(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components22(V1@V0, V1@Buf1, []).



dec_ConferenceInviteRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ConferenceName
{Term1,Bytes3} = dec_ConferenceName(Bytes2),

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
V3@Pad2 = bit_size(Bytes3) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes3,
V3@Add4 = V3@V0 + 1001,
{V3@Add4,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = begin
<<V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes4,
V4@Add2 = V4@V0 + 1001,
{V4@Add2,V4@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = begin
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:7,V5@Buf4/bitstring>> when V5@V3 =/= 0 ->
{V5@V3,V5@Buf4};
<<1:1,0:1,V5@V4:14,V5@Buf5/bitstring>> when V5@V4 =/= 0 ->
{V5@V4,V5@Buf5}
end,
<<V5@V6:V5@V0/signed-unit:8,V5@Buf7/bitstring>> = V5@Buf1,
{V5@V6,V5@Buf7}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes7} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes6,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes8} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes7,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes9} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes8,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes10} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes9,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% attribute number 9 with type ENUMERATED
{Term9,Bytes11} = begin
{V10@V0,V10@Buf1} = case Bytes10 of
<<0:1,V10@V3:1/unsigned-unit:1,V10@Buf4/bitstring>> ->
V10@Int5 = case V10@V3 of
0 -> automatic;
1 -> manual
end,
{V10@Int5,V10@Buf4};
<<1:1,V10@Buf2/bitstring>> ->
{V10@V3,V10@Buf4} = case V10@Buf2 of
<<0:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V6,V10@Buf7};
<<1:1,V10@Buf5/bitstring>> ->
{V10@V6,V10@Buf7} = case V10@Buf5 of
<<_:2,0:1,V10@V10:7,V10@Buf11/bitstring>> when V10@V10 =/= 0 ->
{V10@V10,V10@Buf11};
<<_:2,1:1,0:1,V10@V11:14,V10@Buf12/bitstring>> when V10@V11 =/= 0 ->
{V10@V11,V10@Buf12}
end,
<<V10@V13:V10@V6/unit:8,V10@Buf14/bitstring>> = V10@Buf7,
{V10@V13,V10@Buf14}
end,
V10@Int15 = case V10@V3 of
_ -> {asn1_enum,V10@V3}
end,
{V10@Int15,V10@Buf4}
end,
{V10@V0,V10@Buf1}
end,

%% attribute number 10 with type SET OF
{Term10,Bytes12} = case (Opt bsr 5) band 1 of
1 ->
'dec_ConferenceInviteRequest_conductorPrivileges'(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 11 with type SET OF
{Term11,Bytes13} = case (Opt bsr 4) band 1 of
1 ->
'dec_ConferenceInviteRequest_conductedPrivileges'(Bytes12);
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 12 with type SET OF
{Term12,Bytes14} = case (Opt bsr 3) band 1 of
1 ->
'dec_ConferenceInviteRequest_nonConductedPrivileges'(Bytes13);
0 ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 13 with type BMPString
{Term13,Bytes15} = case (Opt bsr 2) band 1 of
1 ->
begin
V11@Pad2 = bit_size(Bytes14) band 7,
<<_:V11@Pad2,V11@V0:1/unsigned-unit:8,V11@V4:V11@V0/binary-unit:16,V11@Buf5/bitstring>> = Bytes14,
{V11@V6,V11@Buf7}  = {decode_chars_16bit(V11@V4),V11@Buf5},
{V11@V6,V11@Buf7}
end;
0 ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 14 with type BMPString
{Term14,Bytes16} = case (Opt bsr 1) band 1 of
1 ->
begin
V12@Pad2 = bit_size(Bytes15) band 7,
<<_:V12@Pad2,V12@V0:1/unsigned-unit:8,V12@V4:V12@V0/binary-unit:16,V12@Buf5/bitstring>> = Bytes15,
{V12@V6,V12@Buf7}  = {decode_chars_16bit(V12@V4),V12@Buf5},
{V12@V6,V12@Buf7}
end;
0 ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 15 with type UserData
{Term15,Bytes17} = case Opt band 1 of
1 ->
dec_UserData(Bytes16);
0 ->
{asn1_NOVALUE,Bytes16}
end,

%% Extensions
{Extensions,Bytes18} = case Ext of
0 -> {<<>>,Bytes17};
1 ->
{V13@V0,V13@Buf1} = case Bytes17 of
<<0:1,V13@V3:6,V13@Buf4/bitstring>> ->
V13@Add5 = V13@V3 + 1,
{V13@Add5,V13@Buf4};
<<1:1,V13@Buf2/bitstring>> ->
V13@Pad6 = bit_size(V13@Buf2) band 7,
{V13@V3,V13@Buf4} = case V13@Buf2 of
<<_:V13@Pad6,0:1,V13@V8:7,V13@Buf9/bitstring>> when V13@V8 =/= 0 ->
{V13@V8,V13@Buf9};
<<_:V13@Pad6,1:1,0:1,V13@V9:14,V13@Buf10/bitstring>> when V13@V9 =/= 0 ->
{V13@V9,V13@Buf10}
end,
{V13@V3,V13@Buf4}
end,
<<V13@V11:V13@V0/bitstring-unit:1,V13@Buf12/bitstring>> = V13@Buf1,
{V13@V11,V13@Buf12}
end,

%% attribute number 16 with type ConferencePriority
{Term16,Bytes19} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes18) band 7,
{V14@V0,V14@Buf1} = case Bytes18 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx16,_} = dec_ConferencePriority(V14@V0),
{TmpValx16,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute number 17 with type NodeCategory
{Term17,Bytes20} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V15@Pad3 = bit_size(Bytes19) band 7,
{V15@V0,V15@Buf1} = case Bytes19 of
<<_:V15@Pad3,0:1,V15@V5:7,V15@V7:V15@V5/binary-unit:8,V15@Buf8/bitstring>> ->
{V15@V7,V15@Buf8};
<<_:V15@Pad3,1:1,0:1,V15@V6:14,V15@V8:V15@V6/binary-unit:8,V15@Buf9/bitstring>> ->
{V15@V8,V15@Buf9};
<<_:V15@Pad3,1:1,1:1,V15@V6:6,V15@Buf7/bitstring>> ->
{V15@V8,V15@Buf9}  = decode_fragmented(V15@V6, V15@Buf7, 8),
{V15@V8,V15@Buf9}
end,
{TmpValx17,_} = dec_NodeCategory(V15@V0),
{TmpValx17,V15@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute number 18 with type ConferenceMode
{Term18,Bytes21} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V16@Pad3 = bit_size(Bytes20) band 7,
{V16@V0,V16@Buf1} = case Bytes20 of
<<_:V16@Pad3,0:1,V16@V5:7,V16@V7:V16@V5/binary-unit:8,V16@Buf8/bitstring>> ->
{V16@V7,V16@Buf8};
<<_:V16@Pad3,1:1,0:1,V16@V6:14,V16@V8:V16@V6/binary-unit:8,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<_:V16@Pad3,1:1,1:1,V16@V6:6,V16@Buf7/bitstring>> ->
{V16@V8,V16@Buf9}  = decode_fragmented(V16@V6, V16@Buf7, 8),
{V16@V8,V16@Buf9}
end,
{TmpValx18,_} = dec_ConferenceMode(V16@V0),
{TmpValx18,V16@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes20}
end,
Bytes22= skipextensions(Bytes21, 4, Extensions),
{{'ConferenceInviteRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18},Bytes22}.

'enc_ConferenceInviteResponse'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc3@input = element(2, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc3@input =:= success ->
<<0:1,0:1,0:1,0:1>>;
Enc3@input =:= userRejected ->
<<0:1,0:1,0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end;
true ->
if Enc3@input =:= success ->
<<0:1,1:1,0:1,0:1>>;
Enc3@input =:= userRejected ->
<<0:1,1:1,0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end
end|begin
Enc5@input = element(3, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
true ->
enc_UserData(Enc5@input)
end
end].


dec_ConferenceInviteResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:1/unsigned-unit:1,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> success;
1 -> userRejected
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
V3@Pad9 = bit_size(V3@Buf5) band 7,
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<_:V3@Pad9,0:1,V3@V11:7,V3@Buf12/bitstring>> when V3@V11 =/= 0 ->
{V3@V11,V3@Buf12};
<<_:V3@Pad9,1:1,0:1,V3@V12:14,V3@Buf13/bitstring>> when V3@V12 =/= 0 ->
{V3@V12,V3@Buf13}
end,
<<V3@V14:V3@V6/unit:8,V3@Buf15/bitstring>> = V3@Buf7,
{V3@V14,V3@Buf15}
end,
V3@Int16 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int16,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type UserData
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_UserData(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'ConferenceInviteResponse',Term1,Term2},Bytes6}.

'enc_ConferenceAddRequest'(Val) ->
Enc3@bitmap = extension_bitmap(Val, 7, 9),
Extensions = if Enc3@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc3@bitmap:2>>
end,
[begin
Enc1@input = element(5, Val),
if Extensions =:= [] ->
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@input = element(6, Val),
if Enc2@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@input = element(2, Val),
enc_NetworkAddress(Enc5@input)
end,
align,
begin
Enc6@input = element(3, Val),
Enc6@input@sub = Enc6@input - 1001,
if 0 =< Enc6@input@sub, Enc6@input@sub < 64535 ->
<<Enc6@input@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end,
begin
Enc8@input = element(4, Val),
encode_unconstrained_number(Enc8@input)
end,
begin
Enc10@input = element(5, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@input@sub = Enc10@input - 1001,
if 0 =< Enc10@input@sub, Enc10@input@sub < 64535 ->
<<Enc10@input@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@input}}})
end
end
end
end,
begin
Enc13@input = element(6, Val),
if Enc13@input =:= asn1_NOVALUE ->
[];
true ->
enc_UserData(Enc13@input)
end
end,
Extensions,
begin
Enc15@input = element(7, Val),
if Enc15@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@output = enc_NodeCategory(Enc15@input),
Enc17@bin = complete(Enc16@output),
Enc17@len = byte_size(Enc17@bin),
if Enc17@len < 128 ->
[align,
Enc17@len|Enc17@bin];
Enc17@len < 16384 ->
[align,
<<2:2,Enc17@len:14>>|Enc17@bin];
true ->
[align|encode_fragmented(Enc17@bin, 8)]
end
end
end
end|begin
Enc19@input = element(8, Val),
if Enc19@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@output = enc_NetworkAddressV2(Enc19@input),
Enc21@bin = complete(Enc20@output),
Enc21@len = byte_size(Enc21@bin),
if Enc21@len < 128 ->
[align,
Enc21@len|Enc21@bin];
Enc21@len < 16384 ->
[align,
<<2:2,Enc21@len:14>>|Enc21@bin];
true ->
[align|encode_fragmented(Enc21@bin, 8)]
end
end
end
end].


dec_ConferenceAddRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NetworkAddress
{Term1,Bytes3} = dec_NetworkAddress(Bytes2),

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
V3@Pad2 = bit_size(Bytes3) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes3,
V3@Add4 = V3@V0 + 1001,
{V3@Add4,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = begin
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:7,V4@Buf4/bitstring>> when V4@V3 =/= 0 ->
{V4@V3,V4@Buf4};
<<1:1,0:1,V4@V4:14,V4@Buf5/bitstring>> when V4@V4 =/= 0 ->
{V4@V4,V4@Buf5}
end,
<<V4@V6:V4@V0/signed-unit:8,V4@Buf7/bitstring>> = V4@Buf1,
{V4@V6,V4@Buf7}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
V5@Pad2 = bit_size(Bytes5) band 7,
<<_:V5@Pad2,V5@V0:2/unsigned-unit:8,V5@Buf1/bitstring>> = Bytes5,
V5@Add4 = V5@V0 + 1001,
{V5@Add4,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type UserData
{Term5,Bytes7} = case Opt band 1 of
1 ->
dec_UserData(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,

%% attribute number 6 with type NodeCategory
{Term6,Bytes9} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes8) band 7,
{V7@V0,V7@Buf1} = case Bytes8 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx6,_} = dec_NodeCategory(V7@V0),
{TmpValx6,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type NetworkAddressV2
{Term7,Bytes10} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes9) band 7,
{V8@V0,V8@Buf1} = case Bytes9 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx7,_} = dec_NetworkAddressV2(V8@V0),
{TmpValx7,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,
Bytes11= skipextensions(Bytes10, 3, Extensions),
{{'ConferenceAddRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes11}.

'enc_ConferenceAddResponse'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@input = element(2, Val),
encode_unconstrained_number(Enc3@input)
end,
begin
Enc5@input = element(3, Val),
if Enc5@input =:= success ->
<<0:1,0:3>>;
Enc5@input =:= invalidRequester ->
<<0:1,1:3>>;
Enc5@input =:= invalidNetworkType ->
<<0:1,2:3>>;
Enc5@input =:= invalidNetworkAddress ->
<<0:1,3:3>>;
Enc5@input =:= addedNodeBusy ->
<<0:1,4:3>>;
Enc5@input =:= networkBusy ->
<<0:1,5:3>>;
Enc5@input =:= noPortsAvailable ->
<<0:1,6:3>>;
Enc5@input =:= connectionUnsuccessful ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end|begin
Enc7@input = element(4, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
enc_UserData(Enc7@input)
end
end].


dec_ConferenceAddResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> when V3@V5 =/= 0 ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/signed-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
{V3@V8,V3@Buf9}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:3/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> success;
1 -> invalidRequester;
2 -> invalidNetworkType;
3 -> invalidNetworkAddress;
4 -> addedNodeBusy;
5 -> networkBusy;
6 -> noPortsAvailable;
7 -> connectionUnsuccessful
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<_:6,0:1,V4@V10:7,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<_:6,1:1,0:1,V4@V11:14,V4@Buf12/bitstring>> when V4@V11 =/= 0 ->
{V4@V11,V4@Buf12}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,

%% attribute number 3 with type UserData
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_UserData(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'ConferenceAddResponse',Term1,Term2,Term3},Bytes7}.

'enc_ConferenceLockRequest'(Val) ->
<<0:1>>.


dec_ConferenceLockRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% Extensions
{Extensions,Bytes2} = case Ext of
0 -> {<<>>,Bytes1};
1 ->
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes3= skipextensions(Bytes2, 1, Extensions),
{{'ConferenceLockRequest'},Bytes3}.

'enc_ConferenceLockResponse'(Val) ->
Enc2@input = element(2, Val),
if Enc2@input =:= success ->
<<0:1,0:1,0:2>>;
Enc2@input =:= invalidRequester ->
<<0:1,0:1,1:2>>;
Enc2@input =:= alreadyLocked ->
<<0:1,0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end.


dec_ConferenceLockResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:2/unsigned-unit:1,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> success;
1 -> invalidRequester;
2 -> alreadyLocked;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V3,[success,invalidRequester,alreadyLocked]}}}})
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
V2@Pad9 = bit_size(V2@Buf5) band 7,
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<_:V2@Pad9,0:1,V2@V11:7,V2@Buf12/bitstring>> when V2@V11 =/= 0 ->
{V2@V11,V2@Buf12};
<<_:V2@Pad9,1:1,0:1,V2@V12:14,V2@Buf13/bitstring>> when V2@V12 =/= 0 ->
{V2@V12,V2@Buf13}
end,
<<V2@V14:V2@V6/unit:8,V2@Buf15/bitstring>> = V2@Buf7,
{V2@V14,V2@Buf15}
end,
V2@Int16 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int16,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ConferenceLockResponse',Term1},Bytes4}.

'enc_ConferenceLockIndication'(Val) ->
<<0:1>>.


dec_ConferenceLockIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% Extensions
{Extensions,Bytes2} = case Ext of
0 -> {<<>>,Bytes1};
1 ->
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes3= skipextensions(Bytes2, 1, Extensions),
{{'ConferenceLockIndication'},Bytes3}.

'enc_ConferenceUnlockRequest'(Val) ->
<<0:1>>.


dec_ConferenceUnlockRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% Extensions
{Extensions,Bytes2} = case Ext of
0 -> {<<>>,Bytes1};
1 ->
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes3= skipextensions(Bytes2, 1, Extensions),
{{'ConferenceUnlockRequest'},Bytes3}.

'enc_ConferenceUnlockResponse'(Val) ->
Enc2@input = element(2, Val),
if Enc2@input =:= success ->
<<0:1,0:1,0:2>>;
Enc2@input =:= invalidRequester ->
<<0:1,0:1,1:2>>;
Enc2@input =:= alreadyUnlocked ->
<<0:1,0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end.


dec_ConferenceUnlockResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:2/unsigned-unit:1,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> success;
1 -> invalidRequester;
2 -> alreadyUnlocked;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V3,[success,invalidRequester,alreadyUnlocked]}}}})
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
V2@Pad9 = bit_size(V2@Buf5) band 7,
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<_:V2@Pad9,0:1,V2@V11:7,V2@Buf12/bitstring>> when V2@V11 =/= 0 ->
{V2@V11,V2@Buf12};
<<_:V2@Pad9,1:1,0:1,V2@V12:14,V2@Buf13/bitstring>> when V2@V12 =/= 0 ->
{V2@V12,V2@Buf13}
end,
<<V2@V14:V2@V6/unit:8,V2@Buf15/bitstring>> = V2@Buf7,
{V2@V14,V2@Buf15}
end,
V2@Int16 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int16,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ConferenceUnlockResponse',Term1},Bytes4}.

'enc_ConferenceUnlockIndication'(Val) ->
<<0:1>>.


dec_ConferenceUnlockIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% Extensions
{Extensions,Bytes2} = case Ext of
0 -> {<<>>,Bytes1};
1 ->
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes3= skipextensions(Bytes2, 1, Extensions),
{{'ConferenceUnlockIndication'},Bytes3}.

'enc_ConferenceTerminateRequest'(Val) ->
Enc2@input = element(2, Val),
if Enc2@input =:= userInitiated ->
<<0:1,0:1,0:1>>;
Enc2@input =:= timedConferenceTermination ->
<<0:1,0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end.


dec_ConferenceTerminateRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:1/unsigned-unit:1,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> userInitiated;
1 -> timedConferenceTermination
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
V2@Pad9 = bit_size(V2@Buf5) band 7,
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<_:V2@Pad9,0:1,V2@V11:7,V2@Buf12/bitstring>> when V2@V11 =/= 0 ->
{V2@V11,V2@Buf12};
<<_:V2@Pad9,1:1,0:1,V2@V12:14,V2@Buf13/bitstring>> when V2@V12 =/= 0 ->
{V2@V12,V2@Buf13}
end,
<<V2@V14:V2@V6/unit:8,V2@Buf15/bitstring>> = V2@Buf7,
{V2@V14,V2@Buf15}
end,
V2@Int16 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int16,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ConferenceTerminateRequest',Term1},Bytes4}.

'enc_ConferenceTerminateResponse'(Val) ->
Enc2@input = element(2, Val),
if Enc2@input =:= success ->
<<0:1,0:1,0:1>>;
Enc2@input =:= invalidRequester ->
<<0:1,0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end.


dec_ConferenceTerminateResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:1/unsigned-unit:1,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> success;
1 -> invalidRequester
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
V2@Pad9 = bit_size(V2@Buf5) band 7,
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<_:V2@Pad9,0:1,V2@V11:7,V2@Buf12/bitstring>> when V2@V11 =/= 0 ->
{V2@V11,V2@Buf12};
<<_:V2@Pad9,1:1,0:1,V2@V12:14,V2@Buf13/bitstring>> when V2@V12 =/= 0 ->
{V2@V12,V2@Buf13}
end,
<<V2@V14:V2@V6/unit:8,V2@Buf15/bitstring>> = V2@Buf7,
{V2@V14,V2@Buf15}
end,
V2@Int16 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int16,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ConferenceTerminateResponse',Term1},Bytes4}.

'enc_ConferenceTerminateIndication'(Val) ->
Enc2@input = element(2, Val),
if Enc2@input =:= userInitiated ->
<<0:1,0:1,0:1>>;
Enc2@input =:= timedConferenceTermination ->
<<0:1,0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end.


dec_ConferenceTerminateIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:1/unsigned-unit:1,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> userInitiated;
1 -> timedConferenceTermination
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
V2@Pad9 = bit_size(V2@Buf5) band 7,
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<_:V2@Pad9,0:1,V2@V11:7,V2@Buf12/bitstring>> when V2@V11 =/= 0 ->
{V2@V11,V2@Buf12};
<<_:V2@Pad9,1:1,0:1,V2@V12:14,V2@Buf13/bitstring>> when V2@V12 =/= 0 ->
{V2@V12,V2@Buf13}
end,
<<V2@V14:V2@V6/unit:8,V2@Buf15/bitstring>> = V2@Buf7,
{V2@V14,V2@Buf15}
end,
V2@Int16 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int16,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ConferenceTerminateIndication',Term1},Bytes4}.

'enc_ConferenceEjectUserRequest'(Val) ->
[begin
Enc2@input = element(2, Val),
Enc2@input@sub = Enc2@input - 1001,
if 0 =< Enc2@input@sub, Enc2@input@sub < 64535 ->
[<<0:1>>,
align|<<Enc2@input@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= userInitiated ->
<<0:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end].


dec_ConferenceEjectUserRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1001,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@Buf2/bitstring>> ->
{'userInitiated',V3@Buf2};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<_:6,0:1,V3@V10:7,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<_:6,1:1,0:1,V3@V11:14,V3@Buf12/bitstring>> when V3@V11 =/= 0 ->
{V3@V11,V3@Buf12}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'ConferenceEjectUserRequest',Term1,Term2},Bytes5}.

'enc_ConferenceEjectUserResponse'(Val) ->
[begin
Enc2@input = element(2, Val),
Enc2@input@sub = Enc2@input - 1001,
if 0 =< Enc2@input@sub, Enc2@input@sub < 64535 ->
[<<0:1>>,
align|<<Enc2@input@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= success ->
<<0:1,0:2>>;
Enc4@input =:= invalidRequester ->
<<0:1,1:2>>;
Enc4@input =:= invalidNode ->
<<0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end].


dec_ConferenceEjectUserResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1001,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:2/unsigned-unit:1,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> success;
1 -> invalidRequester;
2 -> invalidNode;
_ -> exit({error,{asn1,{decode_enumerated,{V3@V3,[success,invalidRequester,invalidNode]}}}})
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<_:6,0:1,V3@V10:7,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<_:6,1:1,0:1,V3@V11:14,V3@Buf12/bitstring>> when V3@V11 =/= 0 ->
{V3@V11,V3@Buf12}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'ConferenceEjectUserResponse',Term1,Term2},Bytes5}.

'enc_ConferenceEjectUserIndication'(Val) ->
[begin
Enc2@input = element(2, Val),
Enc2@input@sub = Enc2@input - 1001,
if 0 =< Enc2@input@sub, Enc2@input@sub < 64535 ->
[<<0:1>>,
align|<<Enc2@input@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= userInitiated ->
<<0:1,0:2>>;
Enc4@input =:= higherNodeDisconnected ->
<<0:1,1:2>>;
Enc4@input =:= higherNodeEjected ->
<<0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end].


dec_ConferenceEjectUserIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1001,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:2/unsigned-unit:1,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> userInitiated;
1 -> higherNodeDisconnected;
2 -> higherNodeEjected;
_ -> exit({error,{asn1,{decode_enumerated,{V3@V3,[userInitiated,higherNodeDisconnected,higherNodeEjected]}}}})
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<_:6,0:1,V3@V10:7,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<_:6,1:1,0:1,V3@V11:14,V3@Buf12/bitstring>> when V3@V11 =/= 0 ->
{V3@V11,V3@Buf12}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'ConferenceEjectUserIndication',Term1,Term2},Bytes5}.

'enc_ConferenceTransferRequest'(Val) ->
Enc5@bitmap = extension_bitmap(Val, 7, 8),
Extensions = if Enc5@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@input = element(3, Val),
if Extensions =:= [] ->
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@input = element(4, Val),
Enc3@input = element(5, Val),
if Enc2@input =:= asn1_NOVALUE ->
if Enc3@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@input = element(6, Val),
if Enc4@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc7@input = element(2, Val),
enc_ConferenceNameSelector(Enc7@input)
end,
begin
Enc8@input = element(3, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@len = length(Enc8@input),
Enc9@bin = encode_chars(Enc8@input, 4, {31,{0,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,1,2,3,4,5,6,7,8,9,10}}),
Enc9@len@sub = Enc9@len - 1,
if 0 =< Enc9@len@sub, Enc9@len@sub < 255 ->
[Enc9@len@sub,
align|Enc9@bin]
end
end
end
end,
begin
Enc11@input = element(4, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
enc_NetworkAddress(Enc11@input)
end
end,
begin
Enc13@input = element(5, Val),
if Enc13@input =:= asn1_NOVALUE ->
[];
true ->
enc_ConferenceTransferRequest_transferringNodes(Enc13@input)
end
end,
begin
Enc15@input = element(6, Val),
if Enc15@input =:= asn1_NOVALUE ->
[];
true ->
enc_PasswordSelector(Enc15@input)
end
end,
Extensions|begin
Enc17@input = element(7, Val),
if Enc17@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc18@output = enc_NetworkAddressV2(Enc17@input),
Enc19@bin = complete(Enc18@output),
Enc19@len = byte_size(Enc19@bin),
if Enc19@len < 128 ->
[align,
Enc19@len|Enc19@bin];
Enc19@len < 16384 ->
[align,
<<2:2,Enc19@len:14>>|Enc19@bin];
true ->
[align|encode_fragmented(Enc19@bin, 8)]
end
end
end
end].
'enc_ConferenceTransferRequest_transferringNodes'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Comp@sub = Comp - 1001,
if 0 =< Comp@sub, Comp@sub < 64535 ->
<<Comp@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]].


dec_ConferenceTransferRequest_transferringNodes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components23(V1@V0, V1@Buf1, []).



dec_ConferenceTransferRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ConferenceNameSelector
{Term1,Bytes3} = dec_ConferenceNameSelector(Bytes2),

%% attribute number 2 with type NumericString
{Term2,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V3@V0:8/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:4,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V7,V3@Buf8}  = {decode_chars(V3@V3, 4, {32,48,49,50,51,52,53,54,55,56,57}),V3@Buf4},
{V3@V7,V3@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type NetworkAddress
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
dec_NetworkAddress(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SET OF
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
'dec_ConferenceTransferRequest_transferringNodes'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type PasswordSelector
{Term5,Bytes7} = case Opt band 1 of
1 ->
dec_PasswordSelector(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V4@V0,V4@Buf1} = case Bytes7 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 6 with type NetworkAddressV2
{Term6,Bytes9} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes8) band 7,
{V5@V0,V5@Buf1} = case Bytes8 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx6,_} = dec_NetworkAddressV2(V5@V0),
{TmpValx6,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,
Bytes10= skipextensions(Bytes9, 2, Extensions),
{{'ConferenceTransferRequest',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_ConferenceTransferResponse'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@input = element(2, Val),
enc_ConferenceNameSelector(Enc4@input)
end,
begin
Enc5@input = element(3, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@len = length(Enc5@input),
Enc6@bin = encode_chars(Enc5@input, 4, {31,{0,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,1,2,3,4,5,6,7,8,9,10}}),
Enc6@len@sub = Enc6@len - 1,
if 0 =< Enc6@len@sub, Enc6@len@sub < 255 ->
[Enc6@len@sub,
align|Enc6@bin]
end
end
end
end,
begin
Enc8@input = element(4, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
true ->
enc_ConferenceTransferResponse_transferringNodes(Enc8@input)
end
end|begin
Enc10@input = element(5, Val),
if Enc10@input =:= success ->
<<0:1,0:1>>;
Enc10@input =:= invalidRequester ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@input}}})
end
end].
'enc_ConferenceTransferResponse_transferringNodes'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Comp@sub = Comp - 1001,
if 0 =< Comp@sub, Comp@sub < 64535 ->
<<Comp@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]].


dec_ConferenceTransferResponse_transferringNodes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components24(V1@V0, V1@Buf1, []).



dec_ConferenceTransferResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ConferenceNameSelector
{Term1,Bytes3} = dec_ConferenceNameSelector(Bytes2),

%% attribute number 2 with type NumericString
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V3@V0:8/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:4,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V7,V3@Buf8}  = {decode_chars(V3@V3, 4, {32,48,49,50,51,52,53,54,55,56,57}),V3@Buf4},
{V3@V7,V3@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SET OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_ConferenceTransferResponse_transferringNodes'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type ENUMERATED
{Term4,Bytes6} = begin
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:1/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> success;
1 -> invalidRequester
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
V4@Pad9 = bit_size(V4@Buf5) band 7,
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<_:V4@Pad9,0:1,V4@V11:7,V4@Buf12/bitstring>> when V4@V11 =/= 0 ->
{V4@V11,V4@Buf12};
<<_:V4@Pad9,1:1,0:1,V4@V12:14,V4@Buf13/bitstring>> when V4@V12 =/= 0 ->
{V4@V12,V4@Buf13}
end,
<<V4@V14:V4@V6/unit:8,V4@Buf15/bitstring>> = V4@Buf7,
{V4@V14,V4@Buf15}
end,
V4@Int16 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int16,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V5@V0,V5@Buf1} = case Bytes6 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'ConferenceTransferResponse',Term1,Term2,Term3,Term4},Bytes8}.

'enc_ConferenceTransferIndication'(Val) ->
Enc5@bitmap = extension_bitmap(Val, 7, 8),
Extensions = if Enc5@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@input = element(3, Val),
if Extensions =:= [] ->
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@input = element(4, Val),
Enc3@input = element(5, Val),
if Enc2@input =:= asn1_NOVALUE ->
if Enc3@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@input = element(6, Val),
if Enc4@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc7@input = element(2, Val),
enc_ConferenceNameSelector(Enc7@input)
end,
begin
Enc8@input = element(3, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@len = length(Enc8@input),
Enc9@bin = encode_chars(Enc8@input, 4, {31,{0,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,1,2,3,4,5,6,7,8,9,10}}),
Enc9@len@sub = Enc9@len - 1,
if 0 =< Enc9@len@sub, Enc9@len@sub < 255 ->
[Enc9@len@sub,
align|Enc9@bin]
end
end
end
end,
begin
Enc11@input = element(4, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
enc_NetworkAddress(Enc11@input)
end
end,
begin
Enc13@input = element(5, Val),
if Enc13@input =:= asn1_NOVALUE ->
[];
true ->
enc_ConferenceTransferIndication_transferringNodes(Enc13@input)
end
end,
begin
Enc15@input = element(6, Val),
if Enc15@input =:= asn1_NOVALUE ->
[];
true ->
enc_PasswordSelector(Enc15@input)
end
end,
Extensions|begin
Enc17@input = element(7, Val),
if Enc17@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc18@output = enc_NetworkAddressV2(Enc17@input),
Enc19@bin = complete(Enc18@output),
Enc19@len = byte_size(Enc19@bin),
if Enc19@len < 128 ->
[align,
Enc19@len|Enc19@bin];
Enc19@len < 16384 ->
[align,
<<2:2,Enc19@len:14>>|Enc19@bin];
true ->
[align|encode_fragmented(Enc19@bin, 8)]
end
end
end
end].
'enc_ConferenceTransferIndication_transferringNodes'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Comp@sub = Comp - 1001,
if 0 =< Comp@sub, Comp@sub < 64535 ->
<<Comp@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]].


dec_ConferenceTransferIndication_transferringNodes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components25(V1@V0, V1@Buf1, []).



dec_ConferenceTransferIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ConferenceNameSelector
{Term1,Bytes3} = dec_ConferenceNameSelector(Bytes2),

%% attribute number 2 with type NumericString
{Term2,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V3@V0:8/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:4,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V7,V3@Buf8}  = {decode_chars(V3@V3, 4, {32,48,49,50,51,52,53,54,55,56,57}),V3@Buf4},
{V3@V7,V3@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type NetworkAddress
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
dec_NetworkAddress(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SET OF
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
'dec_ConferenceTransferIndication_transferringNodes'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type PasswordSelector
{Term5,Bytes7} = case Opt band 1 of
1 ->
dec_PasswordSelector(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V4@V0,V4@Buf1} = case Bytes7 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 6 with type NetworkAddressV2
{Term6,Bytes9} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes8) band 7,
{V5@V0,V5@Buf1} = case Bytes8 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx6,_} = dec_NetworkAddressV2(V5@V0),
{TmpValx6,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,
Bytes10= skipextensions(Bytes9, 2, Extensions),
{{'ConferenceTransferIndication',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_RosterUpdateIndication'(Val) ->
[begin
Enc2@input = element(2, Val),
if Enc2@input =:= false ->
<<0:1,0:1>>;
Enc2@input =:= true ->
<<0:1,1:1>>
end
end,
begin
Enc4@input = element(3, Val),
enc_RosterUpdateIndication_nodeInformation(Enc4@input)
end|begin
Enc5@input = element(4, Val),
enc_RosterUpdateIndication_applicationInformation(Enc5@input)
end].
'enc_RosterUpdateIndication_nodeInformation'(Val) ->
[<<0:1>>,
begin
Enc2@input = element(2, Val),
enc_RosterUpdateIndication_nodeInformation_nodeRecordList(Enc2@input)
end,
align,
begin
Enc3@input = element(3, Val),
if Enc3@input bsr 16 =:= 0 ->
<<Enc3@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc7@input = element(5, Val),
if Enc5@input =:= false ->
if Enc7@input =:= false ->
<<0:1,0:1>>;
Enc7@input =:= true ->
<<0:1,1:1>>
end;
Enc5@input =:= true ->
if Enc7@input =:= false ->
<<1:1,0:1>>;
Enc7@input =:= true ->
<<1:1,1:1>>
end
end
end].
'enc_RosterUpdateIndication_nodeInformation_nodeRecordList'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= noChange ->
<<0:1,0:2>>;
ChoiceTag =:= refresh ->
[<<0:1,1:2>>|enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh(ChoiceVal)];
ChoiceTag =:= update ->
[<<0:1,2:2>>|enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update(ChoiceVal)]
end.
'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_SETOF(Comp) || Comp <- Val]].

'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_SETOF'(Val) ->
[align,
begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - 1001,
if 0 =< Enc1@input@sub, Enc1@input@sub < 64535 ->
<<Enc1@input@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_NodeRecord(Enc3@input)
end].

dec_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_SETOF(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1001,
{V1@Add4,V1@Buf1}
end,

%% attribute number 2 with type NodeRecord
{Term2,Bytes2} = dec_NodeRecord(Bytes1),
{{'RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_SETOF',Term1,Term2},Bytes2}.


dec_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components26(V1@V0, V1@Buf1, []).

'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF(Comp) || Comp <- Val]].

'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF'(Val) ->
[align,
begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - 1001,
if 0 =< Enc1@input@sub, Enc1@input@sub < 64535 ->
<<Enc1@input@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF_nodeUpdate(Enc3@input)
end].
'enc_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF_nodeUpdate'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= addRecord ->
[<<0:1,0:2>>|enc_NodeRecord(ChoiceVal)];
ChoiceTag =:= replaceRecord ->
[<<0:1,1:2>>|enc_NodeRecord(ChoiceVal)];
ChoiceTag =:= removeRecord ->
<<0:1,2:2>>
end.

dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF_nodeUpdate(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NodeRecord(Bytes2)
end,
{{addRecord,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_NodeRecord(Bytes2)
end,
{{replaceRecord,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{removeRecord,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1001,
{V1@Add4,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF_nodeUpdate'(Bytes1),
{{'RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF',Term1,Term2},Bytes2}.


dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components27(V1@V0, V1@Buf1, []).


dec_RosterUpdateIndication_nodeInformation_nodeRecordList(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{noChange,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh'(Bytes2)
end,
{{refresh,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update'(Bytes2)
end,
{{update,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_RosterUpdateIndication_nodeInformation(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_RosterUpdateIndication_nodeInformation_nodeRecordList'(Bytes1),

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes2,
{V2@V0,V2@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes3,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes4,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:5,0:1,V5@V7:7,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<_:5,1:1,0:1,V5@V8:14,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'RosterUpdateIndication_nodeInformation',Term1,Term2,Term3,Term4},Bytes7}.

'enc_RosterUpdateIndication_applicationInformation'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|[enc_RosterUpdateIndication_applicationInformation_SETOF(Comp) || Comp <- Val]]
end.

'enc_RosterUpdateIndication_applicationInformation_SETOF'(Val) ->
[<<0:1>>,
begin
Enc2@input = element(2, Val),
enc_SessionKey(Enc2@input)
end,
begin
Enc3@input = element(3, Val),
enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList(Enc3@input)
end,
begin
Enc4@input = element(4, Val),
enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList(Enc4@input)
end,
align,
begin
Enc5@input = element(5, Val),
if Enc5@input bsr 16 =:= 0 ->
<<Enc5@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end|begin
Enc7@input = element(6, Val),
Enc9@input = element(7, Val),
if Enc7@input =:= false ->
if Enc9@input =:= false ->
<<0:1,0:1>>;
Enc9@input =:= true ->
<<0:1,1:1>>
end;
Enc7@input =:= true ->
if Enc9@input =:= false ->
<<1:1,0:1>>;
Enc9@input =:= true ->
<<1:1,1:1>>
end
end
end].
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= noChange ->
<<0:1,0:2>>;
ChoiceTag =:= refresh ->
[<<0:1,1:2>>|enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh(ChoiceVal)];
ChoiceTag =:= update ->
[<<0:1,2:2>>|enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update(ChoiceVal)]
end.
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|[enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_SETOF(Comp) || Comp <- Val]]
end.

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_SETOF'(Val) ->
[align,
begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - 1001,
if 0 =< Enc1@input@sub, Enc1@input@sub < 64535 ->
<<Enc1@input@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input bsr 16 =:= 0 ->
<<Enc3@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
enc_ApplicationRecord(Enc5@input)
end].

dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_SETOF(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1001,
{V1@Add4,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 3 with type ApplicationRecord
{Term3,Bytes3} = dec_ApplicationRecord(Bytes2),
{{'RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_SETOF',Term1,Term2,Term3},Bytes3}.


dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components28(V1@V0, V1@Buf1, []).

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF(Comp) || Comp <- Val]].

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF'(Val) ->
[align,
begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - 1001,
if 0 =< Enc1@input@sub, Enc1@input@sub < 64535 ->
<<Enc1@input@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input bsr 16 =:= 0 ->
<<Enc3@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF_applicationUpdate(Enc5@input)
end].
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF_applicationUpdate'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= addRecord ->
[<<0:1,0:2>>|enc_ApplicationRecord(ChoiceVal)];
ChoiceTag =:= replaceRecord ->
[<<0:1,1:2>>|enc_ApplicationRecord(ChoiceVal)];
ChoiceTag =:= removeRecord ->
<<0:1,2:2>>
end.

dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF_applicationUpdate(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_ApplicationRecord(Bytes2)
end,
{{addRecord,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_ApplicationRecord(Bytes2)
end,
{{replaceRecord,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{removeRecord,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1001,
{V1@Add4,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 3 with type CHOICE
{Term3,Bytes3} = 'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF_applicationUpdate'(Bytes2),
{{'RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF',Term1,Term2,Term3},Bytes3}.


dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components29(V1@V0, V1@Buf1, []).


dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{noChange,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh'(Bytes2)
end,
{{refresh,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update'(Bytes2)
end,
{{update,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= noChange ->
<<0:1,0:1>>;
ChoiceTag =:= refresh ->
[<<0:1,1:1>>|enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh(ChoiceVal)]
end.
'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_SETOF(Comp) || Comp <- Val]].

'enc_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_SETOF'(Val) ->
[<<0:1>>,
begin
Enc2@input = element(2, Val),
enc_CapabilityID(Enc2@input)
end,
begin
Enc3@input = element(3, Val),
enc_CapabilityClass(Enc3@input)
end,
align|begin
Enc4@input = element(4, Val),
Enc4@input@sub = Enc4@input - 1,
if Enc4@input@sub bsr 16 =:= 0 ->
<<Enc4@input@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end].

dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_SETOF(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CapabilityID
{Term1,Bytes2} = dec_CapabilityID(Bytes1),

%% attribute number 2 with type CapabilityClass
{Term2,Bytes3} = dec_CapabilityClass(Bytes2),

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
V2@Pad2 = bit_size(Bytes3) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes3,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_SETOF',Term1,Term2,Term3},Bytes6}.


dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components30(V1@V0, V1@Buf1, []).


dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{noChange,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh'(Bytes2)
end,
{{refresh,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_RosterUpdateIndication_applicationInformation_SETOF(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SessionKey
{Term1,Bytes2} = dec_SessionKey(Bytes1),

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList'(Bytes2),

%% attribute number 3 with type CHOICE
{Term3,Bytes4} = 'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList'(Bytes3),

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = begin
V2@Pad2 = bit_size(Bytes4) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes4,
{V2@V0,V2@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes5,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes6,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V5@V0,V5@Buf1} = case Bytes7 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:5,0:1,V5@V7:7,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<_:5,1:1,0:1,V5@V8:14,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'RosterUpdateIndication_applicationInformation_SETOF',Term1,Term2,Term3,Term4,Term5,Term6},Bytes9}.


dec_RosterUpdateIndication_applicationInformation(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components31(V1@V0, V1@Buf1, []).



dec_RosterUpdateIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = 'dec_RosterUpdateIndication_nodeInformation'(Bytes2),

%% attribute number 3 with type SET OF
{Term3,Bytes4} = 'dec_RosterUpdateIndication_applicationInformation'(Bytes3),

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'RosterUpdateIndication',Term1,Term2,Term3},Bytes6}.

'enc_ApplicationInvokeIndication'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
enc_ApplicationInvokeIndication_applicationProtocolEntiyList(Enc3@input)
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
enc_ApplicationInvokeIndication_destinationNodes(Enc4@input)
end
end].
'enc_ApplicationInvokeIndication_applicationProtocolEntiyList'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ApplicationInvokeSpecifier(Comp) || Comp <- Val]].


dec_ApplicationInvokeIndication_applicationProtocolEntiyList(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components32(V1@V0, V1@Buf1, []).

'enc_ApplicationInvokeIndication_destinationNodes'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Comp@sub = Comp - 1001,
if 0 =< Comp@sub, Comp@sub < 64535 ->
<<Comp@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]].


dec_ApplicationInvokeIndication_destinationNodes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components33(V1@V0, V1@Buf1, []).



dec_ApplicationInvokeIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SET OF
{Term1,Bytes3} = 'dec_ApplicationInvokeIndication_applicationProtocolEntiyList'(Bytes2),

%% attribute number 2 with type SET OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_ApplicationInvokeIndication_destinationNodes'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'ApplicationInvokeIndication',Term1,Term2},Bytes6}.

'enc_RegistryRegisterChannelRequest'(Val) ->
[begin
Enc2@input = element(2, Val),
if Enc2@input bsr 16 =:= 0 ->
[<<0:1>>,
align|<<Enc2@input:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end,
begin
Enc4@input = element(3, Val),
enc_RegistryKey(Enc4@input)
end,
align|begin
Enc5@input = element(4, Val),
Enc5@input@sub = Enc5@input - 1001,
if 0 =< Enc5@input@sub, Enc5@input@sub < 64535 ->
<<Enc5@input@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end].


dec_RegistryRegisterChannelRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type RegistryKey
{Term2,Bytes3} = dec_RegistryKey(Bytes2),

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
V3@Pad2 = bit_size(Bytes3) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes3,
V3@Add4 = V3@V0 + 1001,
{V3@Add4,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:7,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:7,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'RegistryRegisterChannelRequest',Term1,Term2,Term3},Bytes6}.

'enc_RegistryAssignTokenRequest'(Val) ->
[begin
Enc2@input = element(2, Val),
if Enc2@input bsr 16 =:= 0 ->
[<<0:1>>,
align|<<Enc2@input:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(3, Val),
enc_RegistryKey(Enc4@input)
end].


dec_RegistryAssignTokenRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type RegistryKey
{Term2,Bytes3} = dec_RegistryKey(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'RegistryAssignTokenRequest',Term1,Term2},Bytes5}.

'enc_RegistrySetParameterRequest'(Val) ->
[begin
Enc1@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@input = element(2, Val),
if Enc3@input bsr 16 =:= 0 ->
<<Enc3@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
enc_RegistryKey(Enc5@input)
end,
begin
Enc6@input = element(4, Val),
Enc7@bin = iolist_to_binary(Enc6@input),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 65 ->
[<<Enc7@len:7>>,
align|Enc7@bin]
end
end|begin
Enc8@input = element(5, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
Enc8@input =:= owner ->
<<0:2>>;
Enc8@input =:= session ->
<<1:2>>;
Enc8@input =:= public ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@input}}})
end
end].


dec_RegistrySetParameterRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type RegistryKey
{Term2,Bytes4} = dec_RegistryKey(Bytes3),

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
<<V4@V0:7/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes4,
V4@Pad4 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad4,V4@V2:V4@V0/binary-unit:8,V4@Buf3/bitstring>> = V4@Buf1,
V4@Conv6 = binary_to_list(V4@V2),
{V4@Conv6,V4@Buf3}
end,

%% attribute number 4 with type ENUMERATED
{Term4,Bytes6} = case Opt band 1 of
1 ->
begin
<<V5@V0:2/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes5,
V5@Int2 = case V5@V0 of
0 -> owner;
1 -> session;
2 -> public;
_ -> exit({error,{asn1,{decode_enumerated,{V5@V0,[owner,session,public]}}}})
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'RegistrySetParameterRequest',Term1,Term2,Term3,Term4},Bytes8}.

'enc_RegistryRetrieveEntryRequest'(Val) ->
[begin
Enc2@input = element(2, Val),
if Enc2@input bsr 16 =:= 0 ->
[<<0:1>>,
align|<<Enc2@input:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(3, Val),
enc_RegistryKey(Enc4@input)
end].


dec_RegistryRetrieveEntryRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type RegistryKey
{Term2,Bytes3} = dec_RegistryKey(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'RegistryRetrieveEntryRequest',Term1,Term2},Bytes5}.

'enc_RegistryDeleteEntryRequest'(Val) ->
[begin
Enc2@input = element(2, Val),
if Enc2@input bsr 16 =:= 0 ->
[<<0:1>>,
align|<<Enc2@input:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(3, Val),
enc_RegistryKey(Enc4@input)
end].


dec_RegistryDeleteEntryRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type RegistryKey
{Term2,Bytes3} = dec_RegistryKey(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'RegistryDeleteEntryRequest',Term1,Term2},Bytes5}.

'enc_RegistryMonitorEntryRequest'(Val) ->
[begin
Enc2@input = element(2, Val),
if Enc2@input bsr 16 =:= 0 ->
[<<0:1>>,
align|<<Enc2@input:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(3, Val),
enc_RegistryKey(Enc4@input)
end].


dec_RegistryMonitorEntryRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type RegistryKey
{Term2,Bytes3} = dec_RegistryKey(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'RegistryMonitorEntryRequest',Term1,Term2},Bytes5}.

'enc_RegistryMonitorEntryIndication'(Val) ->
[begin
Enc1@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
enc_RegistryKey(Enc3@input)
end,
begin
Enc4@input = element(3, Val),
enc_RegistryItem(Enc4@input)
end,
begin
Enc5@input = element(4, Val),
enc_RegistryEntryOwner(Enc5@input)
end|begin
Enc6@input = element(5, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
Enc6@input =:= owner ->
<<0:2>>;
Enc6@input =:= session ->
<<1:2>>;
Enc6@input =:= public ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end].


dec_RegistryMonitorEntryIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type RegistryKey
{Term1,Bytes3} = dec_RegistryKey(Bytes2),

%% attribute number 2 with type RegistryItem
{Term2,Bytes4} = dec_RegistryItem(Bytes3),

%% attribute number 3 with type RegistryEntryOwner
{Term3,Bytes5} = dec_RegistryEntryOwner(Bytes4),

%% attribute number 4 with type ENUMERATED
{Term4,Bytes6} = case Opt band 1 of
1 ->
begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes5,
V3@Int2 = case V3@V0 of
0 -> owner;
1 -> session;
2 -> public;
_ -> exit({error,{asn1,{decode_enumerated,{V3@V0,[owner,session,public]}}}})
end,
{V3@Int2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'RegistryMonitorEntryIndication',Term1,Term2,Term3,Term4},Bytes8}.

'enc_RegistryAllocateHandleRequest'(Val) ->
[begin
Enc2@input = element(2, Val),
if Enc2@input bsr 16 =:= 0 ->
[<<0:1>>,
align|<<Enc2@input:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(3, Val),
Enc4@input@sub = Enc4@input - 1,
if Enc4@input@sub bsr 10 =:= 0 ->
<<Enc4@input@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end].


dec_RegistryAllocateHandleRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:7,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:7,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'RegistryAllocateHandleRequest',Term1,Term2},Bytes5}.

'enc_RegistryAllocateHandleResponse'(Val) ->
[begin
Enc2@input = element(2, Val),
if Enc2@input bsr 16 =:= 0 ->
[<<0:1>>,
align|<<Enc2@input:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end,
begin
Enc4@input = element(3, Val),
Enc4@input@sub = Enc4@input - 1,
if Enc4@input@sub bsr 10 =:= 0 ->
<<Enc4@input@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end,
begin
Enc6@input = element(4, Val),
if Enc6@input bsr 32 =:= 0 ->
begin
Enc6@input@bin = binary:encode_unsigned(Enc6@input),
Enc6@input@bin_size0 = byte_size(Enc6@input@bin),
Enc6@input@bin_size = Enc6@input@bin_size0 - 1,
[<<Enc6@input@bin_size:2,0:6>>|Enc6@input@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end|begin
Enc8@input = element(5, Val),
if Enc8@input =:= successful ->
<<0:1,0:1>>;
Enc8@input =:= noHandlesAvailable ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@input}}})
end
end].


dec_RegistryAllocateHandleResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<_:6,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end,

%% attribute number 4 with type ENUMERATED
{Term4,Bytes5} = begin
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:1/unsigned-unit:1,V5@Buf4/bitstring>> ->
V5@Int5 = case V5@V3 of
0 -> successful;
1 -> noHandlesAvailable
end,
{V5@Int5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,V5@Buf5/bitstring>> ->
{V5@V6,V5@Buf7} = case V5@Buf5 of
<<_:6,0:1,V5@V10:7,V5@Buf11/bitstring>> when V5@V10 =/= 0 ->
{V5@V10,V5@Buf11};
<<_:6,1:1,0:1,V5@V11:14,V5@Buf12/bitstring>> when V5@V11 =/= 0 ->
{V5@V11,V5@Buf12}
end,
<<V5@V13:V5@V6/unit:8,V5@Buf14/bitstring>> = V5@Buf7,
{V5@V13,V5@Buf14}
end,
V5@Int15 = case V5@V3 of
_ -> {asn1_enum,V5@V3}
end,
{V5@Int15,V5@Buf4}
end,
{V5@V0,V5@Buf1}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'RegistryAllocateHandleResponse',Term1,Term2,Term3,Term4},Bytes7}.

'enc_RegistryResponse'(Val) ->
[begin
Enc1@input = element(7, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@input = element(2, Val),
if Enc3@input bsr 16 =:= 0 ->
<<Enc3@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
if Enc5@input =:= registerChannel ->
<<0:1,0:3>>;
Enc5@input =:= assignToken ->
<<0:1,1:3>>;
Enc5@input =:= setParameter ->
<<0:1,2:3>>;
Enc5@input =:= retrieveEntry ->
<<0:1,3:3>>;
Enc5@input =:= deleteEntry ->
<<0:1,4:3>>;
Enc5@input =:= monitorEntry ->
<<0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end,
begin
Enc7@input = element(4, Val),
enc_RegistryKey(Enc7@input)
end,
begin
Enc8@input = element(5, Val),
enc_RegistryItem(Enc8@input)
end,
begin
Enc9@input = element(6, Val),
enc_RegistryEntryOwner(Enc9@input)
end,
begin
Enc10@input = element(7, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
Enc10@input =:= owner ->
<<0:2>>;
Enc10@input =:= session ->
<<1:2>>;
Enc10@input =:= public ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@input}}})
end
end|begin
Enc13@input = element(8, Val),
if Enc13@input =:= successful ->
<<0:1,0:3>>;
Enc13@input =:= belongsToOther ->
<<0:1,1:3>>;
Enc13@input =:= tooManyEntries ->
<<0:1,2:3>>;
Enc13@input =:= inconsistentType ->
<<0:1,3:3>>;
Enc13@input =:= entryNotFound ->
<<0:1,4:3>>;
Enc13@input =:= entryAlreadyExists ->
<<0:1,5:3>>;
Enc13@input =:= invalidRequester ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc13@input}}})
end
end].


dec_RegistryResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:3/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> registerChannel;
1 -> assignToken;
2 -> setParameter;
3 -> retrieveEntry;
4 -> deleteEntry;
5 -> monitorEntry;
_ -> exit({error,{asn1,{decode_enumerated,{V4@V3,[registerChannel,assignToken,setParameter,retrieveEntry,deleteEntry,monitorEntry]}}}})
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<_:6,0:1,V4@V10:7,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<_:6,1:1,0:1,V4@V11:14,V4@Buf12/bitstring>> when V4@V11 =/= 0 ->
{V4@V11,V4@Buf12}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,

%% attribute number 3 with type RegistryKey
{Term3,Bytes5} = dec_RegistryKey(Bytes4),

%% attribute number 4 with type RegistryItem
{Term4,Bytes6} = dec_RegistryItem(Bytes5),

%% attribute number 5 with type RegistryEntryOwner
{Term5,Bytes7} = dec_RegistryEntryOwner(Bytes6),

%% attribute number 6 with type ENUMERATED
{Term6,Bytes8} = case Opt band 1 of
1 ->
begin
<<V5@V0:2/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes7,
V5@Int2 = case V5@V0 of
0 -> owner;
1 -> session;
2 -> public;
_ -> exit({error,{asn1,{decode_enumerated,{V5@V0,[owner,session,public]}}}})
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type ENUMERATED
{Term7,Bytes9} = begin
{V6@V0,V6@Buf1} = case Bytes8 of
<<0:1,V6@V3:3/unsigned-unit:1,V6@Buf4/bitstring>> ->
V6@Int5 = case V6@V3 of
0 -> successful;
1 -> belongsToOther;
2 -> tooManyEntries;
3 -> inconsistentType;
4 -> entryNotFound;
5 -> entryAlreadyExists;
6 -> invalidRequester;
_ -> exit({error,{asn1,{decode_enumerated,{V6@V3,[successful,belongsToOther,tooManyEntries,inconsistentType,entryNotFound,entryAlreadyExists,invalidRequester]}}}})
end,
{V6@Int5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V6,V6@Buf7};
<<1:1,V6@Buf5/bitstring>> ->
V6@Pad9 = bit_size(V6@Buf5) band 7,
{V6@V6,V6@Buf7} = case V6@Buf5 of
<<_:V6@Pad9,0:1,V6@V11:7,V6@Buf12/bitstring>> when V6@V11 =/= 0 ->
{V6@V11,V6@Buf12};
<<_:V6@Pad9,1:1,0:1,V6@V12:14,V6@Buf13/bitstring>> when V6@V12 =/= 0 ->
{V6@V12,V6@Buf13}
end,
<<V6@V14:V6@V6/unit:8,V6@Buf15/bitstring>> = V6@Buf7,
{V6@V14,V6@Buf15}
end,
V6@Int16 = case V6@V3 of
_ -> {asn1_enum,V6@V3}
end,
{V6@Int16,V6@Buf4}
end,
{V6@V0,V6@Buf1}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V7@V0,V7@Buf1} = case Bytes9 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V11:V7@V0/bitstring-unit:1,V7@Buf12/bitstring>> = V7@Buf1,
{V7@V11,V7@Buf12}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
{{'RegistryResponse',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes11}.

'enc_ConductorAssignIndication'(Val) ->
Enc2@input = element(2, Val),
Enc2@input@sub = Enc2@input - 1001,
if 0 =< Enc2@input@sub, Enc2@input@sub < 64535 ->
[<<0:1>>,
align|<<Enc2@input@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end.


dec_ConductorAssignIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1001,
{V2@Add4,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ConductorAssignIndication',Term1},Bytes4}.

'enc_ConductorReleaseIndication'(Val) ->
<<0:1>>.


dec_ConductorReleaseIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% Extensions
{Extensions,Bytes2} = case Ext of
0 -> {<<>>,Bytes1};
1 ->
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes3= skipextensions(Bytes2, 1, Extensions),
{{'ConductorReleaseIndication'},Bytes3}.

'enc_ConductorPermissionAskIndication'(Val) ->
Enc2@input = element(2, Val),
if Enc2@input =:= false ->
<<0:1,0:1>>;
Enc2@input =:= true ->
<<0:1,1:1>>
end.


dec_ConductorPermissionAskIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ConductorPermissionAskIndication',Term1},Bytes4}.

'enc_ConductorPermissionGrantIndication'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
enc_ConductorPermissionGrantIndication_permissionList(Enc3@input)
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
enc_ConductorPermissionGrantIndication_waitingList(Enc4@input)
end
end].
'enc_ConductorPermissionGrantIndication_permissionList'(Val) ->
Enc2@len = length(Val),
if Enc2@len < 65536 ->
[align,
<<Enc2@len:16>>|[begin
Comp@sub = Comp - 1001,
if 0 =< Comp@sub, Comp@sub < 64535 ->
<<Comp@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]]
end.


dec_ConductorPermissionGrantIndication_permissionList(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components34(V1@V0, V1@Buf1, []).

'enc_ConductorPermissionGrantIndication_waitingList'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Comp@sub = Comp - 1001,
if 0 =< Comp@sub, Comp@sub < 64535 ->
<<Comp@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]].


dec_ConductorPermissionGrantIndication_waitingList(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components35(V1@V0, V1@Buf1, []).



dec_ConductorPermissionGrantIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes3} = 'dec_ConductorPermissionGrantIndication_permissionList'(Bytes2),

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_ConductorPermissionGrantIndication_waitingList'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'ConductorPermissionGrantIndication',Term1,Term2},Bytes6}.

'enc_ConferenceTimeRemainingIndication'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
Enc3@input@sub = Enc3@input - -2147483648,
if Enc3@input@sub bsr 32 =:= 0 ->
begin
Enc3@input@sub@bin = binary:encode_unsigned(Enc3@input@sub),
Enc3@input@sub@bin_size0 = byte_size(Enc3@input@sub@bin),
Enc3@input@sub@bin_size = Enc3@input@sub@bin_size0 - 1,
[<<Enc3@input@sub@bin_size:2>>,
align|Enc3@input@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(3, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc5@input@sub = Enc5@input - 1001,
if 0 =< Enc5@input@sub, Enc5@input@sub < 64535 ->
<<Enc5@input@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end
end
end].


dec_ConferenceTimeRemainingIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
V3@Add7 = V3@V3 + -2147483648,
{V3@Add7,V3@Buf4}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
V4@Pad2 = bit_size(Bytes3) band 7,
<<_:V4@Pad2,V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Add4 = V4@V0 + 1001,
{V4@Add4,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'ConferenceTimeRemainingIndication',Term1,Term2},Bytes6}.

'enc_ConferenceTimeInquireIndication'(Val) ->
Enc2@input = element(2, Val),
if Enc2@input =:= false ->
<<0:1,0:1>>;
Enc2@input =:= true ->
<<0:1,1:1>>
end.


dec_ConferenceTimeInquireIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ConferenceTimeInquireIndication',Term1},Bytes4}.

'enc_ConferenceTimeExtendIndication'(Val) ->
[begin
Enc2@input = element(2, Val),
Enc2@input@sub = Enc2@input - -2147483648,
if Enc2@input@sub bsr 32 =:= 0 ->
[<<0:1>>|begin
Enc2@input@sub@bin = binary:encode_unsigned(Enc2@input@sub),
Enc2@input@sub@bin_size0 = byte_size(Enc2@input@sub@bin),
Enc2@input@sub@bin_size = Enc2@input@sub@bin_size0 - 1,
[<<Enc2@input@sub@bin_size:2>>,
align|Enc2@input@sub@bin]
end];
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= false ->
<<0:1>>;
Enc4@input =:= true ->
<<1:1>>
end
end].


dec_ConferenceTimeExtendIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/unsigned-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
V2@Add7 = V2@V3 + -2147483648,
{V2@Add7,V2@Buf4}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:6,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:6,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'ConferenceTimeExtendIndication',Term1,Term2},Bytes5}.

'enc_ConferenceAssistanceIndication'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end|begin
Enc3@input = element(2, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
true ->
enc_UserData(Enc3@input)
end
end].


dec_ConferenceAssistanceIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type UserData
{Term1,Bytes3} = case Opt band 1 of
1 ->
dec_UserData(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'ConferenceAssistanceIndication',Term1},Bytes5}.

'enc_TextMessageIndication'(Val) ->
Enc2@input = element(2, Val),
Enc3@len = length(Enc2@input),
Enc3@bin = encode_chars_16bit(Enc2@input),
if Enc3@len < 256 ->
[<<0:1>>,
align,
Enc3@len|Enc3@bin]
end.


dec_TextMessageIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BMPString
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@V4:V2@V0/binary-unit:16,V2@Buf5/bitstring>> = Bytes1,
{V2@V6,V2@Buf7}  = {decode_chars_16bit(V2@V4),V2@Buf5},
{V2@V6,V2@Buf7}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'TextMessageIndication',Term1},Bytes4}.

'enc_RosterRefreshRequest'(Val) ->
[begin
Enc1@input = element(5, Val),
Enc2@input = element(6, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(7, Val),
Enc4@input = element(8, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc6@input = element(2, Val),
Enc6@input@sub = Enc6@input - 1001,
if 0 =< Enc6@input@sub, Enc6@input@sub < 64535 ->
<<Enc6@input@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end,
begin
Enc8@input = element(3, Val),
enc_NodeCategory(Enc8@input)
end,
begin
Enc9@input = element(4, Val),
Enc11@input = element(5, Val),
if Enc9@input =:= false ->
if Enc11@input =:= asn1_NOVALUE ->
<<0:1>>;
Enc11@input =:= false ->
<<0:1,0:1>>;
Enc11@input =:= true ->
<<0:1,1:1>>
end;
Enc9@input =:= true ->
if Enc11@input =:= asn1_NOVALUE ->
<<1:1>>;
Enc11@input =:= false ->
<<1:1,0:1>>;
Enc11@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc14@input = element(6, Val),
if Enc14@input =:= asn1_NOVALUE ->
[];
true ->
enc_RosterRefreshRequest_applicationList(Enc14@input)
end
end,
begin
Enc16@input = element(7, Val),
if Enc16@input =:= asn1_NOVALUE ->
[];
true ->
enc_RosterRefreshRequest_sessionList(Enc16@input)
end
end|begin
Enc18@input = element(8, Val),
if Enc18@input =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc18@input)
end
end].
'enc_RosterRefreshRequest_applicationList'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
enc_RosterRefreshRequest_applicationList_applicationKeyList(Enc3@input)
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc4@input)
end
end].
'enc_RosterRefreshRequest_applicationList_applicationKeyList'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_RosterRefreshRequest_applicationList_applicationKeyList_SETOF(Comp) || Comp <- Val]].

'enc_RosterRefreshRequest_applicationList_applicationKeyList_SETOF'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
enc_Key(Enc3@input)
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc4@input)
end
end].

dec_RosterRefreshRequest_applicationList_applicationKeyList_SETOF(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type Key
{Term1,Bytes3} = dec_Key(Bytes2),

%% attribute number 2 with type NonStandardParameter
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'RosterRefreshRequest_applicationList_applicationKeyList_SETOF',Term1,Term2},Bytes6}.


dec_RosterRefreshRequest_applicationList_applicationKeyList(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components36(V1@V0, V1@Buf1, []).


dec_RosterRefreshRequest_applicationList(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SET OF
{Term1,Bytes3} = 'dec_RosterRefreshRequest_applicationList_applicationKeyList'(Bytes2),

%% attribute number 2 with type NonStandardParameter
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'RosterRefreshRequest_applicationList',Term1,Term2},Bytes6}.

'enc_RosterRefreshRequest_sessionList'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
enc_RosterRefreshRequest_sessionList_sessionKeyList(Enc3@input)
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc4@input)
end
end].
'enc_RosterRefreshRequest_sessionList_sessionKeyList'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_RosterRefreshRequest_sessionList_sessionKeyList_SETOF(Comp) || Comp <- Val]].

'enc_RosterRefreshRequest_sessionList_sessionKeyList_SETOF'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
enc_SessionKey(Enc3@input)
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc4@input)
end
end].

dec_RosterRefreshRequest_sessionList_sessionKeyList_SETOF(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SessionKey
{Term1,Bytes3} = dec_SessionKey(Bytes2),

%% attribute number 2 with type NonStandardParameter
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'RosterRefreshRequest_sessionList_sessionKeyList_SETOF',Term1,Term2},Bytes6}.


dec_RosterRefreshRequest_sessionList_sessionKeyList(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components37(V1@V0, V1@Buf1, []).


dec_RosterRefreshRequest_sessionList(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SET OF
{Term1,Bytes3} = 'dec_RosterRefreshRequest_sessionList_sessionKeyList'(Bytes2),

%% attribute number 2 with type NonStandardParameter
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'RosterRefreshRequest_sessionList',Term1,Term2},Bytes6}.



dec_RosterRefreshRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1001,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type NodeCategory
{Term2,Bytes4} = dec_NodeCategory(Bytes3),

%% attribute number 3 with type BOOLEAN
{Term3,Bytes5} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes4,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes5,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type SEQUENCE
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
'dec_RosterRefreshRequest_applicationList'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type SEQUENCE
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
'dec_RosterRefreshRequest_sessionList'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type NonStandardParameter
{Term7,Bytes9} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V6@V0,V6@Buf1} = case Bytes9 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
{{'RosterRefreshRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes11}.

'enc_FunctionNotSupportedResponse'(Val) ->
Enc1@input = element(2, Val),
enc_RequestPDU(Enc1@input).


dec_FunctionNotSupportedResponse(Bytes) ->

%% attribute number 1 with type RequestPDU
{Term1,Bytes1} = dec_RequestPDU(Bytes),
{{'FunctionNotSupportedResponse',Term1},Bytes1}.

'enc_NonStandardPDU'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_NonStandardParameter(Enc2@input)
end].


dec_NonStandardPDU(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes2} = dec_NonStandardParameter(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'NonStandardPDU',Term1},Bytes4}.

'enc_ConnectData'(Val) ->
[begin
Enc1@input = element(2, Val),
enc_Key(Enc1@input)
end,
align|begin
Enc2@input = element(3, Val),
Enc3@bin = iolist_to_binary(Enc2@input),
Enc3@len = byte_size(Enc3@bin),
if Enc3@len < 128 ->
[Enc3@len|Enc3@bin];
Enc3@len < 16384 ->
[<<2:2,Enc3@len:14>>|Enc3@bin];
true ->
encode_fragmented(Enc3@bin, 8)
end
end].


dec_ConnectData(Bytes) ->

%% attribute number 1 with type Key
{Term1,Bytes1} = dec_Key(Bytes),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes2} = begin
V1@Pad3 = bit_size(Bytes1) band 7,
{V1@V0,V1@Buf1} = case Bytes1 of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary_to_list(V1@V0),
{V1@Conv10,V1@Buf1}
end,
{{'ConnectData',Term1,Term2},Bytes2}.

'enc_ConnectGCCPDU'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= conferenceCreateRequest ->
[<<0:1,0:3>>|enc_ConferenceCreateRequest(ChoiceVal)];
ChoiceTag =:= conferenceCreateResponse ->
[<<0:1,1:3>>|enc_ConferenceCreateResponse(ChoiceVal)];
ChoiceTag =:= conferenceQueryRequest ->
[<<0:1,2:3>>|enc_ConferenceQueryRequest(ChoiceVal)];
ChoiceTag =:= conferenceQueryResponse ->
[<<0:1,3:3>>|enc_ConferenceQueryResponse(ChoiceVal)];
ChoiceTag =:= conferenceJoinRequest ->
[<<0:1,4:3>>|enc_ConferenceJoinRequest(ChoiceVal)];
ChoiceTag =:= conferenceJoinResponse ->
[<<0:1,5:3>>|enc_ConferenceJoinResponse(ChoiceVal)];
ChoiceTag =:= conferenceInviteRequest ->
[<<0:1,6:3>>|enc_ConferenceInviteRequest(ChoiceVal)];
ChoiceTag =:= conferenceInviteResponse ->
[<<0:1,7:3>>|enc_ConferenceInviteResponse(ChoiceVal)]
end.


dec_ConnectGCCPDU(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_ConferenceCreateRequest(Bytes2)
end,
{{conferenceCreateRequest,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_ConferenceCreateResponse(Bytes2)
end,
{{conferenceCreateResponse,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_ConferenceQueryRequest(Bytes2)
end,
{{conferenceQueryRequest,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_ConferenceQueryResponse(Bytes2)
end,
{{conferenceQueryResponse,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_ConferenceJoinRequest(Bytes2)
end,
{{conferenceJoinRequest,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_ConferenceJoinResponse(Bytes2)
end,
{{conferenceJoinResponse,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_ConferenceInviteRequest(Bytes2)
end,
{{conferenceInviteRequest,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_ConferenceInviteResponse(Bytes2)
end,
{{conferenceInviteResponse,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_GCCPDU'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= request ->
[<<0:2>>|enc_RequestPDU(ChoiceVal)];
ChoiceTag =:= response ->
[<<1:2>>|enc_ResponsePDU(ChoiceVal)];
ChoiceTag =:= indication ->
[<<2:2>>|enc_IndicationPDU(ChoiceVal)]
end.


dec_GCCPDU(Bytes) ->
{Choice,Bytes1} =
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_RequestPDU(Bytes1)
end,
{{request,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_ResponsePDU(Bytes1)
end,
{{response,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_IndicationPDU(Bytes1)
end,
{{indication,Val},NewBytes}
end.
'enc_RequestPDU'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= conferenceJoinRequest ->
[<<0:1,0:4>>|enc_ConferenceJoinRequest(ChoiceVal)];
ChoiceTag =:= conferenceAddRequest ->
[<<0:1,1:4>>|enc_ConferenceAddRequest(ChoiceVal)];
ChoiceTag =:= conferenceLockRequest ->
[<<0:1,2:4>>|enc_ConferenceLockRequest(ChoiceVal)];
ChoiceTag =:= conferenceUnlockRequest ->
[<<0:1,3:4>>|enc_ConferenceUnlockRequest(ChoiceVal)];
ChoiceTag =:= conferenceTerminateRequest ->
[<<0:1,4:4>>|enc_ConferenceTerminateRequest(ChoiceVal)];
ChoiceTag =:= conferenceEjectUserRequest ->
[<<0:1,5:4>>|enc_ConferenceEjectUserRequest(ChoiceVal)];
ChoiceTag =:= conferenceTransferRequest ->
[<<0:1,6:4>>|enc_ConferenceTransferRequest(ChoiceVal)];
ChoiceTag =:= registryRegisterChannelRequest ->
[<<0:1,7:4>>|enc_RegistryRegisterChannelRequest(ChoiceVal)];
ChoiceTag =:= registryAssignTokenRequest ->
[<<0:1,8:4>>|enc_RegistryAssignTokenRequest(ChoiceVal)];
ChoiceTag =:= registrySetParameterRequest ->
[<<0:1,9:4>>|enc_RegistrySetParameterRequest(ChoiceVal)];
ChoiceTag =:= registryRetrieveEntryRequest ->
[<<0:1,10:4>>|enc_RegistryRetrieveEntryRequest(ChoiceVal)];
ChoiceTag =:= registryDeleteEntryRequest ->
[<<0:1,11:4>>|enc_RegistryDeleteEntryRequest(ChoiceVal)];
ChoiceTag =:= registryMonitorEntryRequest ->
[<<0:1,12:4>>|enc_RegistryMonitorEntryRequest(ChoiceVal)];
ChoiceTag =:= registryAllocateHandleRequest ->
[<<0:1,13:4>>|enc_RegistryAllocateHandleRequest(ChoiceVal)];
ChoiceTag =:= nonStandardRequest ->
[<<0:1,14:4>>|enc_NonStandardPDU(ChoiceVal)]
end.


dec_RequestPDU(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_ConferenceJoinRequest(Bytes2)
end,
{{conferenceJoinRequest,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_ConferenceAddRequest(Bytes2)
end,
{{conferenceAddRequest,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_ConferenceLockRequest(Bytes2)
end,
{{conferenceLockRequest,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_ConferenceUnlockRequest(Bytes2)
end,
{{conferenceUnlockRequest,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_ConferenceTerminateRequest(Bytes2)
end,
{{conferenceTerminateRequest,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_ConferenceEjectUserRequest(Bytes2)
end,
{{conferenceEjectUserRequest,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_ConferenceTransferRequest(Bytes2)
end,
{{conferenceTransferRequest,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_RegistryRegisterChannelRequest(Bytes2)
end,
{{registryRegisterChannelRequest,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
dec_RegistryAssignTokenRequest(Bytes2)
end,
{{registryAssignTokenRequest,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
dec_RegistrySetParameterRequest(Bytes2)
end,
{{registrySetParameterRequest,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
dec_RegistryRetrieveEntryRequest(Bytes2)
end,
{{registryRetrieveEntryRequest,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
dec_RegistryDeleteEntryRequest(Bytes2)
end,
{{registryDeleteEntryRequest,Val},NewBytes};
12 ->
{Val,NewBytes} = begin
dec_RegistryMonitorEntryRequest(Bytes2)
end,
{{registryMonitorEntryRequest,Val},NewBytes};
13 ->
{Val,NewBytes} = begin
dec_RegistryAllocateHandleRequest(Bytes2)
end,
{{registryAllocateHandleRequest,Val},NewBytes};
14 ->
{Val,NewBytes} = begin
dec_NonStandardPDU(Bytes2)
end,
{{nonStandardRequest,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ResponsePDU'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= conferenceJoinResponse ->
[<<0:1,0:4>>|enc_ConferenceJoinResponse(ChoiceVal)];
ChoiceTag =:= conferenceAddResponse ->
[<<0:1,1:4>>|enc_ConferenceAddResponse(ChoiceVal)];
ChoiceTag =:= conferenceLockResponse ->
[<<0:1,2:4>>|enc_ConferenceLockResponse(ChoiceVal)];
ChoiceTag =:= conferenceUnlockResponse ->
[<<0:1,3:4>>|enc_ConferenceUnlockResponse(ChoiceVal)];
ChoiceTag =:= conferenceTerminateResponse ->
[<<0:1,4:4>>|enc_ConferenceTerminateResponse(ChoiceVal)];
ChoiceTag =:= conferenceEjectUserResponse ->
[<<0:1,5:4>>|enc_ConferenceEjectUserResponse(ChoiceVal)];
ChoiceTag =:= conferenceTransferResponse ->
[<<0:1,6:4>>|enc_ConferenceTransferResponse(ChoiceVal)];
ChoiceTag =:= registryResponse ->
[<<0:1,7:4>>|enc_RegistryResponse(ChoiceVal)];
ChoiceTag =:= registryAllocateHandleResponse ->
[<<0:1,8:4>>|enc_RegistryAllocateHandleResponse(ChoiceVal)];
ChoiceTag =:= functionNotSupportedResponse ->
[<<0:1,9:4>>|enc_FunctionNotSupportedResponse(ChoiceVal)];
ChoiceTag =:= nonStandardResponse ->
[<<0:1,10:4>>|enc_NonStandardPDU(ChoiceVal)]
end.


dec_ResponsePDU(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_ConferenceJoinResponse(Bytes2)
end,
{{conferenceJoinResponse,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_ConferenceAddResponse(Bytes2)
end,
{{conferenceAddResponse,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_ConferenceLockResponse(Bytes2)
end,
{{conferenceLockResponse,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_ConferenceUnlockResponse(Bytes2)
end,
{{conferenceUnlockResponse,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_ConferenceTerminateResponse(Bytes2)
end,
{{conferenceTerminateResponse,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_ConferenceEjectUserResponse(Bytes2)
end,
{{conferenceEjectUserResponse,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_ConferenceTransferResponse(Bytes2)
end,
{{conferenceTransferResponse,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_RegistryResponse(Bytes2)
end,
{{registryResponse,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
dec_RegistryAllocateHandleResponse(Bytes2)
end,
{{registryAllocateHandleResponse,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
dec_FunctionNotSupportedResponse(Bytes2)
end,
{{functionNotSupportedResponse,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
dec_NonStandardPDU(Bytes2)
end,
{{nonStandardResponse,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_IndicationPDU'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= userIDIndication ->
[<<0:1,0:5>>|enc_UserIDIndication(ChoiceVal)];
ChoiceTag =:= conferenceLockIndication ->
[<<0:1,1:5>>|enc_ConferenceLockIndication(ChoiceVal)];
ChoiceTag =:= conferenceUnlockIndication ->
[<<0:1,2:5>>|enc_ConferenceUnlockIndication(ChoiceVal)];
ChoiceTag =:= conferenceTerminateIndication ->
[<<0:1,3:5>>|enc_ConferenceTerminateIndication(ChoiceVal)];
ChoiceTag =:= conferenceEjectUserIndication ->
[<<0:1,4:5>>|enc_ConferenceEjectUserIndication(ChoiceVal)];
ChoiceTag =:= conferenceTransferIndication ->
[<<0:1,5:5>>|enc_ConferenceTransferIndication(ChoiceVal)];
ChoiceTag =:= rosterUpdateIndication ->
[<<0:1,6:5>>|enc_RosterUpdateIndication(ChoiceVal)];
ChoiceTag =:= applicationInvokeIndication ->
[<<0:1,7:5>>|enc_ApplicationInvokeIndication(ChoiceVal)];
ChoiceTag =:= registryMonitorEntryIndication ->
[<<0:1,8:5>>|enc_RegistryMonitorEntryIndication(ChoiceVal)];
ChoiceTag =:= conductorAssignIndication ->
[<<0:1,9:5>>|enc_ConductorAssignIndication(ChoiceVal)];
ChoiceTag =:= conductorReleaseIndication ->
[<<0:1,10:5>>|enc_ConductorReleaseIndication(ChoiceVal)];
ChoiceTag =:= conductorPermissionAskIndication ->
[<<0:1,11:5>>|enc_ConductorPermissionAskIndication(ChoiceVal)];
ChoiceTag =:= conductorPermissionGrantIndication ->
[<<0:1,12:5>>|enc_ConductorPermissionGrantIndication(ChoiceVal)];
ChoiceTag =:= conferenceTimeRemainingIndication ->
[<<0:1,13:5>>|enc_ConferenceTimeRemainingIndication(ChoiceVal)];
ChoiceTag =:= conferenceTimeInquireIndication ->
[<<0:1,14:5>>|enc_ConferenceTimeInquireIndication(ChoiceVal)];
ChoiceTag =:= conferenceTimeExtendIndication ->
[<<0:1,15:5>>|enc_ConferenceTimeExtendIndication(ChoiceVal)];
ChoiceTag =:= conferenceAssistanceIndication ->
[<<0:1,16:5>>|enc_ConferenceAssistanceIndication(ChoiceVal)];
ChoiceTag =:= textMessageIndication ->
[<<0:1,17:5>>|enc_TextMessageIndication(ChoiceVal)];
ChoiceTag =:= nonStandardIndication ->
[<<0:1,18:5>>|enc_NonStandardPDU(ChoiceVal)]
end.


dec_IndicationPDU(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
<<V1@V0:5/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_UserIDIndication(Bytes2)
end,
{{userIDIndication,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_ConferenceLockIndication(Bytes2)
end,
{{conferenceLockIndication,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_ConferenceUnlockIndication(Bytes2)
end,
{{conferenceUnlockIndication,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_ConferenceTerminateIndication(Bytes2)
end,
{{conferenceTerminateIndication,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_ConferenceEjectUserIndication(Bytes2)
end,
{{conferenceEjectUserIndication,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_ConferenceTransferIndication(Bytes2)
end,
{{conferenceTransferIndication,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_RosterUpdateIndication(Bytes2)
end,
{{rosterUpdateIndication,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_ApplicationInvokeIndication(Bytes2)
end,
{{applicationInvokeIndication,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
dec_RegistryMonitorEntryIndication(Bytes2)
end,
{{registryMonitorEntryIndication,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
dec_ConductorAssignIndication(Bytes2)
end,
{{conductorAssignIndication,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
dec_ConductorReleaseIndication(Bytes2)
end,
{{conductorReleaseIndication,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
dec_ConductorPermissionAskIndication(Bytes2)
end,
{{conductorPermissionAskIndication,Val},NewBytes};
12 ->
{Val,NewBytes} = begin
dec_ConductorPermissionGrantIndication(Bytes2)
end,
{{conductorPermissionGrantIndication,Val},NewBytes};
13 ->
{Val,NewBytes} = begin
dec_ConferenceTimeRemainingIndication(Bytes2)
end,
{{conferenceTimeRemainingIndication,Val},NewBytes};
14 ->
{Val,NewBytes} = begin
dec_ConferenceTimeInquireIndication(Bytes2)
end,
{{conferenceTimeInquireIndication,Val},NewBytes};
15 ->
{Val,NewBytes} = begin
dec_ConferenceTimeExtendIndication(Bytes2)
end,
{{conferenceTimeExtendIndication,Val},NewBytes};
16 ->
{Val,NewBytes} = begin
dec_ConferenceAssistanceIndication(Bytes2)
end,
{{conferenceAssistanceIndication,Val},NewBytes};
17 ->
{Val,NewBytes} = begin
dec_TextMessageIndication(Bytes2)
end,
{{textMessageIndication,Val},NewBytes};
18 ->
{Val,NewBytes} = begin
dec_NonStandardPDU(Bytes2)
end,
{{nonStandardIndication,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} =
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

%%%
%%% Run-time functions.
%%%

dec_components1(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components1(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UserData_SETOF'(Bytes),
dec_components1(Num-1, Remain, [Term|Acc]).

dec_components10(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components10(Num, Bytes, Acc) ->
{Term,Remain} = begin
V3@Pad2 = bit_size(Bytes) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@V4:V3@V0/binary-unit:16,V3@Buf5/bitstring>> = Bytes,
{V3@V6,V3@Buf7}  = {decode_chars_16bit(V3@V4),V3@Buf5},
{V3@V6,V3@Buf7}
end,
dec_components10(Num-1, Remain, [Term|Acc]).

dec_components11(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components11(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ApplicationRecord_nonCollapsingCapabilities_SETOF'(Bytes),
dec_components11(Num-1, Remain, [Term|Acc]).

dec_components12(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components12(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ApplicationInvokeSpecifier_expectedCapabilitySet_SETOF'(Bytes),
dec_components12(Num-1, Remain, [Term|Acc]).

dec_components13(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components13(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V4@V0,V4@Buf1} = case Bytes of
<<0:1,V4@V3:3/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> terminate;
1 -> ejectUser;
2 -> add;
3 -> lockUnlock;
4 -> transfer;
_ -> exit({error,{asn1,{decode_enumerated,{V4@V3,[terminate,ejectUser,add,lockUnlock,transfer]}}}})
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
V4@Pad9 = bit_size(V4@Buf5) band 7,
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<_:V4@Pad9,0:1,V4@V11:7,V4@Buf12/bitstring>> when V4@V11 =/= 0 ->
{V4@V11,V4@Buf12};
<<_:V4@Pad9,1:1,0:1,V4@V12:14,V4@Buf13/bitstring>> when V4@V12 =/= 0 ->
{V4@V12,V4@Buf13}
end,
<<V4@V14:V4@V6/unit:8,V4@Buf15/bitstring>> = V4@Buf7,
{V4@V14,V4@Buf15}
end,
V4@Int16 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int16,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,
dec_components13(Num-1, Remain, [Term|Acc]).

dec_components14(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components14(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V5@V0,V5@Buf1} = case Bytes of
<<0:1,V5@V3:3/unsigned-unit:1,V5@Buf4/bitstring>> ->
V5@Int5 = case V5@V3 of
0 -> terminate;
1 -> ejectUser;
2 -> add;
3 -> lockUnlock;
4 -> transfer;
_ -> exit({error,{asn1,{decode_enumerated,{V5@V3,[terminate,ejectUser,add,lockUnlock,transfer]}}}})
end,
{V5@Int5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,V5@Buf5/bitstring>> ->
V5@Pad9 = bit_size(V5@Buf5) band 7,
{V5@V6,V5@Buf7} = case V5@Buf5 of
<<_:V5@Pad9,0:1,V5@V11:7,V5@Buf12/bitstring>> when V5@V11 =/= 0 ->
{V5@V11,V5@Buf12};
<<_:V5@Pad9,1:1,0:1,V5@V12:14,V5@Buf13/bitstring>> when V5@V12 =/= 0 ->
{V5@V12,V5@Buf13}
end,
<<V5@V14:V5@V6/unit:8,V5@Buf15/bitstring>> = V5@Buf7,
{V5@V14,V5@Buf15}
end,
V5@Int16 = case V5@V3 of
_ -> {asn1_enum,V5@V3}
end,
{V5@Int16,V5@Buf4}
end,
{V5@V0,V5@Buf1}
end,
dec_components14(Num-1, Remain, [Term|Acc]).

dec_components15(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components15(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V6@V0,V6@Buf1} = case Bytes of
<<0:1,V6@V3:3/unsigned-unit:1,V6@Buf4/bitstring>> ->
V6@Int5 = case V6@V3 of
0 -> terminate;
1 -> ejectUser;
2 -> add;
3 -> lockUnlock;
4 -> transfer;
_ -> exit({error,{asn1,{decode_enumerated,{V6@V3,[terminate,ejectUser,add,lockUnlock,transfer]}}}})
end,
{V6@Int5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V6,V6@Buf7};
<<1:1,V6@Buf5/bitstring>> ->
V6@Pad9 = bit_size(V6@Buf5) band 7,
{V6@V6,V6@Buf7} = case V6@Buf5 of
<<_:V6@Pad9,0:1,V6@V11:7,V6@Buf12/bitstring>> when V6@V11 =/= 0 ->
{V6@V11,V6@Buf12};
<<_:V6@Pad9,1:1,0:1,V6@V12:14,V6@Buf13/bitstring>> when V6@V12 =/= 0 ->
{V6@V12,V6@Buf13}
end,
<<V6@V14:V6@V6/unit:8,V6@Buf15/bitstring>> = V6@Buf7,
{V6@V14,V6@Buf15}
end,
V6@Int16 = case V6@V3 of
_ -> {asn1_enum,V6@V3}
end,
{V6@Int16,V6@Buf4}
end,
{V6@V0,V6@Buf1}
end,
dec_components15(Num-1, Remain, [Term|Acc]).

dec_components16(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components16(Num, Bytes, Acc) ->
{Term,Remain} = dec_ConferenceDescriptor(Bytes),
dec_components16(Num-1, Remain, [Term|Acc]).

dec_components17(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components17(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V7@V0,V7@Buf1} = case Bytes of
<<0:1,V7@V3:3/unsigned-unit:1,V7@Buf4/bitstring>> ->
V7@Int5 = case V7@V3 of
0 -> terminate;
1 -> ejectUser;
2 -> add;
3 -> lockUnlock;
4 -> transfer;
_ -> exit({error,{asn1,{decode_enumerated,{V7@V3,[terminate,ejectUser,add,lockUnlock,transfer]}}}})
end,
{V7@Int5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V6,V7@Buf7};
<<1:1,V7@Buf5/bitstring>> ->
V7@Pad9 = bit_size(V7@Buf5) band 7,
{V7@V6,V7@Buf7} = case V7@Buf5 of
<<_:V7@Pad9,0:1,V7@V11:7,V7@Buf12/bitstring>> when V7@V11 =/= 0 ->
{V7@V11,V7@Buf12};
<<_:V7@Pad9,1:1,0:1,V7@V12:14,V7@Buf13/bitstring>> when V7@V12 =/= 0 ->
{V7@V12,V7@Buf13}
end,
<<V7@V14:V7@V6/unit:8,V7@Buf15/bitstring>> = V7@Buf7,
{V7@V14,V7@Buf15}
end,
V7@Int16 = case V7@V3 of
_ -> {asn1_enum,V7@V3}
end,
{V7@Int16,V7@Buf4}
end,
{V7@V0,V7@Buf1}
end,
dec_components17(Num-1, Remain, [Term|Acc]).

dec_components18(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components18(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V8@V0,V8@Buf1} = case Bytes of
<<0:1,V8@V3:3/unsigned-unit:1,V8@Buf4/bitstring>> ->
V8@Int5 = case V8@V3 of
0 -> terminate;
1 -> ejectUser;
2 -> add;
3 -> lockUnlock;
4 -> transfer;
_ -> exit({error,{asn1,{decode_enumerated,{V8@V3,[terminate,ejectUser,add,lockUnlock,transfer]}}}})
end,
{V8@Int5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V6,V8@Buf7};
<<1:1,V8@Buf5/bitstring>> ->
V8@Pad9 = bit_size(V8@Buf5) band 7,
{V8@V6,V8@Buf7} = case V8@Buf5 of
<<_:V8@Pad9,0:1,V8@V11:7,V8@Buf12/bitstring>> when V8@V11 =/= 0 ->
{V8@V11,V8@Buf12};
<<_:V8@Pad9,1:1,0:1,V8@V12:14,V8@Buf13/bitstring>> when V8@V12 =/= 0 ->
{V8@V12,V8@Buf13}
end,
<<V8@V14:V8@V6/unit:8,V8@Buf15/bitstring>> = V8@Buf7,
{V8@V14,V8@Buf15}
end,
V8@Int16 = case V8@V3 of
_ -> {asn1_enum,V8@V3}
end,
{V8@Int16,V8@Buf4}
end,
{V8@V0,V8@Buf1}
end,
dec_components18(Num-1, Remain, [Term|Acc]).

dec_components19(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components19(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V9@V0,V9@Buf1} = case Bytes of
<<0:1,V9@V3:3/unsigned-unit:1,V9@Buf4/bitstring>> ->
V9@Int5 = case V9@V3 of
0 -> terminate;
1 -> ejectUser;
2 -> add;
3 -> lockUnlock;
4 -> transfer;
_ -> exit({error,{asn1,{decode_enumerated,{V9@V3,[terminate,ejectUser,add,lockUnlock,transfer]}}}})
end,
{V9@Int5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<0:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V6,V9@Buf7};
<<1:1,V9@Buf5/bitstring>> ->
V9@Pad9 = bit_size(V9@Buf5) band 7,
{V9@V6,V9@Buf7} = case V9@Buf5 of
<<_:V9@Pad9,0:1,V9@V11:7,V9@Buf12/bitstring>> when V9@V11 =/= 0 ->
{V9@V11,V9@Buf12};
<<_:V9@Pad9,1:1,0:1,V9@V12:14,V9@Buf13/bitstring>> when V9@V12 =/= 0 ->
{V9@V12,V9@Buf13}
end,
<<V9@V14:V9@V6/unit:8,V9@Buf15/bitstring>> = V9@Buf7,
{V9@V14,V9@Buf15}
end,
V9@Int16 = case V9@V3 of
_ -> {asn1_enum,V9@V3}
end,
{V9@Int16,V9@Buf4}
end,
{V9@V0,V9@Buf1}
end,
dec_components19(Num-1, Remain, [Term|Acc]).

dec_components2(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components2(Num, Bytes, Acc) ->
{Term,Remain} = dec_ChallengeItem(Bytes),
dec_components2(Num-1, Remain, [Term|Acc]).

dec_components20(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components20(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V10@V0,V10@Buf1} = case Bytes of
<<0:1,V10@V3:3/unsigned-unit:1,V10@Buf4/bitstring>> ->
V10@Int5 = case V10@V3 of
0 -> terminate;
1 -> ejectUser;
2 -> add;
3 -> lockUnlock;
4 -> transfer;
_ -> exit({error,{asn1,{decode_enumerated,{V10@V3,[terminate,ejectUser,add,lockUnlock,transfer]}}}})
end,
{V10@Int5,V10@Buf4};
<<1:1,V10@Buf2/bitstring>> ->
{V10@V3,V10@Buf4} = case V10@Buf2 of
<<0:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V6,V10@Buf7};
<<1:1,V10@Buf5/bitstring>> ->
V10@Pad9 = bit_size(V10@Buf5) band 7,
{V10@V6,V10@Buf7} = case V10@Buf5 of
<<_:V10@Pad9,0:1,V10@V11:7,V10@Buf12/bitstring>> when V10@V11 =/= 0 ->
{V10@V11,V10@Buf12};
<<_:V10@Pad9,1:1,0:1,V10@V12:14,V10@Buf13/bitstring>> when V10@V12 =/= 0 ->
{V10@V12,V10@Buf13}
end,
<<V10@V14:V10@V6/unit:8,V10@Buf15/bitstring>> = V10@Buf7,
{V10@V14,V10@Buf15}
end,
V10@Int16 = case V10@V3 of
_ -> {asn1_enum,V10@V3}
end,
{V10@Int16,V10@Buf4}
end,
{V10@V0,V10@Buf1}
end,
dec_components20(Num-1, Remain, [Term|Acc]).

dec_components21(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components21(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V11@V0,V11@Buf1} = case Bytes of
<<0:1,V11@V3:3/unsigned-unit:1,V11@Buf4/bitstring>> ->
V11@Int5 = case V11@V3 of
0 -> terminate;
1 -> ejectUser;
2 -> add;
3 -> lockUnlock;
4 -> transfer;
_ -> exit({error,{asn1,{decode_enumerated,{V11@V3,[terminate,ejectUser,add,lockUnlock,transfer]}}}})
end,
{V11@Int5,V11@Buf4};
<<1:1,V11@Buf2/bitstring>> ->
{V11@V3,V11@Buf4} = case V11@Buf2 of
<<0:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V6,V11@Buf7};
<<1:1,V11@Buf5/bitstring>> ->
V11@Pad9 = bit_size(V11@Buf5) band 7,
{V11@V6,V11@Buf7} = case V11@Buf5 of
<<_:V11@Pad9,0:1,V11@V11:7,V11@Buf12/bitstring>> when V11@V11 =/= 0 ->
{V11@V11,V11@Buf12};
<<_:V11@Pad9,1:1,0:1,V11@V12:14,V11@Buf13/bitstring>> when V11@V12 =/= 0 ->
{V11@V12,V11@Buf13}
end,
<<V11@V14:V11@V6/unit:8,V11@Buf15/bitstring>> = V11@Buf7,
{V11@V14,V11@Buf15}
end,
V11@Int16 = case V11@V3 of
_ -> {asn1_enum,V11@V3}
end,
{V11@Int16,V11@Buf4}
end,
{V11@V0,V11@Buf1}
end,
dec_components21(Num-1, Remain, [Term|Acc]).

dec_components22(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components22(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V12@V0,V12@Buf1} = case Bytes of
<<0:1,V12@V3:3/unsigned-unit:1,V12@Buf4/bitstring>> ->
V12@Int5 = case V12@V3 of
0 -> terminate;
1 -> ejectUser;
2 -> add;
3 -> lockUnlock;
4 -> transfer;
_ -> exit({error,{asn1,{decode_enumerated,{V12@V3,[terminate,ejectUser,add,lockUnlock,transfer]}}}})
end,
{V12@Int5,V12@Buf4};
<<1:1,V12@Buf2/bitstring>> ->
{V12@V3,V12@Buf4} = case V12@Buf2 of
<<0:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V6,V12@Buf7};
<<1:1,V12@Buf5/bitstring>> ->
V12@Pad9 = bit_size(V12@Buf5) band 7,
{V12@V6,V12@Buf7} = case V12@Buf5 of
<<_:V12@Pad9,0:1,V12@V11:7,V12@Buf12/bitstring>> when V12@V11 =/= 0 ->
{V12@V11,V12@Buf12};
<<_:V12@Pad9,1:1,0:1,V12@V12:14,V12@Buf13/bitstring>> when V12@V12 =/= 0 ->
{V12@V12,V12@Buf13}
end,
<<V12@V14:V12@V6/unit:8,V12@Buf15/bitstring>> = V12@Buf7,
{V12@V14,V12@Buf15}
end,
V12@Int16 = case V12@V3 of
_ -> {asn1_enum,V12@V3}
end,
{V12@Int16,V12@Buf4}
end,
{V12@V0,V12@Buf1}
end,
dec_components22(Num-1, Remain, [Term|Acc]).

dec_components23(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components23(Num, Bytes, Acc) ->
{Term,Remain} = begin
V13@Pad2 = bit_size(Bytes) band 7,
<<_:V13@Pad2,V13@V0:2/unsigned-unit:8,V13@Buf1/bitstring>> = Bytes,
V13@Add4 = V13@V0 + 1001,
{V13@Add4,V13@Buf1}
end,
dec_components23(Num-1, Remain, [Term|Acc]).

dec_components24(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components24(Num, Bytes, Acc) ->
{Term,Remain} = begin
V14@Pad2 = bit_size(Bytes) band 7,
<<_:V14@Pad2,V14@V0:2/unsigned-unit:8,V14@Buf1/bitstring>> = Bytes,
V14@Add4 = V14@V0 + 1001,
{V14@Add4,V14@Buf1}
end,
dec_components24(Num-1, Remain, [Term|Acc]).

dec_components25(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components25(Num, Bytes, Acc) ->
{Term,Remain} = begin
V15@Pad2 = bit_size(Bytes) band 7,
<<_:V15@Pad2,V15@V0:2/unsigned-unit:8,V15@Buf1/bitstring>> = Bytes,
V15@Add4 = V15@V0 + 1001,
{V15@Add4,V15@Buf1}
end,
dec_components25(Num-1, Remain, [Term|Acc]).

dec_components26(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components26(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_refresh_SETOF'(Bytes),
dec_components26(Num-1, Remain, [Term|Acc]).

dec_components27(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components27(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_RosterUpdateIndication_nodeInformation_nodeRecordList_update_SETOF'(Bytes),
dec_components27(Num-1, Remain, [Term|Acc]).

dec_components28(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components28(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_refresh_SETOF'(Bytes),
dec_components28(Num-1, Remain, [Term|Acc]).

dec_components29(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components29(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationRecordList_update_SETOF'(Bytes),
dec_components29(Num-1, Remain, [Term|Acc]).

dec_components3(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components3(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_NetworkAddress_SEQOF'(Bytes),
dec_components3(Num-1, Remain, [Term|Acc]).

dec_components30(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components30(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_RosterUpdateIndication_applicationInformation_SETOF_applicationCapabilitiesList_refresh_SETOF'(Bytes),
dec_components30(Num-1, Remain, [Term|Acc]).

dec_components31(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components31(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_RosterUpdateIndication_applicationInformation_SETOF'(Bytes),
dec_components31(Num-1, Remain, [Term|Acc]).

dec_components32(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components32(Num, Bytes, Acc) ->
{Term,Remain} = dec_ApplicationInvokeSpecifier(Bytes),
dec_components32(Num-1, Remain, [Term|Acc]).

dec_components33(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components33(Num, Bytes, Acc) ->
{Term,Remain} = begin
V16@Pad2 = bit_size(Bytes) band 7,
<<_:V16@Pad2,V16@V0:2/unsigned-unit:8,V16@Buf1/bitstring>> = Bytes,
V16@Add4 = V16@V0 + 1001,
{V16@Add4,V16@Buf1}
end,
dec_components33(Num-1, Remain, [Term|Acc]).

dec_components34(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components34(Num, Bytes, Acc) ->
{Term,Remain} = begin
V17@Pad2 = bit_size(Bytes) band 7,
<<_:V17@Pad2,V17@V0:2/unsigned-unit:8,V17@Buf1/bitstring>> = Bytes,
V17@Add4 = V17@V0 + 1001,
{V17@Add4,V17@Buf1}
end,
dec_components34(Num-1, Remain, [Term|Acc]).

dec_components35(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components35(Num, Bytes, Acc) ->
{Term,Remain} = begin
V18@Pad2 = bit_size(Bytes) band 7,
<<_:V18@Pad2,V18@V0:2/unsigned-unit:8,V18@Buf1/bitstring>> = Bytes,
V18@Add4 = V18@V0 + 1001,
{V18@Add4,V18@Buf1}
end,
dec_components35(Num-1, Remain, [Term|Acc]).

dec_components36(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components36(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_RosterRefreshRequest_applicationList_applicationKeyList_SETOF'(Bytes),
dec_components36(Num-1, Remain, [Term|Acc]).

dec_components37(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components37(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_RosterRefreshRequest_sessionList_sessionKeyList_SETOF'(Bytes),
dec_components37(Num-1, Remain, [Term|Acc]).

dec_components4(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components4(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ISDNConnection_circuitTypes_SETOF'(Bytes),
dec_components4(Num-1, Remain, [Term|Acc]).

dec_components5(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components5(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CSDNConnection_circuitTypes_SETOF'(Bytes),
dec_components5(Num-1, Remain, [Term|Acc]).

dec_components6(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components6(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_NetworkAddressV2_SETOF_networkConnection_aggregatedConnections_connectionList_SETOF'(Bytes),
dec_components6(Num-1, Remain, [Term|Acc]).

dec_components7(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components7(Num, Bytes, Acc) ->
{Term,Remain} = dec_ChannelAggregationMethod(Bytes),
dec_components7(Num-1, Remain, [Term|Acc]).

dec_components8(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components8(Num, Bytes, Acc) ->
{Term,Remain} = dec_Profile(Bytes),
dec_components8(Num-1, Remain, [Term|Acc]).

dec_components9(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components9(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_NetworkAddressV2_SETOF'(Bytes),
dec_components9(Num-1, Remain, [Term|Acc]).

align(Bin) when is_binary(Bin) ->
    Bin;
align(BitStr) when is_bitstring(BitStr) ->
    AlignBits = bit_size(BitStr) rem 8,
    <<_:AlignBits,Rest/binary>> = BitStr,
    Rest.

complete(L0) ->
    L = complete(L0, []),
    case list_to_bitstring(L) of
        <<>> ->
            <<0>>;
        Bin ->
            Bin
    end.

complete([], Bits, []) ->
    case Bits band 7 of
        0 ->
            [];
        N ->
            [<<0:(8 - N)>>]
    end;
complete([], Bits, [H|More]) ->
    complete(H, Bits, More);
complete([align|T], Bits, More) ->
    case Bits band 7 of
        0 ->
            complete(T, More);
        1 ->
            [<<0:7>>|complete(T, More)];
        2 ->
            [<<0:6>>|complete(T, More)];
        3 ->
            [<<0:5>>|complete(T, More)];
        4 ->
            [<<0:4>>|complete(T, More)];
        5 ->
            [<<0:3>>|complete(T, More)];
        6 ->
            [<<0:2>>|complete(T, More)];
        7 ->
            [<<0:1>>|complete(T, More)]
    end;
complete([[]|T], Bits, More) ->
    complete(T, Bits, More);
complete([[_|_] = H], Bits, More) ->
    complete(H, Bits, More);
complete([[_|_] = H|T], Bits, More) ->
    complete(H, Bits, [T|More]);
complete([H|T], Bits, More) when is_integer(H); is_binary(H) ->
    [H|complete(T, Bits, More)];
complete([H|T], Bits, More) ->
    [H|complete(T, Bits + bit_size(H), More)];
complete(Bin, Bits, More) when is_binary(Bin) ->
    [Bin|complete([], Bits, More)];
complete(Bin, Bits, More) ->
    [Bin|complete([], Bits + bit_size(Bin), More)].

complete([], []) ->
    [];
complete([], [H|More]) ->
    complete(H, More);
complete([align|T], More) ->
    complete(T, More);
complete([[]|T], More) ->
    complete(T, More);
complete([[_|_] = H], More) ->
    complete(H, More);
complete([[_|_] = H|T], More) ->
    complete(H, [T|More]);
complete([H|T], More) when is_integer(H); is_binary(H) ->
    [H|complete(T, More)];
complete([H|T], More) ->
    [H|complete(T, bit_size(H), More)];
complete(Bin, More) when is_binary(Bin) ->
    [Bin|complete([], More)];
complete(Bin, More) ->
    [Bin|complete([], bit_size(Bin), More)].

dec_subidentifiers([H|T], Av, Al) when H >= 128 ->
    dec_subidentifiers(T, Av bsl 7 bor H band 127, Al);
dec_subidentifiers([H|T], Av, Al) ->
    dec_subidentifiers(T, 0, [Av bsl 7 bor H|Al]);
dec_subidentifiers([], _Av, Al) ->
    lists:reverse(Al).

decode_chars(Val, N, Chars) ->
    [
     element(C + 1, Chars) ||
         <<C:N>> <= Val
    ].

decode_chars_16bit(Val) ->
    Cs =
        [
         C ||
             <<C:16>> <= Val
        ],
    decode_chars_16bit_1(Cs).

decode_chars_16bit_1([H|T]) when H < 256 ->
    [H|decode_chars_16bit_1(T)];
decode_chars_16bit_1([H|T]) ->
    [{0,0,H bsr 8,H band 255}|decode_chars_16bit_1(T)];
decode_chars_16bit_1([]) ->
    [].

decode_fragmented(SegSz0, Buf0, Unit) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Res:SegSz/bitstring,Buf/bitstring>> = Buf0,
    decode_fragmented_1(Buf, Unit, Res).

decode_fragmented_1(<<0:1,N:7,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>,Buf};
decode_fragmented_1(<<1:1,0:1,N:14,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>,Buf};
decode_fragmented_1(<<1:1,1:1,SegSz0:6,Buf0/bitstring>>, Unit, Res0) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Frag:SegSz/bitstring,Buf/bitstring>> = Buf0,
    Res = <<Res0/bitstring,Frag/bitstring>>,
    decode_fragmented_1(Buf, Unit, Res).

decode_length(Buffer) ->
    case align(Buffer) of
        <<0:1,Oct:7,Rest/binary>> ->
            {Oct,Rest};
        <<2:2,Val:14,Rest/binary>> ->
            {Val,Rest};
        <<3:2,_Val:14,_Rest/binary>> ->
            exit({error,{asn1,{decode_length,{nyi,above_16k}}}})
    end.

decode_oid(Octets) ->
    [First|Rest] = dec_subidentifiers(Octets, 0, []),
    Idlist =
        if
            First < 40 ->
                [0,First|Rest];
            First < 80 ->
                [1,First - 40|Rest];
            true ->
                [2,First - 80|Rest]
        end,
    list_to_tuple(Idlist).

e_o_e(Num) when Num < 128 ->
    Num bor 128;
e_o_e(Num) ->
    [e_o_e(Num bsr 7),Num band 127 bor 128].

e_object_element(Num) when Num < 128 ->
    [Num];
e_object_element(Num) ->
    [e_o_e(Num bsr 7),Num band 127].

e_object_elements([], Acc) ->
    lists:reverse(Acc);
e_object_elements([H|T], Acc) ->
    e_object_elements(T, [e_object_element(H)|Acc]).

e_object_identifier([E1,E2|Tail])
    when E1 >= 0, E1 < 2, E2 < 40; E1 =:= 2 ->
    Head = 40 * E1 + E2,
    e_object_elements([Head|Tail], []);
e_object_identifier([_,_|_Tail] = Oid) ->
    exit({error,{asn1,{illegal_value,Oid}}}).

enc_char(C0, Lb, Tab) ->
    try element(C0 - Lb, Tab) of
        ill ->
            illegal_char_error();
        C ->
            C
    catch
        error:badarg ->
            illegal_char_error()
    end.

encode_chars(Val, NumBits, {Lb,Tab}) ->
    <<
      <<(enc_char(C, Lb, Tab)):NumBits>> ||
          C <- Val
    >>.

encode_chars_16bit(Val) ->
    L = [
         case C of
             {0,0,A,B} ->
                 [A,B];
             C when is_integer(C) ->
                 [0,C]
         end ||
             C <- Val
        ],
    iolist_to_binary(L).

encode_fragmented(Bin, Unit) ->
    encode_fragmented_1(Bin, Unit, 4).

encode_fragmented_1(Bin, Unit, N) ->
    SegSz = Unit * N * 16384,
    case Bin of
        <<B:SegSz/bitstring,T/bitstring>> ->
            [<<3:2,N:6>>,B|encode_fragmented_1(T, Unit, N)];
        _ when N > 1 ->
            encode_fragmented_1(Bin, Unit, N - 1);
        _ ->
            case bit_size(Bin) div Unit of
                Len when Len < 128 ->
                    [Len,Bin];
                Len when Len < 16384 ->
                    [<<2:2,Len:14>>,Bin]
            end
    end.

encode_oid(Val) when is_tuple(Val) ->
    encode_oid(tuple_to_list(Val));
encode_oid(Val) ->
    iolist_to_binary(e_object_identifier(Val)).

encode_unconstrained_number(Val) when Val >= 0 ->
    if
        Val < 128 ->
            [1,Val];
        Val < 256 ->
            [<<2,0>>,Val];
        true ->
            case binary:encode_unsigned(Val) of
                <<0:1,_/bitstring>> = Bin ->
                    case byte_size(Bin) of
                        Sz when Sz < 128 ->
                            [Sz,Bin];
                        Sz when Sz < 16384 ->
                            [<<2:2,Sz:14>>,Bin]
                    end;
                <<1:1,_/bitstring>> = Bin ->
                    case byte_size(Bin) + 1 of
                        Sz when Sz < 128 ->
                            [Sz,0,Bin];
                        Sz when Sz < 16384 ->
                            [<<2:2,Sz:14,0:8>>,Bin]
                    end
            end
    end;
encode_unconstrained_number(Val) ->
    Oct = enint(Val, []),
    Len = length(Oct),
    if
        Len < 128 ->
            [Len|Oct];
        Len < 16384 ->
            [<<2:2,Len:14>>|Oct]
    end.

enint(- 1, [B1|T]) when B1 > 127 ->
    [B1|T];
enint(N, Acc) ->
    enint(N bsr 8, [N band 255|Acc]).

extension_bitmap(Val, Pos, Limit) ->
    extension_bitmap(Val, Pos, Limit, 0).

extension_bitmap(_Val, Pos, Limit, Acc) when Pos >= Limit ->
    Acc;
extension_bitmap(Val, Pos, Limit, Acc) ->
    Bit =
        case element(Pos, Val) of
            asn1_NOVALUE ->
                0;
            _ ->
                1
        end,
    extension_bitmap(Val, Pos + 1, Limit, Acc bsl 1 bor Bit).

illegal_char_error() ->
    error({error,{asn1,"value forbidden by FROM constraint"}}).

skipextensions(Bytes0, Nr, ExtensionBitstr)
    when is_bitstring(ExtensionBitstr) ->
    Prev = Nr - 1,
    case ExtensionBitstr of
        <<_:Prev,1:1,_/bitstring>> ->
            {Len,Bytes1} = decode_length(Bytes0),
            <<_:Len/binary,Bytes2/bitstring>> = Bytes1,
            skipextensions(Bytes2, Nr + 1, ExtensionBitstr);
        <<_:Prev,0:1,_/bitstring>> ->
            skipextensions(Bytes0, Nr + 1, ExtensionBitstr);
        _ ->
            Bytes0
    end.
