%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:1.7
%% Purpose: encoder and decoder to the types in mod MCS-PROTOCOL

-module(mcsp_ber).
-include("mcsp.hrl").
-define('RT_BER',asn1rt_ber_bin_v2).
-asn1_info([{vsn,'1.7'},
            {module,'MCS-PROTOCOL'},
            {options,[ber_bin_v2,optimize,nif,{i,[46]}]}]).

-export([encoding_rule/0]).
-export([
'enc_ChannelId'/2,
'enc_StaticChannelId'/2,
'enc_DynamicChannelId'/2,
'enc_UserId'/2,
'enc_PrivateChannelId'/2,
'enc_AssignedChannelId'/2,
'enc_TokenId'/2,
'enc_TokenStatus'/2,
'enc_DataPriority'/2,
'enc_Segmentation'/2,
'enc_DomainParameters'/2,
'enc_Connect-Initial'/2,
'enc_Connect-Response'/2,
'enc_Connect-Additional'/2,
'enc_Connect-Result'/2,
'enc_PlumbDomainIndication'/2,
'enc_ErectDomainRequest'/2,
'enc_ChannelAttributes'/2,
'enc_MergeChannelsRequest'/2,
'enc_MergeChannelsConfirm'/2,
'enc_PurgeChannelsIndication'/2,
'enc_TokenAttributes'/2,
'enc_MergeTokensRequest'/2,
'enc_MergeTokensConfirm'/2,
'enc_PurgeTokensIndication'/2,
'enc_DisconnectProviderUltimatum'/2,
'enc_RejectMCSPDUUltimatum'/2,
'enc_AttachUserRequest'/2,
'enc_AttachUserConfirm'/2,
'enc_DetachUserRequest'/2,
'enc_DetachUserIndication'/2,
'enc_ChannelJoinRequest'/2,
'enc_ChannelJoinConfirm'/2,
'enc_ChannelLeaveRequest'/2,
'enc_ChannelConveneRequest'/2,
'enc_ChannelConveneConfirm'/2,
'enc_ChannelDisbandRequest'/2,
'enc_ChannelDisbandIndication'/2,
'enc_ChannelAdmitRequest'/2,
'enc_ChannelAdmitIndication'/2,
'enc_ChannelExpelRequest'/2,
'enc_ChannelExpelIndication'/2,
'enc_SendDataRequest'/2,
'enc_SendDataIndication'/2,
'enc_UniformSendDataRequest'/2,
'enc_UniformSendDataIndication'/2,
'enc_TokenGrabRequest'/2,
'enc_TokenGrabConfirm'/2,
'enc_TokenInhibitRequest'/2,
'enc_TokenInhibitConfirm'/2,
'enc_TokenGiveRequest'/2,
'enc_TokenGiveIndication'/2,
'enc_TokenGiveResponse'/2,
'enc_TokenGiveConfirm'/2,
'enc_TokenPleaseRequest'/2,
'enc_TokenPleaseIndication'/2,
'enc_TokenReleaseRequest'/2,
'enc_TokenReleaseConfirm'/2,
'enc_TokenTestRequest'/2,
'enc_TokenTestConfirm'/2,
'enc_Reason'/2,
'enc_Result'/2,
'enc_Diagnostic'/2,
'enc_ConnectMCSPDU'/2,
'enc_DomainMCSPDU'/2
]).

-export([
'dec_ChannelId'/2,
'dec_StaticChannelId'/2,
'dec_DynamicChannelId'/2,
'dec_UserId'/2,
'dec_PrivateChannelId'/2,
'dec_AssignedChannelId'/2,
'dec_TokenId'/2,
'dec_TokenStatus'/2,
'dec_DataPriority'/2,
'dec_Segmentation'/2,
'dec_DomainParameters'/2,
'dec_Connect-Initial'/2,
'dec_Connect-Response'/2,
'dec_Connect-Additional'/2,
'dec_Connect-Result'/2,
'dec_PlumbDomainIndication'/2,
'dec_ErectDomainRequest'/2,
'dec_ChannelAttributes'/2,
'dec_MergeChannelsRequest'/2,
'dec_MergeChannelsConfirm'/2,
'dec_PurgeChannelsIndication'/2,
'dec_TokenAttributes'/2,
'dec_MergeTokensRequest'/2,
'dec_MergeTokensConfirm'/2,
'dec_PurgeTokensIndication'/2,
'dec_DisconnectProviderUltimatum'/2,
'dec_RejectMCSPDUUltimatum'/2,
'dec_AttachUserRequest'/2,
'dec_AttachUserConfirm'/2,
'dec_DetachUserRequest'/2,
'dec_DetachUserIndication'/2,
'dec_ChannelJoinRequest'/2,
'dec_ChannelJoinConfirm'/2,
'dec_ChannelLeaveRequest'/2,
'dec_ChannelConveneRequest'/2,
'dec_ChannelConveneConfirm'/2,
'dec_ChannelDisbandRequest'/2,
'dec_ChannelDisbandIndication'/2,
'dec_ChannelAdmitRequest'/2,
'dec_ChannelAdmitIndication'/2,
'dec_ChannelExpelRequest'/2,
'dec_ChannelExpelIndication'/2,
'dec_SendDataRequest'/2,
'dec_SendDataIndication'/2,
'dec_UniformSendDataRequest'/2,
'dec_UniformSendDataIndication'/2,
'dec_TokenGrabRequest'/2,
'dec_TokenGrabConfirm'/2,
'dec_TokenInhibitRequest'/2,
'dec_TokenInhibitConfirm'/2,
'dec_TokenGiveRequest'/2,
'dec_TokenGiveIndication'/2,
'dec_TokenGiveResponse'/2,
'dec_TokenGiveConfirm'/2,
'dec_TokenPleaseRequest'/2,
'dec_TokenPleaseIndication'/2,
'dec_TokenReleaseRequest'/2,
'dec_TokenReleaseConfirm'/2,
'dec_TokenTestRequest'/2,
'dec_TokenTestConfirm'/2,
'dec_Reason'/2,
'dec_Result'/2,
'dec_Diagnostic'/2,
'dec_ConnectMCSPDU'/2,
'dec_DomainMCSPDU'/2
]).

-export([info/0]).


-export([encode/2,decode/2,encode_disp/2,decode_disp/2]).

encoding_rule() ->
   ber_bin_v2.

encode(Type,Data) ->
case catch encode_disp(Type,Data) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {Bytes,_Len} ->
    {ok,Bytes};
  Bytes ->
    {ok,Bytes}
end.

decode(Type,Data) ->
case catch decode_disp(Type,element(1,?RT_BER:decode(Data,nif))
) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  Result ->
    {ok,Result}
end.

encode_disp('ChannelId',Data) -> 'enc_ChannelId'(Data);
encode_disp('StaticChannelId',Data) -> 'enc_StaticChannelId'(Data);
encode_disp('DynamicChannelId',Data) -> 'enc_DynamicChannelId'(Data);
encode_disp('UserId',Data) -> 'enc_UserId'(Data);
encode_disp('PrivateChannelId',Data) -> 'enc_PrivateChannelId'(Data);
encode_disp('AssignedChannelId',Data) -> 'enc_AssignedChannelId'(Data);
encode_disp('TokenId',Data) -> 'enc_TokenId'(Data);
encode_disp('TokenStatus',Data) -> 'enc_TokenStatus'(Data);
encode_disp('DataPriority',Data) -> 'enc_DataPriority'(Data);
encode_disp('Segmentation',Data) -> 'enc_Segmentation'(Data);
encode_disp('DomainParameters',Data) -> 'enc_DomainParameters'(Data);
encode_disp('Connect-Initial',Data) -> 'enc_Connect-Initial'(Data);
encode_disp('Connect-Response',Data) -> 'enc_Connect-Response'(Data);
encode_disp('Connect-Additional',Data) -> 'enc_Connect-Additional'(Data);
encode_disp('Connect-Result',Data) -> 'enc_Connect-Result'(Data);
encode_disp('PlumbDomainIndication',Data) -> 'enc_PlumbDomainIndication'(Data);
encode_disp('ErectDomainRequest',Data) -> 'enc_ErectDomainRequest'(Data);
encode_disp('ChannelAttributes',Data) -> 'enc_ChannelAttributes'(Data);
encode_disp('MergeChannelsRequest',Data) -> 'enc_MergeChannelsRequest'(Data);
encode_disp('MergeChannelsConfirm',Data) -> 'enc_MergeChannelsConfirm'(Data);
encode_disp('PurgeChannelsIndication',Data) -> 'enc_PurgeChannelsIndication'(Data);
encode_disp('TokenAttributes',Data) -> 'enc_TokenAttributes'(Data);
encode_disp('MergeTokensRequest',Data) -> 'enc_MergeTokensRequest'(Data);
encode_disp('MergeTokensConfirm',Data) -> 'enc_MergeTokensConfirm'(Data);
encode_disp('PurgeTokensIndication',Data) -> 'enc_PurgeTokensIndication'(Data);
encode_disp('DisconnectProviderUltimatum',Data) -> 'enc_DisconnectProviderUltimatum'(Data);
encode_disp('RejectMCSPDUUltimatum',Data) -> 'enc_RejectMCSPDUUltimatum'(Data);
encode_disp('AttachUserRequest',Data) -> 'enc_AttachUserRequest'(Data);
encode_disp('AttachUserConfirm',Data) -> 'enc_AttachUserConfirm'(Data);
encode_disp('DetachUserRequest',Data) -> 'enc_DetachUserRequest'(Data);
encode_disp('DetachUserIndication',Data) -> 'enc_DetachUserIndication'(Data);
encode_disp('ChannelJoinRequest',Data) -> 'enc_ChannelJoinRequest'(Data);
encode_disp('ChannelJoinConfirm',Data) -> 'enc_ChannelJoinConfirm'(Data);
encode_disp('ChannelLeaveRequest',Data) -> 'enc_ChannelLeaveRequest'(Data);
encode_disp('ChannelConveneRequest',Data) -> 'enc_ChannelConveneRequest'(Data);
encode_disp('ChannelConveneConfirm',Data) -> 'enc_ChannelConveneConfirm'(Data);
encode_disp('ChannelDisbandRequest',Data) -> 'enc_ChannelDisbandRequest'(Data);
encode_disp('ChannelDisbandIndication',Data) -> 'enc_ChannelDisbandIndication'(Data);
encode_disp('ChannelAdmitRequest',Data) -> 'enc_ChannelAdmitRequest'(Data);
encode_disp('ChannelAdmitIndication',Data) -> 'enc_ChannelAdmitIndication'(Data);
encode_disp('ChannelExpelRequest',Data) -> 'enc_ChannelExpelRequest'(Data);
encode_disp('ChannelExpelIndication',Data) -> 'enc_ChannelExpelIndication'(Data);
encode_disp('SendDataRequest',Data) -> 'enc_SendDataRequest'(Data);
encode_disp('SendDataIndication',Data) -> 'enc_SendDataIndication'(Data);
encode_disp('UniformSendDataRequest',Data) -> 'enc_UniformSendDataRequest'(Data);
encode_disp('UniformSendDataIndication',Data) -> 'enc_UniformSendDataIndication'(Data);
encode_disp('TokenGrabRequest',Data) -> 'enc_TokenGrabRequest'(Data);
encode_disp('TokenGrabConfirm',Data) -> 'enc_TokenGrabConfirm'(Data);
encode_disp('TokenInhibitRequest',Data) -> 'enc_TokenInhibitRequest'(Data);
encode_disp('TokenInhibitConfirm',Data) -> 'enc_TokenInhibitConfirm'(Data);
encode_disp('TokenGiveRequest',Data) -> 'enc_TokenGiveRequest'(Data);
encode_disp('TokenGiveIndication',Data) -> 'enc_TokenGiveIndication'(Data);
encode_disp('TokenGiveResponse',Data) -> 'enc_TokenGiveResponse'(Data);
encode_disp('TokenGiveConfirm',Data) -> 'enc_TokenGiveConfirm'(Data);
encode_disp('TokenPleaseRequest',Data) -> 'enc_TokenPleaseRequest'(Data);
encode_disp('TokenPleaseIndication',Data) -> 'enc_TokenPleaseIndication'(Data);
encode_disp('TokenReleaseRequest',Data) -> 'enc_TokenReleaseRequest'(Data);
encode_disp('TokenReleaseConfirm',Data) -> 'enc_TokenReleaseConfirm'(Data);
encode_disp('TokenTestRequest',Data) -> 'enc_TokenTestRequest'(Data);
encode_disp('TokenTestConfirm',Data) -> 'enc_TokenTestConfirm'(Data);
encode_disp('Reason',Data) -> 'enc_Reason'(Data);
encode_disp('Result',Data) -> 'enc_Result'(Data);
encode_disp('Diagnostic',Data) -> 'enc_Diagnostic'(Data);
encode_disp('ConnectMCSPDU',Data) -> 'enc_ConnectMCSPDU'(Data);
encode_disp('DomainMCSPDU',Data) -> 'enc_DomainMCSPDU'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('ChannelId',Data) -> 'dec_ChannelId'(Data);
decode_disp('StaticChannelId',Data) -> 'dec_StaticChannelId'(Data);
decode_disp('DynamicChannelId',Data) -> 'dec_DynamicChannelId'(Data);
decode_disp('UserId',Data) -> 'dec_UserId'(Data);
decode_disp('PrivateChannelId',Data) -> 'dec_PrivateChannelId'(Data);
decode_disp('AssignedChannelId',Data) -> 'dec_AssignedChannelId'(Data);
decode_disp('TokenId',Data) -> 'dec_TokenId'(Data);
decode_disp('TokenStatus',Data) -> 'dec_TokenStatus'(Data);
decode_disp('DataPriority',Data) -> 'dec_DataPriority'(Data);
decode_disp('Segmentation',Data) -> 'dec_Segmentation'(Data);
decode_disp('DomainParameters',Data) -> 'dec_DomainParameters'(Data);
decode_disp('Connect-Initial',Data) -> 'dec_Connect-Initial'(Data);
decode_disp('Connect-Response',Data) -> 'dec_Connect-Response'(Data);
decode_disp('Connect-Additional',Data) -> 'dec_Connect-Additional'(Data);
decode_disp('Connect-Result',Data) -> 'dec_Connect-Result'(Data);
decode_disp('PlumbDomainIndication',Data) -> 'dec_PlumbDomainIndication'(Data);
decode_disp('ErectDomainRequest',Data) -> 'dec_ErectDomainRequest'(Data);
decode_disp('ChannelAttributes',Data) -> 'dec_ChannelAttributes'(Data);
decode_disp('MergeChannelsRequest',Data) -> 'dec_MergeChannelsRequest'(Data);
decode_disp('MergeChannelsConfirm',Data) -> 'dec_MergeChannelsConfirm'(Data);
decode_disp('PurgeChannelsIndication',Data) -> 'dec_PurgeChannelsIndication'(Data);
decode_disp('TokenAttributes',Data) -> 'dec_TokenAttributes'(Data);
decode_disp('MergeTokensRequest',Data) -> 'dec_MergeTokensRequest'(Data);
decode_disp('MergeTokensConfirm',Data) -> 'dec_MergeTokensConfirm'(Data);
decode_disp('PurgeTokensIndication',Data) -> 'dec_PurgeTokensIndication'(Data);
decode_disp('DisconnectProviderUltimatum',Data) -> 'dec_DisconnectProviderUltimatum'(Data);
decode_disp('RejectMCSPDUUltimatum',Data) -> 'dec_RejectMCSPDUUltimatum'(Data);
decode_disp('AttachUserRequest',Data) -> 'dec_AttachUserRequest'(Data);
decode_disp('AttachUserConfirm',Data) -> 'dec_AttachUserConfirm'(Data);
decode_disp('DetachUserRequest',Data) -> 'dec_DetachUserRequest'(Data);
decode_disp('DetachUserIndication',Data) -> 'dec_DetachUserIndication'(Data);
decode_disp('ChannelJoinRequest',Data) -> 'dec_ChannelJoinRequest'(Data);
decode_disp('ChannelJoinConfirm',Data) -> 'dec_ChannelJoinConfirm'(Data);
decode_disp('ChannelLeaveRequest',Data) -> 'dec_ChannelLeaveRequest'(Data);
decode_disp('ChannelConveneRequest',Data) -> 'dec_ChannelConveneRequest'(Data);
decode_disp('ChannelConveneConfirm',Data) -> 'dec_ChannelConveneConfirm'(Data);
decode_disp('ChannelDisbandRequest',Data) -> 'dec_ChannelDisbandRequest'(Data);
decode_disp('ChannelDisbandIndication',Data) -> 'dec_ChannelDisbandIndication'(Data);
decode_disp('ChannelAdmitRequest',Data) -> 'dec_ChannelAdmitRequest'(Data);
decode_disp('ChannelAdmitIndication',Data) -> 'dec_ChannelAdmitIndication'(Data);
decode_disp('ChannelExpelRequest',Data) -> 'dec_ChannelExpelRequest'(Data);
decode_disp('ChannelExpelIndication',Data) -> 'dec_ChannelExpelIndication'(Data);
decode_disp('SendDataRequest',Data) -> 'dec_SendDataRequest'(Data);
decode_disp('SendDataIndication',Data) -> 'dec_SendDataIndication'(Data);
decode_disp('UniformSendDataRequest',Data) -> 'dec_UniformSendDataRequest'(Data);
decode_disp('UniformSendDataIndication',Data) -> 'dec_UniformSendDataIndication'(Data);
decode_disp('TokenGrabRequest',Data) -> 'dec_TokenGrabRequest'(Data);
decode_disp('TokenGrabConfirm',Data) -> 'dec_TokenGrabConfirm'(Data);
decode_disp('TokenInhibitRequest',Data) -> 'dec_TokenInhibitRequest'(Data);
decode_disp('TokenInhibitConfirm',Data) -> 'dec_TokenInhibitConfirm'(Data);
decode_disp('TokenGiveRequest',Data) -> 'dec_TokenGiveRequest'(Data);
decode_disp('TokenGiveIndication',Data) -> 'dec_TokenGiveIndication'(Data);
decode_disp('TokenGiveResponse',Data) -> 'dec_TokenGiveResponse'(Data);
decode_disp('TokenGiveConfirm',Data) -> 'dec_TokenGiveConfirm'(Data);
decode_disp('TokenPleaseRequest',Data) -> 'dec_TokenPleaseRequest'(Data);
decode_disp('TokenPleaseIndication',Data) -> 'dec_TokenPleaseIndication'(Data);
decode_disp('TokenReleaseRequest',Data) -> 'dec_TokenReleaseRequest'(Data);
decode_disp('TokenReleaseConfirm',Data) -> 'dec_TokenReleaseConfirm'(Data);
decode_disp('TokenTestRequest',Data) -> 'dec_TokenTestRequest'(Data);
decode_disp('TokenTestConfirm',Data) -> 'dec_TokenTestConfirm'(Data);
decode_disp('Reason',Data) -> 'dec_Reason'(Data);
decode_disp('Result',Data) -> 'dec_Result'(Data);
decode_disp('Diagnostic',Data) -> 'dec_Diagnostic'(Data);
decode_disp('ConnectMCSPDU',Data) -> 'dec_ConnectMCSPDU'(Data);
decode_disp('DomainMCSPDU',Data) -> 'dec_DomainMCSPDU'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).





info() ->
   case ?MODULE:module_info() of
      MI when is_list(MI) ->
         case lists:keysearch(attributes,1,MI) of
            {value,{_,Attributes}} when is_list(Attributes) ->
               case lists:keysearch(asn1_info,1,Attributes) of
                  {value,{_,Info}} when is_list(Info) ->
                     Info;
                  _ ->
                     []
               end;
            _ ->
               []
         end
   end.


%%================================
%%  ChannelId
%%================================
'enc_ChannelId'(Val) ->
    'enc_ChannelId'(Val, [<<2>>]).


'enc_ChannelId'({'ChannelId',Val}, TagIn) ->
   'enc_ChannelId'(Val, TagIn);

'enc_ChannelId'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn).


'dec_ChannelId'(Tlv) ->
   'dec_ChannelId'(Tlv, [2]).

'dec_ChannelId'(Tlv, TagIn) ->
?RT_BER:decode_integer(Tlv,{0,65535},TagIn).



%%================================
%%  StaticChannelId
%%================================
'enc_StaticChannelId'(Val) ->
    'enc_StaticChannelId'(Val, [<<2>>]).


'enc_StaticChannelId'({'StaticChannelId',Val}, TagIn) ->
   'enc_StaticChannelId'(Val, TagIn);

'enc_StaticChannelId'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn).


'dec_StaticChannelId'(Tlv) ->
   'dec_StaticChannelId'(Tlv, [2]).

'dec_StaticChannelId'(Tlv, TagIn) ->
?RT_BER:decode_integer(Tlv,{1,1000},TagIn).



%%================================
%%  DynamicChannelId
%%================================
'enc_DynamicChannelId'(Val) ->
    'enc_DynamicChannelId'(Val, [<<2>>]).


'enc_DynamicChannelId'({'DynamicChannelId',Val}, TagIn) ->
   'enc_DynamicChannelId'(Val, TagIn);

'enc_DynamicChannelId'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn).


'dec_DynamicChannelId'(Tlv) ->
   'dec_DynamicChannelId'(Tlv, [2]).

'dec_DynamicChannelId'(Tlv, TagIn) ->
?RT_BER:decode_integer(Tlv,{1001,65535},TagIn).



%%================================
%%  UserId
%%================================
'enc_UserId'(Val) ->
    'enc_UserId'(Val, [<<2>>]).


'enc_UserId'({'UserId',Val}, TagIn) ->
   'enc_UserId'(Val, TagIn);

'enc_UserId'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn).


'dec_UserId'(Tlv) ->
   'dec_UserId'(Tlv, [2]).

'dec_UserId'(Tlv, TagIn) ->
?RT_BER:decode_integer(Tlv,{1001,65535},TagIn).



%%================================
%%  PrivateChannelId
%%================================
'enc_PrivateChannelId'(Val) ->
    'enc_PrivateChannelId'(Val, [<<2>>]).


'enc_PrivateChannelId'({'PrivateChannelId',Val}, TagIn) ->
   'enc_PrivateChannelId'(Val, TagIn);

'enc_PrivateChannelId'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn).


'dec_PrivateChannelId'(Tlv) ->
   'dec_PrivateChannelId'(Tlv, [2]).

'dec_PrivateChannelId'(Tlv, TagIn) ->
?RT_BER:decode_integer(Tlv,{1001,65535},TagIn).



%%================================
%%  AssignedChannelId
%%================================
'enc_AssignedChannelId'(Val) ->
    'enc_AssignedChannelId'(Val, [<<2>>]).


'enc_AssignedChannelId'({'AssignedChannelId',Val}, TagIn) ->
   'enc_AssignedChannelId'(Val, TagIn);

'enc_AssignedChannelId'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn).


'dec_AssignedChannelId'(Tlv) ->
   'dec_AssignedChannelId'(Tlv, [2]).

'dec_AssignedChannelId'(Tlv, TagIn) ->
?RT_BER:decode_integer(Tlv,{1001,65535},TagIn).



%%================================
%%  TokenId
%%================================
'enc_TokenId'(Val) ->
    'enc_TokenId'(Val, [<<2>>]).


'enc_TokenId'({'TokenId',Val}, TagIn) ->
   'enc_TokenId'(Val, TagIn);

'enc_TokenId'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn).


'dec_TokenId'(Tlv) ->
   'dec_TokenId'(Tlv, [2]).

'dec_TokenId'(Tlv, TagIn) ->
?RT_BER:decode_integer(Tlv,{1,65535},TagIn).



%%================================
%%  TokenStatus
%%================================
'enc_TokenStatus'(Val) ->
    'enc_TokenStatus'(Val, [<<10>>]).


'enc_TokenStatus'({'TokenStatus',Val}, TagIn) ->
   'enc_TokenStatus'(Val, TagIn);

'enc_TokenStatus'(Val, TagIn) ->
case Val of
notInUse -> ?RT_BER:encode_enumerated(0,TagIn);
selfGrabbed -> ?RT_BER:encode_enumerated(1,TagIn);
otherGrabbed -> ?RT_BER:encode_enumerated(2,TagIn);
selfInhibited -> ?RT_BER:encode_enumerated(3,TagIn);
otherInhibited -> ?RT_BER:encode_enumerated(4,TagIn);
selfRecipient -> ?RT_BER:encode_enumerated(5,TagIn);
selfGiving -> ?RT_BER:encode_enumerated(6,TagIn);
otherGiving -> ?RT_BER:encode_enumerated(7,TagIn);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_TokenStatus'(Tlv) ->
   'dec_TokenStatus'(Tlv, [10]).

'dec_TokenStatus'(Tlv, TagIn) ->
?RT_BER:decode_enumerated(Tlv,[],[{notInUse,0},{selfGrabbed,1},{otherGrabbed,2},{selfInhibited,3},{otherInhibited,4},{selfRecipient,5},{selfGiving,6},{otherGiving,7}],TagIn).



%%================================
%%  DataPriority
%%================================
'enc_DataPriority'(Val) ->
    'enc_DataPriority'(Val, [<<10>>]).


'enc_DataPriority'({'DataPriority',Val}, TagIn) ->
   'enc_DataPriority'(Val, TagIn);

'enc_DataPriority'(Val, TagIn) ->
case Val of
top -> ?RT_BER:encode_enumerated(0,TagIn);
high -> ?RT_BER:encode_enumerated(1,TagIn);
medium -> ?RT_BER:encode_enumerated(2,TagIn);
low -> ?RT_BER:encode_enumerated(3,TagIn);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_DataPriority'(Tlv) ->
   'dec_DataPriority'(Tlv, [10]).

'dec_DataPriority'(Tlv, TagIn) ->
?RT_BER:decode_enumerated(Tlv,[],[{top,0},{high,1},{medium,2},{low,3}],TagIn).



%%================================
%%  Segmentation
%%================================
'enc_Segmentation'(Val) ->
    'enc_Segmentation'(Val, [<<3>>]).


'enc_Segmentation'({'Segmentation',Val}, TagIn) ->
   'enc_Segmentation'(Val, TagIn);

'enc_Segmentation'(Val, TagIn) ->
?RT_BER:encode_bit_string([{'SizeConstraint',2}], Val, [{'begin',0},{'end',1}], TagIn).


'dec_Segmentation'(Tlv) ->
   'dec_Segmentation'(Tlv, [3]).

'dec_Segmentation'(Tlv, TagIn) ->
?RT_BER:decode_bit_string(Tlv,2,[{'begin',0},{'end',1}],TagIn).



%%================================
%%  DomainParameters
%%================================
'enc_DomainParameters'(Val) ->
    'enc_DomainParameters'(Val, [<<48>>]).

'enc_DomainParameters'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8} = Val,

%%-------------------------------------------------
%% attribute maxChannelIds(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute maxUserIds(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute maxTokenIds(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute numPriorities(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_integer([], Cindex4, [<<2>>]),

%%-------------------------------------------------
%% attribute minThroughput(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_integer([], Cindex5, [<<2>>]),

%%-------------------------------------------------
%% attribute maxHeight(6) with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = ?RT_BER:encode_integer([], Cindex6, [<<2>>]),

%%-------------------------------------------------
%% attribute maxMCSPDUsize(7) with type INTEGER
%%-------------------------------------------------
   {EncBytes7,EncLen7} = ?RT_BER:encode_integer([], Cindex7, [<<2>>]),

%%-------------------------------------------------
%% attribute protocolVersion(8) with type INTEGER
%%-------------------------------------------------
   {EncBytes8,EncLen8} = ?RT_BER:encode_integer([], Cindex8, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DomainParameters'(Tlv) ->
   'dec_DomainParameters'(Tlv, [16]).

'dec_DomainParameters'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute maxChannelIds(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{-(1 bsl 31),'MAX'},[2]),

%%-------------------------------------------------
%% attribute maxUserIds(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{-(1 bsl 31),'MAX'},[2]),

%%-------------------------------------------------
%% attribute maxTokenIds(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = ?RT_BER:decode_integer(V3,{-(1 bsl 31),'MAX'},[2]),

%%-------------------------------------------------
%% attribute numPriorities(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4,
Term4 = ?RT_BER:decode_integer(V4,{-(1 bsl 31),'MAX'},[2]),

%%-------------------------------------------------
%% attribute minThroughput(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5,
Term5 = ?RT_BER:decode_integer(V5,{-(1 bsl 31),'MAX'},[2]),

%%-------------------------------------------------
%% attribute maxHeight(6) with type INTEGER
%%-------------------------------------------------
[V6|Tlv7] = Tlv6,
Term6 = ?RT_BER:decode_integer(V6,{-(1 bsl 31),'MAX'},[2]),

%%-------------------------------------------------
%% attribute maxMCSPDUsize(7) with type INTEGER
%%-------------------------------------------------
[V7|Tlv8] = Tlv7,
Term7 = ?RT_BER:decode_integer(V7,{-(1 bsl 31),'MAX'},[2]),

%%-------------------------------------------------
%% attribute protocolVersion(8) with type INTEGER
%%-------------------------------------------------
[V8|Tlv9] = Tlv8,
Term8 = ?RT_BER:decode_integer(V8,{0,'MAX'},[2]),

case Tlv9 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv9}}}) % extra fields not allowed
end,
   {'DomainParameters', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8}.



%%================================
%%  Connect-Initial
%%================================
'enc_Connect-Initial'(Val) ->
    'enc_Connect-Initial'(Val, [<<127,101>>]).

'enc_Connect-Initial'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7} = Val,

%%-------------------------------------------------
%% attribute callingDomainSelector(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_octet_string([], Cindex1, [<<4>>]),

%%-------------------------------------------------
%% attribute calledDomainSelector(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_octet_string([], Cindex2, [<<4>>]),

%%-------------------------------------------------
%% attribute upwardFlag(3) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_boolean(Cindex3, [<<1>>]),

%%-------------------------------------------------
%% attribute targetParameters(4)   External MCS-PROTOCOL:DomainParameters
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_DomainParameters'(Cindex4, [<<48>>]),

%%-------------------------------------------------
%% attribute minimumParameters(5)   External MCS-PROTOCOL:DomainParameters
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_DomainParameters'(Cindex5, [<<48>>]),

%%-------------------------------------------------
%% attribute maximumParameters(6)   External MCS-PROTOCOL:DomainParameters
%%-------------------------------------------------
   {EncBytes6,EncLen6} = 'enc_DomainParameters'(Cindex6, [<<48>>]),

%%-------------------------------------------------
%% attribute userData(7) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes7,EncLen7} = ?RT_BER:encode_octet_string([], Cindex7, [<<4>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Connect-Initial'(Tlv) ->
   'dec_Connect-Initial'(Tlv, [65637]).

'dec_Connect-Initial'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute callingDomainSelector(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_octet_string(V1,[],[4]),

%%-------------------------------------------------
%% attribute calledDomainSelector(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_octet_string(V2,[],[4]),

%%-------------------------------------------------
%% attribute upwardFlag(3) with type BOOLEAN
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = ?RT_BER:decode_boolean(V3,[1]),

%%-------------------------------------------------
%% attribute targetParameters(4)   External MCS-PROTOCOL:DomainParameters
%%-------------------------------------------------
[V4|Tlv5] = Tlv4,
Term4 = 'dec_DomainParameters'(V4, [16]),

%%-------------------------------------------------
%% attribute minimumParameters(5)   External MCS-PROTOCOL:DomainParameters
%%-------------------------------------------------
[V5|Tlv6] = Tlv5,
Term5 = 'dec_DomainParameters'(V5, [16]),

%%-------------------------------------------------
%% attribute maximumParameters(6)   External MCS-PROTOCOL:DomainParameters
%%-------------------------------------------------
[V6|Tlv7] = Tlv6,
Term6 = 'dec_DomainParameters'(V6, [16]),

%%-------------------------------------------------
%% attribute userData(7) with type OCTET STRING
%%-------------------------------------------------
[V7|Tlv8] = Tlv7,
Term7 = ?RT_BER:decode_octet_string(V7,[],[4]),

case Tlv8 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv8}}}) % extra fields not allowed
end,
   {'Connect-Initial', Term1, Term2, Term3, Term4, Term5, Term6, Term7}.



%%================================
%%  Connect-Response
%%================================
'enc_Connect-Response'(Val) ->
    'enc_Connect-Response'(Val, [<<127,102>>]).

'enc_Connect-Response'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rt-successful' -> ?RT_BER:encode_enumerated(0,[<<10>>]);
'rt-domain-merging' -> ?RT_BER:encode_enumerated(1,[<<10>>]);
'rt-domain-not-hierarchical' -> ?RT_BER:encode_enumerated(2,[<<10>>]);
'rt-no-such-channel' -> ?RT_BER:encode_enumerated(3,[<<10>>]);
'rt-no-such-domain' -> ?RT_BER:encode_enumerated(4,[<<10>>]);
'rt-no-such-user' -> ?RT_BER:encode_enumerated(5,[<<10>>]);
'rt-not-admitted' -> ?RT_BER:encode_enumerated(6,[<<10>>]);
'rt-other-user-id' -> ?RT_BER:encode_enumerated(7,[<<10>>]);
'rt-parameters-unacceptable' -> ?RT_BER:encode_enumerated(8,[<<10>>]);
'rt-token-not-available' -> ?RT_BER:encode_enumerated(9,[<<10>>]);
'rt-token-not-possessed' -> ?RT_BER:encode_enumerated(10,[<<10>>]);
'rt-too-many-channels' -> ?RT_BER:encode_enumerated(11,[<<10>>]);
'rt-too-many-tokens' -> ?RT_BER:encode_enumerated(12,[<<10>>]);
'rt-too-many-users' -> ?RT_BER:encode_enumerated(13,[<<10>>]);
'rt-unspecified-failure' -> ?RT_BER:encode_enumerated(14,[<<10>>]);
'rt-user-rejected' -> ?RT_BER:encode_enumerated(15,[<<10>>]);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute calledConnectId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute domainParameters(3)   External MCS-PROTOCOL:DomainParameters
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_DomainParameters'(Cindex3, [<<48>>]),

%%-------------------------------------------------
%% attribute userData(4) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_octet_string([], Cindex4, [<<4>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Connect-Response'(Tlv) ->
   'dec_Connect-Response'(Tlv, [65638]).

'dec_Connect-Response'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_enumerated(V1,[],[{'rt-successful',0},{'rt-domain-merging',1},{'rt-domain-not-hierarchical',2},{'rt-no-such-channel',3},{'rt-no-such-domain',4},{'rt-no-such-user',5},{'rt-not-admitted',6},{'rt-other-user-id',7},{'rt-parameters-unacceptable',8},{'rt-token-not-available',9},{'rt-token-not-possessed',10},{'rt-too-many-channels',11},{'rt-too-many-tokens',12},{'rt-too-many-users',13},{'rt-unspecified-failure',14},{'rt-user-rejected',15}],[10]),

%%-------------------------------------------------
%% attribute calledConnectId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{0,'MAX'},[2]),

%%-------------------------------------------------
%% attribute domainParameters(3)   External MCS-PROTOCOL:DomainParameters
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = 'dec_DomainParameters'(V3, [16]),

%%-------------------------------------------------
%% attribute userData(4) with type OCTET STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4,
Term4 = ?RT_BER:decode_octet_string(V4,[],[4]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'Connect-Response', Term1, Term2, Term3, Term4}.



%%================================
%%  Connect-Additional
%%================================
'enc_Connect-Additional'(Val) ->
    'enc_Connect-Additional'(Val, [<<127,103>>]).

'enc_Connect-Additional'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute calledConnectId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute dataPriority(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
top -> ?RT_BER:encode_enumerated(0,[<<10>>]);
high -> ?RT_BER:encode_enumerated(1,[<<10>>]);
medium -> ?RT_BER:encode_enumerated(2,[<<10>>]);
low -> ?RT_BER:encode_enumerated(3,[<<10>>]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Connect-Additional'(Tlv) ->
   'dec_Connect-Additional'(Tlv, [65639]).

'dec_Connect-Additional'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute calledConnectId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{0,'MAX'},[2]),

%%-------------------------------------------------
%% attribute dataPriority(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_enumerated(V2,[],[{top,0},{high,1},{medium,2},{low,3}],[10]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'Connect-Additional', Term1, Term2}.



%%================================
%%  Connect-Result
%%================================
'enc_Connect-Result'(Val) ->
    'enc_Connect-Result'(Val, [<<127,104>>]).

'enc_Connect-Result'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rt-successful' -> ?RT_BER:encode_enumerated(0,[<<10>>]);
'rt-domain-merging' -> ?RT_BER:encode_enumerated(1,[<<10>>]);
'rt-domain-not-hierarchical' -> ?RT_BER:encode_enumerated(2,[<<10>>]);
'rt-no-such-channel' -> ?RT_BER:encode_enumerated(3,[<<10>>]);
'rt-no-such-domain' -> ?RT_BER:encode_enumerated(4,[<<10>>]);
'rt-no-such-user' -> ?RT_BER:encode_enumerated(5,[<<10>>]);
'rt-not-admitted' -> ?RT_BER:encode_enumerated(6,[<<10>>]);
'rt-other-user-id' -> ?RT_BER:encode_enumerated(7,[<<10>>]);
'rt-parameters-unacceptable' -> ?RT_BER:encode_enumerated(8,[<<10>>]);
'rt-token-not-available' -> ?RT_BER:encode_enumerated(9,[<<10>>]);
'rt-token-not-possessed' -> ?RT_BER:encode_enumerated(10,[<<10>>]);
'rt-too-many-channels' -> ?RT_BER:encode_enumerated(11,[<<10>>]);
'rt-too-many-tokens' -> ?RT_BER:encode_enumerated(12,[<<10>>]);
'rt-too-many-users' -> ?RT_BER:encode_enumerated(13,[<<10>>]);
'rt-unspecified-failure' -> ?RT_BER:encode_enumerated(14,[<<10>>]);
'rt-user-rejected' -> ?RT_BER:encode_enumerated(15,[<<10>>]);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Connect-Result'(Tlv) ->
   'dec_Connect-Result'(Tlv, [65640]).

'dec_Connect-Result'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_enumerated(V1,[],[{'rt-successful',0},{'rt-domain-merging',1},{'rt-domain-not-hierarchical',2},{'rt-no-such-channel',3},{'rt-no-such-domain',4},{'rt-no-such-user',5},{'rt-not-admitted',6},{'rt-other-user-id',7},{'rt-parameters-unacceptable',8},{'rt-token-not-available',9},{'rt-token-not-possessed',10},{'rt-too-many-channels',11},{'rt-too-many-tokens',12},{'rt-too-many-users',13},{'rt-unspecified-failure',14},{'rt-user-rejected',15}],[10]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'Connect-Result', Term1}.



%%================================
%%  PlumbDomainIndication
%%================================
'enc_PlumbDomainIndication'(Val) ->
    'enc_PlumbDomainIndication'(Val, [<<96>>]).

'enc_PlumbDomainIndication'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute heightLimit(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PlumbDomainIndication'(Tlv) ->
   'dec_PlumbDomainIndication'(Tlv, [65536]).

'dec_PlumbDomainIndication'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute heightLimit(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{0,'MAX'},[2]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'PlumbDomainIndication', Term1}.



%%================================
%%  ErectDomainRequest
%%================================
'enc_ErectDomainRequest'(Val) ->
    'enc_ErectDomainRequest'(Val, [<<97>>]).

'enc_ErectDomainRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute subHeight(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute subInterval(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ErectDomainRequest'(Tlv) ->
   'dec_ErectDomainRequest'(Tlv, [65537]).

'dec_ErectDomainRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute subHeight(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{0,'MAX'},[2]),

%%-------------------------------------------------
%% attribute subInterval(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{0,'MAX'},[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ErectDomainRequest', Term1, Term2}.



%%================================
%%  ChannelAttributes
%%================================
'enc_ChannelAttributes'(Val) ->
    'enc_ChannelAttributes'(Val, []).


'enc_ChannelAttributes'({'ChannelAttributes',Val}, TagIn) ->
   'enc_ChannelAttributes'(Val, TagIn);

'enc_ChannelAttributes'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      static ->
         'enc_ChannelAttributes_static'(element(2,Val), [<<160>>]);
      userId ->
         'enc_ChannelAttributes_userId'(element(2,Val), [<<161>>]);
      private ->
         'enc_ChannelAttributes_private'(element(2,Val), [<<162>>]);
      assigned ->
         'enc_ChannelAttributes_assigned'(element(2,Val), [<<163>>]);
      Else ->
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  ChannelAttributes_static
%%================================
'enc_ChannelAttributes_static'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute channelId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ChannelAttributes_static'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute channelId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1,1000},[2]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'ChannelAttributes_static', Term1}.




%%================================
%%  ChannelAttributes_userId
%%================================
'enc_ChannelAttributes_userId'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute joined(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_boolean(Cindex1, [<<1>>]),

%%-------------------------------------------------
%% attribute userId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ChannelAttributes_userId'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute joined(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_boolean(V1,[1]),

%%-------------------------------------------------
%% attribute userId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1001,65535},[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ChannelAttributes_userId', Term1, Term2}.




%%================================
%%  ChannelAttributes_private
%%================================
'enc_ChannelAttributes_private'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute joined(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_boolean(Cindex1, [<<1>>]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute manager(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute admitted(4) with type SET OF
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_ChannelAttributes_private_admitted'(Cindex4, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ChannelAttributes_private_admitted
%%================================

'enc_ChannelAttributes_private_admitted'({'ChannelAttributes_private_admitted',Val}, TagIn) ->
   'enc_ChannelAttributes_private_admitted'(Val, TagIn);

'enc_ChannelAttributes_private_admitted'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ChannelAttributes_private_admitted_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_ChannelAttributes_private_admitted_components'([], AccBytes, AccLen) ->
   {lists:reverse(AccBytes),AccLen};

'enc_ChannelAttributes_private_admitted_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, [<<2>>]),
   'enc_ChannelAttributes_private_admitted_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_ChannelAttributes_private_admitted'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
[?RT_BER:decode_integer(V1,{1001,65535},[2]) || V1 <- Tlv1].


'dec_ChannelAttributes_private'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute joined(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_boolean(V1,[1]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute manager(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = ?RT_BER:decode_integer(V3,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute admitted(4) with type SET OF
%%-------------------------------------------------
[V4|Tlv5] = Tlv4,
Term4 = 'dec_ChannelAttributes_private_admitted'(V4, [17]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'ChannelAttributes_private', Term1, Term2, Term3, Term4}.




%%================================
%%  ChannelAttributes_assigned
%%================================
'enc_ChannelAttributes_assigned'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute channelId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ChannelAttributes_assigned'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute channelId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'ChannelAttributes_assigned', Term1}.



'dec_ChannelAttributes'(Tlv) ->
   'dec_ChannelAttributes'(Tlv, []).

'dec_ChannelAttributes'(Tlv, TagIn) ->
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'static'
    {131072, V1} ->
        {static, 'dec_ChannelAttributes_static'(V1, [])};


%% 'userId'
    {131073, V1} ->
        {userId, 'dec_ChannelAttributes_userId'(V1, [])};


%% 'private'
    {131074, V1} ->
        {private, 'dec_ChannelAttributes_private'(V1, [])};


%% 'assigned'
    {131075, V1} ->
        {assigned, 'dec_ChannelAttributes_assigned'(V1, [])};

      Else ->
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  MergeChannelsRequest
%%================================
'enc_MergeChannelsRequest'(Val) ->
    'enc_MergeChannelsRequest'(Val, [<<98>>]).

'enc_MergeChannelsRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute mergeChannels(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MergeChannelsRequest_mergeChannels'(Cindex1, [<<49>>]),

%%-------------------------------------------------
%% attribute purgeChannelIds(2) with type SET OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MergeChannelsRequest_purgeChannelIds'(Cindex2, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MergeChannelsRequest_mergeChannels
%%================================

'enc_MergeChannelsRequest_mergeChannels'({'MergeChannelsRequest_mergeChannels',Val}, TagIn) ->
   'enc_MergeChannelsRequest_mergeChannels'(Val, TagIn);

'enc_MergeChannelsRequest_mergeChannels'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MergeChannelsRequest_mergeChannels_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_MergeChannelsRequest_mergeChannels_components'([], AccBytes, AccLen) ->
   {lists:reverse(AccBytes),AccLen};

'enc_MergeChannelsRequest_mergeChannels_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ChannelAttributes'(H, []),
   'enc_MergeChannelsRequest_mergeChannels_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_MergeChannelsRequest_mergeChannels'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
['dec_ChannelAttributes'(V1, []) || V1 <- Tlv1].





%%================================
%%  MergeChannelsRequest_purgeChannelIds
%%================================

'enc_MergeChannelsRequest_purgeChannelIds'({'MergeChannelsRequest_purgeChannelIds',Val}, TagIn) ->
   'enc_MergeChannelsRequest_purgeChannelIds'(Val, TagIn);

'enc_MergeChannelsRequest_purgeChannelIds'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MergeChannelsRequest_purgeChannelIds_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_MergeChannelsRequest_purgeChannelIds_components'([], AccBytes, AccLen) ->
   {lists:reverse(AccBytes),AccLen};

'enc_MergeChannelsRequest_purgeChannelIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, [<<2>>]),
   'enc_MergeChannelsRequest_purgeChannelIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_MergeChannelsRequest_purgeChannelIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
[?RT_BER:decode_integer(V1,{0,65535},[2]) || V1 <- Tlv1].




'dec_MergeChannelsRequest'(Tlv) ->
   'dec_MergeChannelsRequest'(Tlv, [65538]).

'dec_MergeChannelsRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute mergeChannels(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = 'dec_MergeChannelsRequest_mergeChannels'(V1, [17]),

%%-------------------------------------------------
%% attribute purgeChannelIds(2) with type SET OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = 'dec_MergeChannelsRequest_purgeChannelIds'(V2, [17]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'MergeChannelsRequest', Term1, Term2}.



%%================================
%%  MergeChannelsConfirm
%%================================
'enc_MergeChannelsConfirm'(Val) ->
    'enc_MergeChannelsConfirm'(Val, [<<99>>]).

'enc_MergeChannelsConfirm'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute mergeChannels(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MergeChannelsConfirm_mergeChannels'(Cindex1, [<<49>>]),

%%-------------------------------------------------
%% attribute purgeChannelIds(2) with type SET OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MergeChannelsConfirm_purgeChannelIds'(Cindex2, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MergeChannelsConfirm_mergeChannels
%%================================

'enc_MergeChannelsConfirm_mergeChannels'({'MergeChannelsConfirm_mergeChannels',Val}, TagIn) ->
   'enc_MergeChannelsConfirm_mergeChannels'(Val, TagIn);

'enc_MergeChannelsConfirm_mergeChannels'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MergeChannelsConfirm_mergeChannels_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_MergeChannelsConfirm_mergeChannels_components'([], AccBytes, AccLen) ->
   {lists:reverse(AccBytes),AccLen};

'enc_MergeChannelsConfirm_mergeChannels_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ChannelAttributes'(H, []),
   'enc_MergeChannelsConfirm_mergeChannels_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_MergeChannelsConfirm_mergeChannels'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
['dec_ChannelAttributes'(V1, []) || V1 <- Tlv1].





%%================================
%%  MergeChannelsConfirm_purgeChannelIds
%%================================

'enc_MergeChannelsConfirm_purgeChannelIds'({'MergeChannelsConfirm_purgeChannelIds',Val}, TagIn) ->
   'enc_MergeChannelsConfirm_purgeChannelIds'(Val, TagIn);

'enc_MergeChannelsConfirm_purgeChannelIds'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MergeChannelsConfirm_purgeChannelIds_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_MergeChannelsConfirm_purgeChannelIds_components'([], AccBytes, AccLen) ->
   {lists:reverse(AccBytes),AccLen};

'enc_MergeChannelsConfirm_purgeChannelIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, [<<2>>]),
   'enc_MergeChannelsConfirm_purgeChannelIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_MergeChannelsConfirm_purgeChannelIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
[?RT_BER:decode_integer(V1,{0,65535},[2]) || V1 <- Tlv1].




'dec_MergeChannelsConfirm'(Tlv) ->
   'dec_MergeChannelsConfirm'(Tlv, [65539]).

'dec_MergeChannelsConfirm'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute mergeChannels(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = 'dec_MergeChannelsConfirm_mergeChannels'(V1, [17]),

%%-------------------------------------------------
%% attribute purgeChannelIds(2) with type SET OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = 'dec_MergeChannelsConfirm_purgeChannelIds'(V2, [17]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'MergeChannelsConfirm', Term1, Term2}.



%%================================
%%  PurgeChannelsIndication
%%================================
'enc_PurgeChannelsIndication'(Val) ->
    'enc_PurgeChannelsIndication'(Val, [<<100>>]).

'enc_PurgeChannelsIndication'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute detachUserIds(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PurgeChannelsIndication_detachUserIds'(Cindex1, [<<49>>]),

%%-------------------------------------------------
%% attribute purgeChannelIds(2) with type SET OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_PurgeChannelsIndication_purgeChannelIds'(Cindex2, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  PurgeChannelsIndication_detachUserIds
%%================================

'enc_PurgeChannelsIndication_detachUserIds'({'PurgeChannelsIndication_detachUserIds',Val}, TagIn) ->
   'enc_PurgeChannelsIndication_detachUserIds'(Val, TagIn);

'enc_PurgeChannelsIndication_detachUserIds'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_PurgeChannelsIndication_detachUserIds_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_PurgeChannelsIndication_detachUserIds_components'([], AccBytes, AccLen) ->
   {lists:reverse(AccBytes),AccLen};

'enc_PurgeChannelsIndication_detachUserIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, [<<2>>]),
   'enc_PurgeChannelsIndication_detachUserIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_PurgeChannelsIndication_detachUserIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
[?RT_BER:decode_integer(V1,{1001,65535},[2]) || V1 <- Tlv1].





%%================================
%%  PurgeChannelsIndication_purgeChannelIds
%%================================

'enc_PurgeChannelsIndication_purgeChannelIds'({'PurgeChannelsIndication_purgeChannelIds',Val}, TagIn) ->
   'enc_PurgeChannelsIndication_purgeChannelIds'(Val, TagIn);

'enc_PurgeChannelsIndication_purgeChannelIds'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_PurgeChannelsIndication_purgeChannelIds_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_PurgeChannelsIndication_purgeChannelIds_components'([], AccBytes, AccLen) ->
   {lists:reverse(AccBytes),AccLen};

'enc_PurgeChannelsIndication_purgeChannelIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, [<<2>>]),
   'enc_PurgeChannelsIndication_purgeChannelIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_PurgeChannelsIndication_purgeChannelIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
[?RT_BER:decode_integer(V1,{0,65535},[2]) || V1 <- Tlv1].




'dec_PurgeChannelsIndication'(Tlv) ->
   'dec_PurgeChannelsIndication'(Tlv, [65540]).

'dec_PurgeChannelsIndication'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute detachUserIds(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = 'dec_PurgeChannelsIndication_detachUserIds'(V1, [17]),

%%-------------------------------------------------
%% attribute purgeChannelIds(2) with type SET OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = 'dec_PurgeChannelsIndication_purgeChannelIds'(V2, [17]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'PurgeChannelsIndication', Term1, Term2}.



%%================================
%%  TokenAttributes
%%================================
'enc_TokenAttributes'(Val) ->
    'enc_TokenAttributes'(Val, []).


'enc_TokenAttributes'({'TokenAttributes',Val}, TagIn) ->
   'enc_TokenAttributes'(Val, TagIn);

'enc_TokenAttributes'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      grabbed ->
         'enc_TokenAttributes_grabbed'(element(2,Val), [<<160>>]);
      inhibited ->
         'enc_TokenAttributes_inhibited'(element(2,Val), [<<161>>]);
      giving ->
         'enc_TokenAttributes_giving'(element(2,Val), [<<162>>]);
      ungivable ->
         'enc_TokenAttributes_ungivable'(element(2,Val), [<<163>>]);
      given ->
         'enc_TokenAttributes_given'(element(2,Val), [<<164>>]);
      Else ->
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  TokenAttributes_grabbed
%%================================
'enc_TokenAttributes_grabbed'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute tokenId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute grabber(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_TokenAttributes_grabbed'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute tokenId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1,65535},[2]),

%%-------------------------------------------------
%% attribute grabber(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1001,65535},[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'TokenAttributes_grabbed', Term1, Term2}.




%%================================
%%  TokenAttributes_inhibited
%%================================
'enc_TokenAttributes_inhibited'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute tokenId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute inhibitors(2) with type SET OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_TokenAttributes_inhibited_inhibitors'(Cindex2, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  TokenAttributes_inhibited_inhibitors
%%================================

'enc_TokenAttributes_inhibited_inhibitors'({'TokenAttributes_inhibited_inhibitors',Val}, TagIn) ->
   'enc_TokenAttributes_inhibited_inhibitors'(Val, TagIn);

'enc_TokenAttributes_inhibited_inhibitors'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_TokenAttributes_inhibited_inhibitors_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_TokenAttributes_inhibited_inhibitors_components'([], AccBytes, AccLen) ->
   {lists:reverse(AccBytes),AccLen};

'enc_TokenAttributes_inhibited_inhibitors_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, [<<2>>]),
   'enc_TokenAttributes_inhibited_inhibitors_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_TokenAttributes_inhibited_inhibitors'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
[?RT_BER:decode_integer(V1,{1001,65535},[2]) || V1 <- Tlv1].


'dec_TokenAttributes_inhibited'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute tokenId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1,65535},[2]),

%%-------------------------------------------------
%% attribute inhibitors(2) with type SET OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = 'dec_TokenAttributes_inhibited_inhibitors'(V2, [17]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'TokenAttributes_inhibited', Term1, Term2}.




%%================================
%%  TokenAttributes_giving
%%================================
'enc_TokenAttributes_giving'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute tokenId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute grabber(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute recipient(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], Cindex3, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_TokenAttributes_giving'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute tokenId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1,65535},[2]),

%%-------------------------------------------------
%% attribute grabber(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute recipient(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = ?RT_BER:decode_integer(V3,{1001,65535},[2]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'TokenAttributes_giving', Term1, Term2, Term3}.




%%================================
%%  TokenAttributes_ungivable
%%================================
'enc_TokenAttributes_ungivable'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute tokenId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute grabber(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_TokenAttributes_ungivable'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute tokenId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1,65535},[2]),

%%-------------------------------------------------
%% attribute grabber(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1001,65535},[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'TokenAttributes_ungivable', Term1, Term2}.




%%================================
%%  TokenAttributes_given
%%================================
'enc_TokenAttributes_given'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute tokenId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute recipient(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_TokenAttributes_given'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute tokenId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1,65535},[2]),

%%-------------------------------------------------
%% attribute recipient(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1001,65535},[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'TokenAttributes_given', Term1, Term2}.



'dec_TokenAttributes'(Tlv) ->
   'dec_TokenAttributes'(Tlv, []).

'dec_TokenAttributes'(Tlv, TagIn) ->
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'grabbed'
    {131072, V1} ->
        {grabbed, 'dec_TokenAttributes_grabbed'(V1, [])};


%% 'inhibited'
    {131073, V1} ->
        {inhibited, 'dec_TokenAttributes_inhibited'(V1, [])};


%% 'giving'
    {131074, V1} ->
        {giving, 'dec_TokenAttributes_giving'(V1, [])};


%% 'ungivable'
    {131075, V1} ->
        {ungivable, 'dec_TokenAttributes_ungivable'(V1, [])};


%% 'given'
    {131076, V1} ->
        {given, 'dec_TokenAttributes_given'(V1, [])};

      Else ->
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  MergeTokensRequest
%%================================
'enc_MergeTokensRequest'(Val) ->
    'enc_MergeTokensRequest'(Val, [<<101>>]).

'enc_MergeTokensRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute mergeTokens(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MergeTokensRequest_mergeTokens'(Cindex1, [<<49>>]),

%%-------------------------------------------------
%% attribute purgeTokenIds(2) with type SET OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MergeTokensRequest_purgeTokenIds'(Cindex2, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MergeTokensRequest_mergeTokens
%%================================

'enc_MergeTokensRequest_mergeTokens'({'MergeTokensRequest_mergeTokens',Val}, TagIn) ->
   'enc_MergeTokensRequest_mergeTokens'(Val, TagIn);

'enc_MergeTokensRequest_mergeTokens'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MergeTokensRequest_mergeTokens_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_MergeTokensRequest_mergeTokens_components'([], AccBytes, AccLen) ->
   {lists:reverse(AccBytes),AccLen};

'enc_MergeTokensRequest_mergeTokens_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TokenAttributes'(H, []),
   'enc_MergeTokensRequest_mergeTokens_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_MergeTokensRequest_mergeTokens'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
['dec_TokenAttributes'(V1, []) || V1 <- Tlv1].





%%================================
%%  MergeTokensRequest_purgeTokenIds
%%================================

'enc_MergeTokensRequest_purgeTokenIds'({'MergeTokensRequest_purgeTokenIds',Val}, TagIn) ->
   'enc_MergeTokensRequest_purgeTokenIds'(Val, TagIn);

'enc_MergeTokensRequest_purgeTokenIds'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MergeTokensRequest_purgeTokenIds_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_MergeTokensRequest_purgeTokenIds_components'([], AccBytes, AccLen) ->
   {lists:reverse(AccBytes),AccLen};

'enc_MergeTokensRequest_purgeTokenIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, [<<2>>]),
   'enc_MergeTokensRequest_purgeTokenIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_MergeTokensRequest_purgeTokenIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
[?RT_BER:decode_integer(V1,{1,65535},[2]) || V1 <- Tlv1].




'dec_MergeTokensRequest'(Tlv) ->
   'dec_MergeTokensRequest'(Tlv, [65541]).

'dec_MergeTokensRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute mergeTokens(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = 'dec_MergeTokensRequest_mergeTokens'(V1, [17]),

%%-------------------------------------------------
%% attribute purgeTokenIds(2) with type SET OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = 'dec_MergeTokensRequest_purgeTokenIds'(V2, [17]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'MergeTokensRequest', Term1, Term2}.



%%================================
%%  MergeTokensConfirm
%%================================
'enc_MergeTokensConfirm'(Val) ->
    'enc_MergeTokensConfirm'(Val, [<<102>>]).

'enc_MergeTokensConfirm'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute mergeTokens(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MergeTokensConfirm_mergeTokens'(Cindex1, [<<49>>]),

%%-------------------------------------------------
%% attribute purgeTokenIds(2) with type SET OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MergeTokensConfirm_purgeTokenIds'(Cindex2, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MergeTokensConfirm_mergeTokens
%%================================

'enc_MergeTokensConfirm_mergeTokens'({'MergeTokensConfirm_mergeTokens',Val}, TagIn) ->
   'enc_MergeTokensConfirm_mergeTokens'(Val, TagIn);

'enc_MergeTokensConfirm_mergeTokens'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MergeTokensConfirm_mergeTokens_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_MergeTokensConfirm_mergeTokens_components'([], AccBytes, AccLen) ->
   {lists:reverse(AccBytes),AccLen};

'enc_MergeTokensConfirm_mergeTokens_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TokenAttributes'(H, []),
   'enc_MergeTokensConfirm_mergeTokens_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_MergeTokensConfirm_mergeTokens'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
['dec_TokenAttributes'(V1, []) || V1 <- Tlv1].





%%================================
%%  MergeTokensConfirm_purgeTokenIds
%%================================

'enc_MergeTokensConfirm_purgeTokenIds'({'MergeTokensConfirm_purgeTokenIds',Val}, TagIn) ->
   'enc_MergeTokensConfirm_purgeTokenIds'(Val, TagIn);

'enc_MergeTokensConfirm_purgeTokenIds'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MergeTokensConfirm_purgeTokenIds_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_MergeTokensConfirm_purgeTokenIds_components'([], AccBytes, AccLen) ->
   {lists:reverse(AccBytes),AccLen};

'enc_MergeTokensConfirm_purgeTokenIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, [<<2>>]),
   'enc_MergeTokensConfirm_purgeTokenIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_MergeTokensConfirm_purgeTokenIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
[?RT_BER:decode_integer(V1,{1,65535},[2]) || V1 <- Tlv1].




'dec_MergeTokensConfirm'(Tlv) ->
   'dec_MergeTokensConfirm'(Tlv, [65542]).

'dec_MergeTokensConfirm'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute mergeTokens(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = 'dec_MergeTokensConfirm_mergeTokens'(V1, [17]),

%%-------------------------------------------------
%% attribute purgeTokenIds(2) with type SET OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = 'dec_MergeTokensConfirm_purgeTokenIds'(V2, [17]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'MergeTokensConfirm', Term1, Term2}.



%%================================
%%  PurgeTokensIndication
%%================================
'enc_PurgeTokensIndication'(Val) ->
    'enc_PurgeTokensIndication'(Val, [<<103>>]).

'enc_PurgeTokensIndication'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute purgeTokenIds(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PurgeTokensIndication_purgeTokenIds'(Cindex1, [<<49>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  PurgeTokensIndication_purgeTokenIds
%%================================

'enc_PurgeTokensIndication_purgeTokenIds'({'PurgeTokensIndication_purgeTokenIds',Val}, TagIn) ->
   'enc_PurgeTokensIndication_purgeTokenIds'(Val, TagIn);

'enc_PurgeTokensIndication_purgeTokenIds'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_PurgeTokensIndication_purgeTokenIds_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_PurgeTokensIndication_purgeTokenIds_components'([], AccBytes, AccLen) ->
   {lists:reverse(AccBytes),AccLen};

'enc_PurgeTokensIndication_purgeTokenIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, [<<2>>]),
   'enc_PurgeTokensIndication_purgeTokenIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_PurgeTokensIndication_purgeTokenIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
[?RT_BER:decode_integer(V1,{1,65535},[2]) || V1 <- Tlv1].




'dec_PurgeTokensIndication'(Tlv) ->
   'dec_PurgeTokensIndication'(Tlv, [65543]).

'dec_PurgeTokensIndication'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute purgeTokenIds(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = 'dec_PurgeTokensIndication_purgeTokenIds'(V1, [17]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'PurgeTokensIndication', Term1}.



%%================================
%%  DisconnectProviderUltimatum
%%================================
'enc_DisconnectProviderUltimatum'(Val) ->
    'enc_DisconnectProviderUltimatum'(Val, [<<104>>]).

'enc_DisconnectProviderUltimatum'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute reason(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rn-domain-disconnected' -> ?RT_BER:encode_enumerated(0,[<<10>>]);
'rn-provider-initiated' -> ?RT_BER:encode_enumerated(1,[<<10>>]);
'rn-token-purged' -> ?RT_BER:encode_enumerated(2,[<<10>>]);
'rn-user-requested' -> ?RT_BER:encode_enumerated(3,[<<10>>]);
'rn-channel-purged' -> ?RT_BER:encode_enumerated(4,[<<10>>]);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DisconnectProviderUltimatum'(Tlv) ->
   'dec_DisconnectProviderUltimatum'(Tlv, [65544]).

'dec_DisconnectProviderUltimatum'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute reason(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_enumerated(V1,[],[{'rn-domain-disconnected',0},{'rn-provider-initiated',1},{'rn-token-purged',2},{'rn-user-requested',3},{'rn-channel-purged',4}],[10]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'DisconnectProviderUltimatum', Term1}.



%%================================
%%  RejectMCSPDUUltimatum
%%================================
'enc_RejectMCSPDUUltimatum'(Val) ->
    'enc_RejectMCSPDUUltimatum'(Val, [<<105>>]).

'enc_RejectMCSPDUUltimatum'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute diagnostic(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'dc-inconsistent-merge' -> ?RT_BER:encode_enumerated(0,[<<10>>]);
'dc-forbidden-PDU-downward' -> ?RT_BER:encode_enumerated(1,[<<10>>]);
'dc-forbidden-PDU-upward' -> ?RT_BER:encode_enumerated(2,[<<10>>]);
'dc-invalid-BER-encoding' -> ?RT_BER:encode_enumerated(3,[<<10>>]);
'dc-invalid-PER-encoding' -> ?RT_BER:encode_enumerated(4,[<<10>>]);
'dc-misrouted-user' -> ?RT_BER:encode_enumerated(5,[<<10>>]);
'dc-unrequested-confirm' -> ?RT_BER:encode_enumerated(6,[<<10>>]);
'dc-wrong-transport-priority' -> ?RT_BER:encode_enumerated(7,[<<10>>]);
'dc-channel-id-conflict' -> ?RT_BER:encode_enumerated(8,[<<10>>]);
'dc-token-id-conflict' -> ?RT_BER:encode_enumerated(9,[<<10>>]);
'dc-not-user-id-channel' -> ?RT_BER:encode_enumerated(10,[<<10>>]);
'dc-too-many-channels' -> ?RT_BER:encode_enumerated(11,[<<10>>]);
'dc-too-many-tokens' -> ?RT_BER:encode_enumerated(12,[<<10>>]);
'dc-too-many-users' -> ?RT_BER:encode_enumerated(13,[<<10>>]);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute initialOctets(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_octet_string([], Cindex2, [<<4>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RejectMCSPDUUltimatum'(Tlv) ->
   'dec_RejectMCSPDUUltimatum'(Tlv, [65545]).

'dec_RejectMCSPDUUltimatum'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute diagnostic(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_enumerated(V1,[],[{'dc-inconsistent-merge',0},{'dc-forbidden-PDU-downward',1},{'dc-forbidden-PDU-upward',2},{'dc-invalid-BER-encoding',3},{'dc-invalid-PER-encoding',4},{'dc-misrouted-user',5},{'dc-unrequested-confirm',6},{'dc-wrong-transport-priority',7},{'dc-channel-id-conflict',8},{'dc-token-id-conflict',9},{'dc-not-user-id-channel',10},{'dc-too-many-channels',11},{'dc-too-many-tokens',12},{'dc-too-many-users',13}],[10]),

%%-------------------------------------------------
%% attribute initialOctets(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_octet_string(V2,[],[4]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'RejectMCSPDUUltimatum', Term1, Term2}.



%%================================
%%  AttachUserRequest
%%================================
'enc_AttachUserRequest'(Val) ->
    'enc_AttachUserRequest'(Val, [<<106>>]).

'enc_AttachUserRequest'(Val, TagIn) ->
{_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_AttachUserRequest'(Tlv) ->
   'dec_AttachUserRequest'(Tlv, [65546]).

'dec_AttachUserRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
?RT_BER:match_tags(Tlv,TagIn),


   {'AttachUserRequest'}.



%%================================
%%  AttachUserConfirm
%%================================
'enc_AttachUserConfirm'(Val) ->
    'enc_AttachUserConfirm'(Val, [<<107>>]).

'enc_AttachUserConfirm'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rt-successful' -> ?RT_BER:encode_enumerated(0,[<<10>>]);
'rt-domain-merging' -> ?RT_BER:encode_enumerated(1,[<<10>>]);
'rt-domain-not-hierarchical' -> ?RT_BER:encode_enumerated(2,[<<10>>]);
'rt-no-such-channel' -> ?RT_BER:encode_enumerated(3,[<<10>>]);
'rt-no-such-domain' -> ?RT_BER:encode_enumerated(4,[<<10>>]);
'rt-no-such-user' -> ?RT_BER:encode_enumerated(5,[<<10>>]);
'rt-not-admitted' -> ?RT_BER:encode_enumerated(6,[<<10>>]);
'rt-other-user-id' -> ?RT_BER:encode_enumerated(7,[<<10>>]);
'rt-parameters-unacceptable' -> ?RT_BER:encode_enumerated(8,[<<10>>]);
'rt-token-not-available' -> ?RT_BER:encode_enumerated(9,[<<10>>]);
'rt-token-not-possessed' -> ?RT_BER:encode_enumerated(10,[<<10>>]);
'rt-too-many-channels' -> ?RT_BER:encode_enumerated(11,[<<10>>]);
'rt-too-many-tokens' -> ?RT_BER:encode_enumerated(12,[<<10>>]);
'rt-too-many-users' -> ?RT_BER:encode_enumerated(13,[<<10>>]);
'rt-unspecified-failure' -> ?RT_BER:encode_enumerated(14,[<<10>>]);
'rt-user-rejected' -> ?RT_BER:encode_enumerated(15,[<<10>>]);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], Cindex2, [<<2>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_AttachUserConfirm'(Tlv) ->
   'dec_AttachUserConfirm'(Tlv, [65547]).

'dec_AttachUserConfirm'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_enumerated(V1,[],[{'rt-successful',0},{'rt-domain-merging',1},{'rt-domain-not-hierarchical',2},{'rt-no-such-channel',3},{'rt-no-such-domain',4},{'rt-no-such-user',5},{'rt-not-admitted',6},{'rt-other-user-id',7},{'rt-parameters-unacceptable',8},{'rt-token-not-available',9},{'rt-token-not-possessed',10},{'rt-too-many-channels',11},{'rt-too-many-tokens',12},{'rt-too-many-users',13},{'rt-unspecified-failure',14},{'rt-user-rejected',15}],[10]),

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{2,V2}|TempTlv3] ->
    {?RT_BER:decode_integer(V2,{1001,65535},[]), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'AttachUserConfirm', Term1, Term2}.



%%================================
%%  DetachUserRequest
%%================================
'enc_DetachUserRequest'(Val) ->
    'enc_DetachUserRequest'(Val, [<<108>>]).

'enc_DetachUserRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute reason(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rn-domain-disconnected' -> ?RT_BER:encode_enumerated(0,[<<10>>]);
'rn-provider-initiated' -> ?RT_BER:encode_enumerated(1,[<<10>>]);
'rn-token-purged' -> ?RT_BER:encode_enumerated(2,[<<10>>]);
'rn-user-requested' -> ?RT_BER:encode_enumerated(3,[<<10>>]);
'rn-channel-purged' -> ?RT_BER:encode_enumerated(4,[<<10>>]);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute userIds(2) with type SET OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_DetachUserRequest_userIds'(Cindex2, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  DetachUserRequest_userIds
%%================================

'enc_DetachUserRequest_userIds'({'DetachUserRequest_userIds',Val}, TagIn) ->
   'enc_DetachUserRequest_userIds'(Val, TagIn);

'enc_DetachUserRequest_userIds'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_DetachUserRequest_userIds_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_DetachUserRequest_userIds_components'([], AccBytes, AccLen) ->
   {lists:reverse(AccBytes),AccLen};

'enc_DetachUserRequest_userIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, [<<2>>]),
   'enc_DetachUserRequest_userIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_DetachUserRequest_userIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
[?RT_BER:decode_integer(V1,{1001,65535},[2]) || V1 <- Tlv1].




'dec_DetachUserRequest'(Tlv) ->
   'dec_DetachUserRequest'(Tlv, [65548]).

'dec_DetachUserRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute reason(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_enumerated(V1,[],[{'rn-domain-disconnected',0},{'rn-provider-initiated',1},{'rn-token-purged',2},{'rn-user-requested',3},{'rn-channel-purged',4}],[10]),

%%-------------------------------------------------
%% attribute userIds(2) with type SET OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = 'dec_DetachUserRequest_userIds'(V2, [17]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'DetachUserRequest', Term1, Term2}.



%%================================
%%  DetachUserIndication
%%================================
'enc_DetachUserIndication'(Val) ->
    'enc_DetachUserIndication'(Val, [<<109>>]).

'enc_DetachUserIndication'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute reason(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rn-domain-disconnected' -> ?RT_BER:encode_enumerated(0,[<<10>>]);
'rn-provider-initiated' -> ?RT_BER:encode_enumerated(1,[<<10>>]);
'rn-token-purged' -> ?RT_BER:encode_enumerated(2,[<<10>>]);
'rn-user-requested' -> ?RT_BER:encode_enumerated(3,[<<10>>]);
'rn-channel-purged' -> ?RT_BER:encode_enumerated(4,[<<10>>]);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute userIds(2) with type SET OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_DetachUserIndication_userIds'(Cindex2, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  DetachUserIndication_userIds
%%================================

'enc_DetachUserIndication_userIds'({'DetachUserIndication_userIds',Val}, TagIn) ->
   'enc_DetachUserIndication_userIds'(Val, TagIn);

'enc_DetachUserIndication_userIds'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_DetachUserIndication_userIds_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_DetachUserIndication_userIds_components'([], AccBytes, AccLen) ->
   {lists:reverse(AccBytes),AccLen};

'enc_DetachUserIndication_userIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, [<<2>>]),
   'enc_DetachUserIndication_userIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_DetachUserIndication_userIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
[?RT_BER:decode_integer(V1,{1001,65535},[2]) || V1 <- Tlv1].




'dec_DetachUserIndication'(Tlv) ->
   'dec_DetachUserIndication'(Tlv, [65549]).

'dec_DetachUserIndication'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute reason(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_enumerated(V1,[],[{'rn-domain-disconnected',0},{'rn-provider-initiated',1},{'rn-token-purged',2},{'rn-user-requested',3},{'rn-channel-purged',4}],[10]),

%%-------------------------------------------------
%% attribute userIds(2) with type SET OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = 'dec_DetachUserIndication_userIds'(V2, [17]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'DetachUserIndication', Term1, Term2}.



%%================================
%%  ChannelJoinRequest
%%================================
'enc_ChannelJoinRequest'(Val) ->
    'enc_ChannelJoinRequest'(Val, [<<110>>]).

'enc_ChannelJoinRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ChannelJoinRequest'(Tlv) ->
   'dec_ChannelJoinRequest'(Tlv, [65550]).

'dec_ChannelJoinRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{0,65535},[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ChannelJoinRequest', Term1, Term2}.



%%================================
%%  ChannelJoinConfirm
%%================================
'enc_ChannelJoinConfirm'(Val) ->
    'enc_ChannelJoinConfirm'(Val, [<<111>>]).

'enc_ChannelJoinConfirm'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rt-successful' -> ?RT_BER:encode_enumerated(0,[<<10>>]);
'rt-domain-merging' -> ?RT_BER:encode_enumerated(1,[<<10>>]);
'rt-domain-not-hierarchical' -> ?RT_BER:encode_enumerated(2,[<<10>>]);
'rt-no-such-channel' -> ?RT_BER:encode_enumerated(3,[<<10>>]);
'rt-no-such-domain' -> ?RT_BER:encode_enumerated(4,[<<10>>]);
'rt-no-such-user' -> ?RT_BER:encode_enumerated(5,[<<10>>]);
'rt-not-admitted' -> ?RT_BER:encode_enumerated(6,[<<10>>]);
'rt-other-user-id' -> ?RT_BER:encode_enumerated(7,[<<10>>]);
'rt-parameters-unacceptable' -> ?RT_BER:encode_enumerated(8,[<<10>>]);
'rt-token-not-available' -> ?RT_BER:encode_enumerated(9,[<<10>>]);
'rt-token-not-possessed' -> ?RT_BER:encode_enumerated(10,[<<10>>]);
'rt-too-many-channels' -> ?RT_BER:encode_enumerated(11,[<<10>>]);
'rt-too-many-tokens' -> ?RT_BER:encode_enumerated(12,[<<10>>]);
'rt-too-many-users' -> ?RT_BER:encode_enumerated(13,[<<10>>]);
'rt-unspecified-failure' -> ?RT_BER:encode_enumerated(14,[<<10>>]);
'rt-user-rejected' -> ?RT_BER:encode_enumerated(15,[<<10>>]);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute requested(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], Cindex4, [<<2>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ChannelJoinConfirm'(Tlv) ->
   'dec_ChannelJoinConfirm'(Tlv, [65551]).

'dec_ChannelJoinConfirm'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_enumerated(V1,[],[{'rt-successful',0},{'rt-domain-merging',1},{'rt-domain-not-hierarchical',2},{'rt-no-such-channel',3},{'rt-no-such-domain',4},{'rt-no-such-user',5},{'rt-not-admitted',6},{'rt-other-user-id',7},{'rt-parameters-unacceptable',8},{'rt-token-not-available',9},{'rt-token-not-possessed',10},{'rt-too-many-channels',11},{'rt-too-many-tokens',12},{'rt-too-many-users',13},{'rt-unspecified-failure',14},{'rt-user-rejected',15}],[10]),

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute requested(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = ?RT_BER:decode_integer(V3,{0,65535},[2]),

%%-------------------------------------------------
%% attribute channelId(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{2,V4}|TempTlv5] ->
    {?RT_BER:decode_integer(V4,{0,65535},[]), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'ChannelJoinConfirm', Term1, Term2, Term3, Term4}.



%%================================
%%  ChannelLeaveRequest
%%================================
'enc_ChannelLeaveRequest'(Val) ->
    'enc_ChannelLeaveRequest'(Val, [<<112>>]).

'enc_ChannelLeaveRequest'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute channelIds(1) with type SET OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ChannelLeaveRequest_channelIds'(Cindex1, [<<49>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ChannelLeaveRequest_channelIds
%%================================

'enc_ChannelLeaveRequest_channelIds'({'ChannelLeaveRequest_channelIds',Val}, TagIn) ->
   'enc_ChannelLeaveRequest_channelIds'(Val, TagIn);

'enc_ChannelLeaveRequest_channelIds'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ChannelLeaveRequest_channelIds_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_ChannelLeaveRequest_channelIds_components'([], AccBytes, AccLen) ->
   {lists:reverse(AccBytes),AccLen};

'enc_ChannelLeaveRequest_channelIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, [<<2>>]),
   'enc_ChannelLeaveRequest_channelIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_ChannelLeaveRequest_channelIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
[?RT_BER:decode_integer(V1,{0,65535},[2]) || V1 <- Tlv1].




'dec_ChannelLeaveRequest'(Tlv) ->
   'dec_ChannelLeaveRequest'(Tlv, [65552]).

'dec_ChannelLeaveRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute channelIds(1) with type SET OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = 'dec_ChannelLeaveRequest_channelIds'(V1, [17]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'ChannelLeaveRequest', Term1}.



%%================================
%%  ChannelConveneRequest
%%================================
'enc_ChannelConveneRequest'(Val) ->
    'enc_ChannelConveneRequest'(Val, [<<113>>]).

'enc_ChannelConveneRequest'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ChannelConveneRequest'(Tlv) ->
   'dec_ChannelConveneRequest'(Tlv, [65553]).

'dec_ChannelConveneRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'ChannelConveneRequest', Term1}.



%%================================
%%  ChannelConveneConfirm
%%================================
'enc_ChannelConveneConfirm'(Val) ->
    'enc_ChannelConveneConfirm'(Val, [<<114>>]).

'enc_ChannelConveneConfirm'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rt-successful' -> ?RT_BER:encode_enumerated(0,[<<10>>]);
'rt-domain-merging' -> ?RT_BER:encode_enumerated(1,[<<10>>]);
'rt-domain-not-hierarchical' -> ?RT_BER:encode_enumerated(2,[<<10>>]);
'rt-no-such-channel' -> ?RT_BER:encode_enumerated(3,[<<10>>]);
'rt-no-such-domain' -> ?RT_BER:encode_enumerated(4,[<<10>>]);
'rt-no-such-user' -> ?RT_BER:encode_enumerated(5,[<<10>>]);
'rt-not-admitted' -> ?RT_BER:encode_enumerated(6,[<<10>>]);
'rt-other-user-id' -> ?RT_BER:encode_enumerated(7,[<<10>>]);
'rt-parameters-unacceptable' -> ?RT_BER:encode_enumerated(8,[<<10>>]);
'rt-token-not-available' -> ?RT_BER:encode_enumerated(9,[<<10>>]);
'rt-token-not-possessed' -> ?RT_BER:encode_enumerated(10,[<<10>>]);
'rt-too-many-channels' -> ?RT_BER:encode_enumerated(11,[<<10>>]);
'rt-too-many-tokens' -> ?RT_BER:encode_enumerated(12,[<<10>>]);
'rt-too-many-users' -> ?RT_BER:encode_enumerated(13,[<<10>>]);
'rt-unspecified-failure' -> ?RT_BER:encode_enumerated(14,[<<10>>]);
'rt-user-rejected' -> ?RT_BER:encode_enumerated(15,[<<10>>]);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], Cindex3, [<<2>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ChannelConveneConfirm'(Tlv) ->
   'dec_ChannelConveneConfirm'(Tlv, [65554]).

'dec_ChannelConveneConfirm'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_enumerated(V1,[],[{'rt-successful',0},{'rt-domain-merging',1},{'rt-domain-not-hierarchical',2},{'rt-no-such-channel',3},{'rt-no-such-domain',4},{'rt-no-such-user',5},{'rt-not-admitted',6},{'rt-other-user-id',7},{'rt-parameters-unacceptable',8},{'rt-token-not-available',9},{'rt-token-not-possessed',10},{'rt-too-many-channels',11},{'rt-too-many-tokens',12},{'rt-too-many-users',13},{'rt-unspecified-failure',14},{'rt-user-rejected',15}],[10]),

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute channelId(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{2,V3}|TempTlv4] ->
    {?RT_BER:decode_integer(V3,{1001,65535},[]), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ChannelConveneConfirm', Term1, Term2, Term3}.



%%================================
%%  ChannelDisbandRequest
%%================================
'enc_ChannelDisbandRequest'(Val) ->
    'enc_ChannelDisbandRequest'(Val, [<<115>>]).

'enc_ChannelDisbandRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ChannelDisbandRequest'(Tlv) ->
   'dec_ChannelDisbandRequest'(Tlv, [65555]).

'dec_ChannelDisbandRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1001,65535},[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ChannelDisbandRequest', Term1, Term2}.



%%================================
%%  ChannelDisbandIndication
%%================================
'enc_ChannelDisbandIndication'(Val) ->
    'enc_ChannelDisbandIndication'(Val, [<<116>>]).

'enc_ChannelDisbandIndication'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute channelId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ChannelDisbandIndication'(Tlv) ->
   'dec_ChannelDisbandIndication'(Tlv, [65556]).

'dec_ChannelDisbandIndication'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute channelId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'ChannelDisbandIndication', Term1}.



%%================================
%%  ChannelAdmitRequest
%%================================
'enc_ChannelAdmitRequest'(Val) ->
    'enc_ChannelAdmitRequest'(Val, [<<117>>]).

'enc_ChannelAdmitRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute userIds(3) with type SET OF
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_ChannelAdmitRequest_userIds'(Cindex3, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ChannelAdmitRequest_userIds
%%================================

'enc_ChannelAdmitRequest_userIds'({'ChannelAdmitRequest_userIds',Val}, TagIn) ->
   'enc_ChannelAdmitRequest_userIds'(Val, TagIn);

'enc_ChannelAdmitRequest_userIds'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ChannelAdmitRequest_userIds_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_ChannelAdmitRequest_userIds_components'([], AccBytes, AccLen) ->
   {lists:reverse(AccBytes),AccLen};

'enc_ChannelAdmitRequest_userIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, [<<2>>]),
   'enc_ChannelAdmitRequest_userIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_ChannelAdmitRequest_userIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
[?RT_BER:decode_integer(V1,{1001,65535},[2]) || V1 <- Tlv1].




'dec_ChannelAdmitRequest'(Tlv) ->
   'dec_ChannelAdmitRequest'(Tlv, [65557]).

'dec_ChannelAdmitRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute userIds(3) with type SET OF
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = 'dec_ChannelAdmitRequest_userIds'(V3, [17]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ChannelAdmitRequest', Term1, Term2, Term3}.



%%================================
%%  ChannelAdmitIndication
%%================================
'enc_ChannelAdmitIndication'(Val) ->
    'enc_ChannelAdmitIndication'(Val, [<<118>>]).

'enc_ChannelAdmitIndication'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute userIds(3) with type SET OF
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_ChannelAdmitIndication_userIds'(Cindex3, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ChannelAdmitIndication_userIds
%%================================

'enc_ChannelAdmitIndication_userIds'({'ChannelAdmitIndication_userIds',Val}, TagIn) ->
   'enc_ChannelAdmitIndication_userIds'(Val, TagIn);

'enc_ChannelAdmitIndication_userIds'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ChannelAdmitIndication_userIds_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_ChannelAdmitIndication_userIds_components'([], AccBytes, AccLen) ->
   {lists:reverse(AccBytes),AccLen};

'enc_ChannelAdmitIndication_userIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, [<<2>>]),
   'enc_ChannelAdmitIndication_userIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_ChannelAdmitIndication_userIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
[?RT_BER:decode_integer(V1,{1001,65535},[2]) || V1 <- Tlv1].




'dec_ChannelAdmitIndication'(Tlv) ->
   'dec_ChannelAdmitIndication'(Tlv, [65558]).

'dec_ChannelAdmitIndication'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute userIds(3) with type SET OF
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = 'dec_ChannelAdmitIndication_userIds'(V3, [17]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ChannelAdmitIndication', Term1, Term2, Term3}.



%%================================
%%  ChannelExpelRequest
%%================================
'enc_ChannelExpelRequest'(Val) ->
    'enc_ChannelExpelRequest'(Val, [<<119>>]).

'enc_ChannelExpelRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute userIds(3) with type SET OF
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_ChannelExpelRequest_userIds'(Cindex3, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ChannelExpelRequest_userIds
%%================================

'enc_ChannelExpelRequest_userIds'({'ChannelExpelRequest_userIds',Val}, TagIn) ->
   'enc_ChannelExpelRequest_userIds'(Val, TagIn);

'enc_ChannelExpelRequest_userIds'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ChannelExpelRequest_userIds_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_ChannelExpelRequest_userIds_components'([], AccBytes, AccLen) ->
   {lists:reverse(AccBytes),AccLen};

'enc_ChannelExpelRequest_userIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, [<<2>>]),
   'enc_ChannelExpelRequest_userIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_ChannelExpelRequest_userIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
[?RT_BER:decode_integer(V1,{1001,65535},[2]) || V1 <- Tlv1].




'dec_ChannelExpelRequest'(Tlv) ->
   'dec_ChannelExpelRequest'(Tlv, [65559]).

'dec_ChannelExpelRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute userIds(3) with type SET OF
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = 'dec_ChannelExpelRequest_userIds'(V3, [17]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ChannelExpelRequest', Term1, Term2, Term3}.



%%================================
%%  ChannelExpelIndication
%%================================
'enc_ChannelExpelIndication'(Val) ->
    'enc_ChannelExpelIndication'(Val, [<<120>>]).

'enc_ChannelExpelIndication'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute channelId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute userIds(2) with type SET OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ChannelExpelIndication_userIds'(Cindex2, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ChannelExpelIndication_userIds
%%================================

'enc_ChannelExpelIndication_userIds'({'ChannelExpelIndication_userIds',Val}, TagIn) ->
   'enc_ChannelExpelIndication_userIds'(Val, TagIn);

'enc_ChannelExpelIndication_userIds'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ChannelExpelIndication_userIds_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_ChannelExpelIndication_userIds_components'([], AccBytes, AccLen) ->
   {lists:reverse(AccBytes),AccLen};

'enc_ChannelExpelIndication_userIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, [<<2>>]),
   'enc_ChannelExpelIndication_userIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_ChannelExpelIndication_userIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
[?RT_BER:decode_integer(V1,{1001,65535},[2]) || V1 <- Tlv1].




'dec_ChannelExpelIndication'(Tlv) ->
   'dec_ChannelExpelIndication'(Tlv, [65560]).

'dec_ChannelExpelIndication'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute channelId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute userIds(2) with type SET OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = 'dec_ChannelExpelIndication_userIds'(V2, [17]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ChannelExpelIndication', Term1, Term2}.



%%================================
%%  SendDataRequest
%%================================
'enc_SendDataRequest'(Val) ->
    'enc_SendDataRequest'(Val, [<<121>>]).

'enc_SendDataRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute dataPriority(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
top -> ?RT_BER:encode_enumerated(0,[<<10>>]);
high -> ?RT_BER:encode_enumerated(1,[<<10>>]);
medium -> ?RT_BER:encode_enumerated(2,[<<10>>]);
low -> ?RT_BER:encode_enumerated(3,[<<10>>]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute segmentation(4) with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_bit_string([{'SizeConstraint',2}], Cindex4, [{'begin',0},{'end',1}], [<<3>>]),

%%-------------------------------------------------
%% attribute userData(5) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_octet_string([], Cindex5, [<<4>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SendDataRequest'(Tlv) ->
   'dec_SendDataRequest'(Tlv, [65561]).

'dec_SendDataRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{0,65535},[2]),

%%-------------------------------------------------
%% attribute dataPriority(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = ?RT_BER:decode_enumerated(V3,[],[{top,0},{high,1},{medium,2},{low,3}],[10]),

%%-------------------------------------------------
%% attribute segmentation(4) with type BIT STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4,
Term4 = ?RT_BER:decode_bit_string(V4,2,[{'begin',0},{'end',1}],[3]),

%%-------------------------------------------------
%% attribute userData(5) with type OCTET STRING
%%-------------------------------------------------
[V5|Tlv6] = Tlv5,
Term5 = ?RT_BER:decode_octet_string(V5,[],[4]),

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'SendDataRequest', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  SendDataIndication
%%================================
'enc_SendDataIndication'(Val) ->
    'enc_SendDataIndication'(Val, [<<122>>]).

'enc_SendDataIndication'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute dataPriority(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
top -> ?RT_BER:encode_enumerated(0,[<<10>>]);
high -> ?RT_BER:encode_enumerated(1,[<<10>>]);
medium -> ?RT_BER:encode_enumerated(2,[<<10>>]);
low -> ?RT_BER:encode_enumerated(3,[<<10>>]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute segmentation(4) with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_bit_string([{'SizeConstraint',2}], Cindex4, [{'begin',0},{'end',1}], [<<3>>]),

%%-------------------------------------------------
%% attribute userData(5) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_octet_string([], Cindex5, [<<4>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SendDataIndication'(Tlv) ->
   'dec_SendDataIndication'(Tlv, [65562]).

'dec_SendDataIndication'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{0,65535},[2]),

%%-------------------------------------------------
%% attribute dataPriority(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = ?RT_BER:decode_enumerated(V3,[],[{top,0},{high,1},{medium,2},{low,3}],[10]),

%%-------------------------------------------------
%% attribute segmentation(4) with type BIT STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4,
Term4 = ?RT_BER:decode_bit_string(V4,2,[{'begin',0},{'end',1}],[3]),

%%-------------------------------------------------
%% attribute userData(5) with type OCTET STRING
%%-------------------------------------------------
[V5|Tlv6] = Tlv5,
Term5 = ?RT_BER:decode_octet_string(V5,[],[4]),

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'SendDataIndication', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  UniformSendDataRequest
%%================================
'enc_UniformSendDataRequest'(Val) ->
    'enc_UniformSendDataRequest'(Val, [<<123>>]).

'enc_UniformSendDataRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute dataPriority(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
top -> ?RT_BER:encode_enumerated(0,[<<10>>]);
high -> ?RT_BER:encode_enumerated(1,[<<10>>]);
medium -> ?RT_BER:encode_enumerated(2,[<<10>>]);
low -> ?RT_BER:encode_enumerated(3,[<<10>>]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute segmentation(4) with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_bit_string([{'SizeConstraint',2}], Cindex4, [{'begin',0},{'end',1}], [<<3>>]),

%%-------------------------------------------------
%% attribute userData(5) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_octet_string([], Cindex5, [<<4>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_UniformSendDataRequest'(Tlv) ->
   'dec_UniformSendDataRequest'(Tlv, [65563]).

'dec_UniformSendDataRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{0,65535},[2]),

%%-------------------------------------------------
%% attribute dataPriority(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = ?RT_BER:decode_enumerated(V3,[],[{top,0},{high,1},{medium,2},{low,3}],[10]),

%%-------------------------------------------------
%% attribute segmentation(4) with type BIT STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4,
Term4 = ?RT_BER:decode_bit_string(V4,2,[{'begin',0},{'end',1}],[3]),

%%-------------------------------------------------
%% attribute userData(5) with type OCTET STRING
%%-------------------------------------------------
[V5|Tlv6] = Tlv5,
Term5 = ?RT_BER:decode_octet_string(V5,[],[4]),

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'UniformSendDataRequest', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  UniformSendDataIndication
%%================================
'enc_UniformSendDataIndication'(Val) ->
    'enc_UniformSendDataIndication'(Val, [<<124>>]).

'enc_UniformSendDataIndication'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute dataPriority(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
top -> ?RT_BER:encode_enumerated(0,[<<10>>]);
high -> ?RT_BER:encode_enumerated(1,[<<10>>]);
medium -> ?RT_BER:encode_enumerated(2,[<<10>>]);
low -> ?RT_BER:encode_enumerated(3,[<<10>>]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute segmentation(4) with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_bit_string([{'SizeConstraint',2}], Cindex4, [{'begin',0},{'end',1}], [<<3>>]),

%%-------------------------------------------------
%% attribute userData(5) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_octet_string([], Cindex5, [<<4>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_UniformSendDataIndication'(Tlv) ->
   'dec_UniformSendDataIndication'(Tlv, [65564]).

'dec_UniformSendDataIndication'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute channelId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{0,65535},[2]),

%%-------------------------------------------------
%% attribute dataPriority(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = ?RT_BER:decode_enumerated(V3,[],[{top,0},{high,1},{medium,2},{low,3}],[10]),

%%-------------------------------------------------
%% attribute segmentation(4) with type BIT STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4,
Term4 = ?RT_BER:decode_bit_string(V4,2,[{'begin',0},{'end',1}],[3]),

%%-------------------------------------------------
%% attribute userData(5) with type OCTET STRING
%%-------------------------------------------------
[V5|Tlv6] = Tlv5,
Term5 = ?RT_BER:decode_octet_string(V5,[],[4]),

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'UniformSendDataIndication', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  TokenGrabRequest
%%================================
'enc_TokenGrabRequest'(Val) ->
    'enc_TokenGrabRequest'(Val, [<<125>>]).

'enc_TokenGrabRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TokenGrabRequest'(Tlv) ->
   'dec_TokenGrabRequest'(Tlv, [65565]).

'dec_TokenGrabRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1,65535},[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'TokenGrabRequest', Term1, Term2}.



%%================================
%%  TokenGrabConfirm
%%================================
'enc_TokenGrabConfirm'(Val) ->
    'enc_TokenGrabConfirm'(Val, [<<126>>]).

'enc_TokenGrabConfirm'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rt-successful' -> ?RT_BER:encode_enumerated(0,[<<10>>]);
'rt-domain-merging' -> ?RT_BER:encode_enumerated(1,[<<10>>]);
'rt-domain-not-hierarchical' -> ?RT_BER:encode_enumerated(2,[<<10>>]);
'rt-no-such-channel' -> ?RT_BER:encode_enumerated(3,[<<10>>]);
'rt-no-such-domain' -> ?RT_BER:encode_enumerated(4,[<<10>>]);
'rt-no-such-user' -> ?RT_BER:encode_enumerated(5,[<<10>>]);
'rt-not-admitted' -> ?RT_BER:encode_enumerated(6,[<<10>>]);
'rt-other-user-id' -> ?RT_BER:encode_enumerated(7,[<<10>>]);
'rt-parameters-unacceptable' -> ?RT_BER:encode_enumerated(8,[<<10>>]);
'rt-token-not-available' -> ?RT_BER:encode_enumerated(9,[<<10>>]);
'rt-token-not-possessed' -> ?RT_BER:encode_enumerated(10,[<<10>>]);
'rt-too-many-channels' -> ?RT_BER:encode_enumerated(11,[<<10>>]);
'rt-too-many-tokens' -> ?RT_BER:encode_enumerated(12,[<<10>>]);
'rt-too-many-users' -> ?RT_BER:encode_enumerated(13,[<<10>>]);
'rt-unspecified-failure' -> ?RT_BER:encode_enumerated(14,[<<10>>]);
'rt-user-rejected' -> ?RT_BER:encode_enumerated(15,[<<10>>]);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenStatus(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
notInUse -> ?RT_BER:encode_enumerated(0,[<<10>>]);
selfGrabbed -> ?RT_BER:encode_enumerated(1,[<<10>>]);
otherGrabbed -> ?RT_BER:encode_enumerated(2,[<<10>>]);
selfInhibited -> ?RT_BER:encode_enumerated(3,[<<10>>]);
otherInhibited -> ?RT_BER:encode_enumerated(4,[<<10>>]);
selfRecipient -> ?RT_BER:encode_enumerated(5,[<<10>>]);
selfGiving -> ?RT_BER:encode_enumerated(6,[<<10>>]);
otherGiving -> ?RT_BER:encode_enumerated(7,[<<10>>]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TokenGrabConfirm'(Tlv) ->
   'dec_TokenGrabConfirm'(Tlv, [65566]).

'dec_TokenGrabConfirm'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_enumerated(V1,[],[{'rt-successful',0},{'rt-domain-merging',1},{'rt-domain-not-hierarchical',2},{'rt-no-such-channel',3},{'rt-no-such-domain',4},{'rt-no-such-user',5},{'rt-not-admitted',6},{'rt-other-user-id',7},{'rt-parameters-unacceptable',8},{'rt-token-not-available',9},{'rt-token-not-possessed',10},{'rt-too-many-channels',11},{'rt-too-many-tokens',12},{'rt-too-many-users',13},{'rt-unspecified-failure',14},{'rt-user-rejected',15}],[10]),

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute tokenId(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = ?RT_BER:decode_integer(V3,{1,65535},[2]),

%%-------------------------------------------------
%% attribute tokenStatus(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4,
Term4 = ?RT_BER:decode_enumerated(V4,[],[{notInUse,0},{selfGrabbed,1},{otherGrabbed,2},{selfInhibited,3},{otherInhibited,4},{selfRecipient,5},{selfGiving,6},{otherGiving,7}],[10]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'TokenGrabConfirm', Term1, Term2, Term3, Term4}.



%%================================
%%  TokenInhibitRequest
%%================================
'enc_TokenInhibitRequest'(Val) ->
    'enc_TokenInhibitRequest'(Val, [<<127,31>>]).

'enc_TokenInhibitRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TokenInhibitRequest'(Tlv) ->
   'dec_TokenInhibitRequest'(Tlv, [65567]).

'dec_TokenInhibitRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1,65535},[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'TokenInhibitRequest', Term1, Term2}.



%%================================
%%  TokenInhibitConfirm
%%================================
'enc_TokenInhibitConfirm'(Val) ->
    'enc_TokenInhibitConfirm'(Val, [<<127,32>>]).

'enc_TokenInhibitConfirm'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rt-successful' -> ?RT_BER:encode_enumerated(0,[<<10>>]);
'rt-domain-merging' -> ?RT_BER:encode_enumerated(1,[<<10>>]);
'rt-domain-not-hierarchical' -> ?RT_BER:encode_enumerated(2,[<<10>>]);
'rt-no-such-channel' -> ?RT_BER:encode_enumerated(3,[<<10>>]);
'rt-no-such-domain' -> ?RT_BER:encode_enumerated(4,[<<10>>]);
'rt-no-such-user' -> ?RT_BER:encode_enumerated(5,[<<10>>]);
'rt-not-admitted' -> ?RT_BER:encode_enumerated(6,[<<10>>]);
'rt-other-user-id' -> ?RT_BER:encode_enumerated(7,[<<10>>]);
'rt-parameters-unacceptable' -> ?RT_BER:encode_enumerated(8,[<<10>>]);
'rt-token-not-available' -> ?RT_BER:encode_enumerated(9,[<<10>>]);
'rt-token-not-possessed' -> ?RT_BER:encode_enumerated(10,[<<10>>]);
'rt-too-many-channels' -> ?RT_BER:encode_enumerated(11,[<<10>>]);
'rt-too-many-tokens' -> ?RT_BER:encode_enumerated(12,[<<10>>]);
'rt-too-many-users' -> ?RT_BER:encode_enumerated(13,[<<10>>]);
'rt-unspecified-failure' -> ?RT_BER:encode_enumerated(14,[<<10>>]);
'rt-user-rejected' -> ?RT_BER:encode_enumerated(15,[<<10>>]);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenStatus(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
notInUse -> ?RT_BER:encode_enumerated(0,[<<10>>]);
selfGrabbed -> ?RT_BER:encode_enumerated(1,[<<10>>]);
otherGrabbed -> ?RT_BER:encode_enumerated(2,[<<10>>]);
selfInhibited -> ?RT_BER:encode_enumerated(3,[<<10>>]);
otherInhibited -> ?RT_BER:encode_enumerated(4,[<<10>>]);
selfRecipient -> ?RT_BER:encode_enumerated(5,[<<10>>]);
selfGiving -> ?RT_BER:encode_enumerated(6,[<<10>>]);
otherGiving -> ?RT_BER:encode_enumerated(7,[<<10>>]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TokenInhibitConfirm'(Tlv) ->
   'dec_TokenInhibitConfirm'(Tlv, [65568]).

'dec_TokenInhibitConfirm'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_enumerated(V1,[],[{'rt-successful',0},{'rt-domain-merging',1},{'rt-domain-not-hierarchical',2},{'rt-no-such-channel',3},{'rt-no-such-domain',4},{'rt-no-such-user',5},{'rt-not-admitted',6},{'rt-other-user-id',7},{'rt-parameters-unacceptable',8},{'rt-token-not-available',9},{'rt-token-not-possessed',10},{'rt-too-many-channels',11},{'rt-too-many-tokens',12},{'rt-too-many-users',13},{'rt-unspecified-failure',14},{'rt-user-rejected',15}],[10]),

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute tokenId(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = ?RT_BER:decode_integer(V3,{1,65535},[2]),

%%-------------------------------------------------
%% attribute tokenStatus(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4,
Term4 = ?RT_BER:decode_enumerated(V4,[],[{notInUse,0},{selfGrabbed,1},{otherGrabbed,2},{selfInhibited,3},{otherInhibited,4},{selfRecipient,5},{selfGiving,6},{otherGiving,7}],[10]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'TokenInhibitConfirm', Term1, Term2, Term3, Term4}.



%%================================
%%  TokenGiveRequest
%%================================
'enc_TokenGiveRequest'(Val) ->
    'enc_TokenGiveRequest'(Val, [<<127,33>>]).

'enc_TokenGiveRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute recipient(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], Cindex3, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TokenGiveRequest'(Tlv) ->
   'dec_TokenGiveRequest'(Tlv, [65569]).

'dec_TokenGiveRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1,65535},[2]),

%%-------------------------------------------------
%% attribute recipient(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = ?RT_BER:decode_integer(V3,{1001,65535},[2]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'TokenGiveRequest', Term1, Term2, Term3}.



%%================================
%%  TokenGiveIndication
%%================================
'enc_TokenGiveIndication'(Val) ->
    'enc_TokenGiveIndication'(Val, [<<127,34>>]).

'enc_TokenGiveIndication'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute recipient(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], Cindex3, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TokenGiveIndication'(Tlv) ->
   'dec_TokenGiveIndication'(Tlv, [65570]).

'dec_TokenGiveIndication'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1,65535},[2]),

%%-------------------------------------------------
%% attribute recipient(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = ?RT_BER:decode_integer(V3,{1001,65535},[2]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'TokenGiveIndication', Term1, Term2, Term3}.



%%================================
%%  TokenGiveResponse
%%================================
'enc_TokenGiveResponse'(Val) ->
    'enc_TokenGiveResponse'(Val, [<<127,35>>]).

'enc_TokenGiveResponse'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rt-successful' -> ?RT_BER:encode_enumerated(0,[<<10>>]);
'rt-domain-merging' -> ?RT_BER:encode_enumerated(1,[<<10>>]);
'rt-domain-not-hierarchical' -> ?RT_BER:encode_enumerated(2,[<<10>>]);
'rt-no-such-channel' -> ?RT_BER:encode_enumerated(3,[<<10>>]);
'rt-no-such-domain' -> ?RT_BER:encode_enumerated(4,[<<10>>]);
'rt-no-such-user' -> ?RT_BER:encode_enumerated(5,[<<10>>]);
'rt-not-admitted' -> ?RT_BER:encode_enumerated(6,[<<10>>]);
'rt-other-user-id' -> ?RT_BER:encode_enumerated(7,[<<10>>]);
'rt-parameters-unacceptable' -> ?RT_BER:encode_enumerated(8,[<<10>>]);
'rt-token-not-available' -> ?RT_BER:encode_enumerated(9,[<<10>>]);
'rt-token-not-possessed' -> ?RT_BER:encode_enumerated(10,[<<10>>]);
'rt-too-many-channels' -> ?RT_BER:encode_enumerated(11,[<<10>>]);
'rt-too-many-tokens' -> ?RT_BER:encode_enumerated(12,[<<10>>]);
'rt-too-many-users' -> ?RT_BER:encode_enumerated(13,[<<10>>]);
'rt-unspecified-failure' -> ?RT_BER:encode_enumerated(14,[<<10>>]);
'rt-user-rejected' -> ?RT_BER:encode_enumerated(15,[<<10>>]);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute recipient(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], Cindex3, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TokenGiveResponse'(Tlv) ->
   'dec_TokenGiveResponse'(Tlv, [65571]).

'dec_TokenGiveResponse'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_enumerated(V1,[],[{'rt-successful',0},{'rt-domain-merging',1},{'rt-domain-not-hierarchical',2},{'rt-no-such-channel',3},{'rt-no-such-domain',4},{'rt-no-such-user',5},{'rt-not-admitted',6},{'rt-other-user-id',7},{'rt-parameters-unacceptable',8},{'rt-token-not-available',9},{'rt-token-not-possessed',10},{'rt-too-many-channels',11},{'rt-too-many-tokens',12},{'rt-too-many-users',13},{'rt-unspecified-failure',14},{'rt-user-rejected',15}],[10]),

%%-------------------------------------------------
%% attribute recipient(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute tokenId(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = ?RT_BER:decode_integer(V3,{1,65535},[2]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'TokenGiveResponse', Term1, Term2, Term3}.



%%================================
%%  TokenGiveConfirm
%%================================
'enc_TokenGiveConfirm'(Val) ->
    'enc_TokenGiveConfirm'(Val, [<<127,36>>]).

'enc_TokenGiveConfirm'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rt-successful' -> ?RT_BER:encode_enumerated(0,[<<10>>]);
'rt-domain-merging' -> ?RT_BER:encode_enumerated(1,[<<10>>]);
'rt-domain-not-hierarchical' -> ?RT_BER:encode_enumerated(2,[<<10>>]);
'rt-no-such-channel' -> ?RT_BER:encode_enumerated(3,[<<10>>]);
'rt-no-such-domain' -> ?RT_BER:encode_enumerated(4,[<<10>>]);
'rt-no-such-user' -> ?RT_BER:encode_enumerated(5,[<<10>>]);
'rt-not-admitted' -> ?RT_BER:encode_enumerated(6,[<<10>>]);
'rt-other-user-id' -> ?RT_BER:encode_enumerated(7,[<<10>>]);
'rt-parameters-unacceptable' -> ?RT_BER:encode_enumerated(8,[<<10>>]);
'rt-token-not-available' -> ?RT_BER:encode_enumerated(9,[<<10>>]);
'rt-token-not-possessed' -> ?RT_BER:encode_enumerated(10,[<<10>>]);
'rt-too-many-channels' -> ?RT_BER:encode_enumerated(11,[<<10>>]);
'rt-too-many-tokens' -> ?RT_BER:encode_enumerated(12,[<<10>>]);
'rt-too-many-users' -> ?RT_BER:encode_enumerated(13,[<<10>>]);
'rt-unspecified-failure' -> ?RT_BER:encode_enumerated(14,[<<10>>]);
'rt-user-rejected' -> ?RT_BER:encode_enumerated(15,[<<10>>]);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenStatus(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
notInUse -> ?RT_BER:encode_enumerated(0,[<<10>>]);
selfGrabbed -> ?RT_BER:encode_enumerated(1,[<<10>>]);
otherGrabbed -> ?RT_BER:encode_enumerated(2,[<<10>>]);
selfInhibited -> ?RT_BER:encode_enumerated(3,[<<10>>]);
otherInhibited -> ?RT_BER:encode_enumerated(4,[<<10>>]);
selfRecipient -> ?RT_BER:encode_enumerated(5,[<<10>>]);
selfGiving -> ?RT_BER:encode_enumerated(6,[<<10>>]);
otherGiving -> ?RT_BER:encode_enumerated(7,[<<10>>]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TokenGiveConfirm'(Tlv) ->
   'dec_TokenGiveConfirm'(Tlv, [65572]).

'dec_TokenGiveConfirm'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_enumerated(V1,[],[{'rt-successful',0},{'rt-domain-merging',1},{'rt-domain-not-hierarchical',2},{'rt-no-such-channel',3},{'rt-no-such-domain',4},{'rt-no-such-user',5},{'rt-not-admitted',6},{'rt-other-user-id',7},{'rt-parameters-unacceptable',8},{'rt-token-not-available',9},{'rt-token-not-possessed',10},{'rt-too-many-channels',11},{'rt-too-many-tokens',12},{'rt-too-many-users',13},{'rt-unspecified-failure',14},{'rt-user-rejected',15}],[10]),

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute tokenId(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = ?RT_BER:decode_integer(V3,{1,65535},[2]),

%%-------------------------------------------------
%% attribute tokenStatus(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4,
Term4 = ?RT_BER:decode_enumerated(V4,[],[{notInUse,0},{selfGrabbed,1},{otherGrabbed,2},{selfInhibited,3},{otherInhibited,4},{selfRecipient,5},{selfGiving,6},{otherGiving,7}],[10]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'TokenGiveConfirm', Term1, Term2, Term3, Term4}.



%%================================
%%  TokenPleaseRequest
%%================================
'enc_TokenPleaseRequest'(Val) ->
    'enc_TokenPleaseRequest'(Val, [<<127,37>>]).

'enc_TokenPleaseRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TokenPleaseRequest'(Tlv) ->
   'dec_TokenPleaseRequest'(Tlv, [65573]).

'dec_TokenPleaseRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1,65535},[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'TokenPleaseRequest', Term1, Term2}.



%%================================
%%  TokenPleaseIndication
%%================================
'enc_TokenPleaseIndication'(Val) ->
    'enc_TokenPleaseIndication'(Val, [<<127,38>>]).

'enc_TokenPleaseIndication'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TokenPleaseIndication'(Tlv) ->
   'dec_TokenPleaseIndication'(Tlv, [65574]).

'dec_TokenPleaseIndication'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1,65535},[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'TokenPleaseIndication', Term1, Term2}.



%%================================
%%  TokenReleaseRequest
%%================================
'enc_TokenReleaseRequest'(Val) ->
    'enc_TokenReleaseRequest'(Val, [<<127,39>>]).

'enc_TokenReleaseRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TokenReleaseRequest'(Tlv) ->
   'dec_TokenReleaseRequest'(Tlv, [65575]).

'dec_TokenReleaseRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1,65535},[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'TokenReleaseRequest', Term1, Term2}.



%%================================
%%  TokenReleaseConfirm
%%================================
'enc_TokenReleaseConfirm'(Val) ->
    'enc_TokenReleaseConfirm'(Val, [<<127,40>>]).

'enc_TokenReleaseConfirm'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'rt-successful' -> ?RT_BER:encode_enumerated(0,[<<10>>]);
'rt-domain-merging' -> ?RT_BER:encode_enumerated(1,[<<10>>]);
'rt-domain-not-hierarchical' -> ?RT_BER:encode_enumerated(2,[<<10>>]);
'rt-no-such-channel' -> ?RT_BER:encode_enumerated(3,[<<10>>]);
'rt-no-such-domain' -> ?RT_BER:encode_enumerated(4,[<<10>>]);
'rt-no-such-user' -> ?RT_BER:encode_enumerated(5,[<<10>>]);
'rt-not-admitted' -> ?RT_BER:encode_enumerated(6,[<<10>>]);
'rt-other-user-id' -> ?RT_BER:encode_enumerated(7,[<<10>>]);
'rt-parameters-unacceptable' -> ?RT_BER:encode_enumerated(8,[<<10>>]);
'rt-token-not-available' -> ?RT_BER:encode_enumerated(9,[<<10>>]);
'rt-token-not-possessed' -> ?RT_BER:encode_enumerated(10,[<<10>>]);
'rt-too-many-channels' -> ?RT_BER:encode_enumerated(11,[<<10>>]);
'rt-too-many-tokens' -> ?RT_BER:encode_enumerated(12,[<<10>>]);
'rt-too-many-users' -> ?RT_BER:encode_enumerated(13,[<<10>>]);
'rt-unspecified-failure' -> ?RT_BER:encode_enumerated(14,[<<10>>]);
'rt-user-rejected' -> ?RT_BER:encode_enumerated(15,[<<10>>]);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenStatus(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
notInUse -> ?RT_BER:encode_enumerated(0,[<<10>>]);
selfGrabbed -> ?RT_BER:encode_enumerated(1,[<<10>>]);
otherGrabbed -> ?RT_BER:encode_enumerated(2,[<<10>>]);
selfInhibited -> ?RT_BER:encode_enumerated(3,[<<10>>]);
otherInhibited -> ?RT_BER:encode_enumerated(4,[<<10>>]);
selfRecipient -> ?RT_BER:encode_enumerated(5,[<<10>>]);
selfGiving -> ?RT_BER:encode_enumerated(6,[<<10>>]);
otherGiving -> ?RT_BER:encode_enumerated(7,[<<10>>]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TokenReleaseConfirm'(Tlv) ->
   'dec_TokenReleaseConfirm'(Tlv, [65576]).

'dec_TokenReleaseConfirm'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute result(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_enumerated(V1,[],[{'rt-successful',0},{'rt-domain-merging',1},{'rt-domain-not-hierarchical',2},{'rt-no-such-channel',3},{'rt-no-such-domain',4},{'rt-no-such-user',5},{'rt-not-admitted',6},{'rt-other-user-id',7},{'rt-parameters-unacceptable',8},{'rt-token-not-available',9},{'rt-token-not-possessed',10},{'rt-too-many-channels',11},{'rt-too-many-tokens',12},{'rt-too-many-users',13},{'rt-unspecified-failure',14},{'rt-user-rejected',15}],[10]),

%%-------------------------------------------------
%% attribute initiator(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute tokenId(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = ?RT_BER:decode_integer(V3,{1,65535},[2]),

%%-------------------------------------------------
%% attribute tokenStatus(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4,
Term4 = ?RT_BER:decode_enumerated(V4,[],[{notInUse,0},{selfGrabbed,1},{otherGrabbed,2},{selfInhibited,3},{otherInhibited,4},{selfRecipient,5},{selfGiving,6},{otherGiving,7}],[10]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'TokenReleaseConfirm', Term1, Term2, Term3, Term4}.



%%================================
%%  TokenTestRequest
%%================================
'enc_TokenTestRequest'(Val) ->
    'enc_TokenTestRequest'(Val, [<<127,41>>]).

'enc_TokenTestRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TokenTestRequest'(Tlv) ->
   'dec_TokenTestRequest'(Tlv, [65577]).

'dec_TokenTestRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1,65535},[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'TokenTestRequest', Term1, Term2}.



%%================================
%%  TokenTestConfirm
%%================================
'enc_TokenTestConfirm'(Val) ->
    'enc_TokenTestConfirm'(Val, [<<127,42>>]).

'enc_TokenTestConfirm'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute tokenStatus(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
notInUse -> ?RT_BER:encode_enumerated(0,[<<10>>]);
selfGrabbed -> ?RT_BER:encode_enumerated(1,[<<10>>]);
otherGrabbed -> ?RT_BER:encode_enumerated(2,[<<10>>]);
selfInhibited -> ?RT_BER:encode_enumerated(3,[<<10>>]);
otherInhibited -> ?RT_BER:encode_enumerated(4,[<<10>>]);
selfRecipient -> ?RT_BER:encode_enumerated(5,[<<10>>]);
selfGiving -> ?RT_BER:encode_enumerated(6,[<<10>>]);
otherGiving -> ?RT_BER:encode_enumerated(7,[<<10>>]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TokenTestConfirm'(Tlv) ->
   'dec_TokenTestConfirm'(Tlv, [65578]).

'dec_TokenTestConfirm'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),

%%-------------------------------------------------
%% attribute initiator(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1,
Term1 = ?RT_BER:decode_integer(V1,{1001,65535},[2]),

%%-------------------------------------------------
%% attribute tokenId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2,
Term2 = ?RT_BER:decode_integer(V2,{1,65535},[2]),

%%-------------------------------------------------
%% attribute tokenStatus(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3,
Term3 = ?RT_BER:decode_enumerated(V3,[],[{notInUse,0},{selfGrabbed,1},{otherGrabbed,2},{selfInhibited,3},{otherInhibited,4},{selfRecipient,5},{selfGiving,6},{otherGiving,7}],[10]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'TokenTestConfirm', Term1, Term2, Term3}.



%%================================
%%  Reason
%%================================
'enc_Reason'(Val) ->
    'enc_Reason'(Val, [<<10>>]).


'enc_Reason'({'Reason',Val}, TagIn) ->
   'enc_Reason'(Val, TagIn);

'enc_Reason'(Val, TagIn) ->
case Val of
'rn-domain-disconnected' -> ?RT_BER:encode_enumerated(0,TagIn);
'rn-provider-initiated' -> ?RT_BER:encode_enumerated(1,TagIn);
'rn-token-purged' -> ?RT_BER:encode_enumerated(2,TagIn);
'rn-user-requested' -> ?RT_BER:encode_enumerated(3,TagIn);
'rn-channel-purged' -> ?RT_BER:encode_enumerated(4,TagIn);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Reason'(Tlv) ->
   'dec_Reason'(Tlv, [10]).

'dec_Reason'(Tlv, TagIn) ->
?RT_BER:decode_enumerated(Tlv,[],[{'rn-domain-disconnected',0},{'rn-provider-initiated',1},{'rn-token-purged',2},{'rn-user-requested',3},{'rn-channel-purged',4}],TagIn).



%%================================
%%  Result
%%================================
'enc_Result'(Val) ->
    'enc_Result'(Val, [<<10>>]).


'enc_Result'({'Result',Val}, TagIn) ->
   'enc_Result'(Val, TagIn);

'enc_Result'(Val, TagIn) ->
case Val of
'rt-successful' -> ?RT_BER:encode_enumerated(0,TagIn);
'rt-domain-merging' -> ?RT_BER:encode_enumerated(1,TagIn);
'rt-domain-not-hierarchical' -> ?RT_BER:encode_enumerated(2,TagIn);
'rt-no-such-channel' -> ?RT_BER:encode_enumerated(3,TagIn);
'rt-no-such-domain' -> ?RT_BER:encode_enumerated(4,TagIn);
'rt-no-such-user' -> ?RT_BER:encode_enumerated(5,TagIn);
'rt-not-admitted' -> ?RT_BER:encode_enumerated(6,TagIn);
'rt-other-user-id' -> ?RT_BER:encode_enumerated(7,TagIn);
'rt-parameters-unacceptable' -> ?RT_BER:encode_enumerated(8,TagIn);
'rt-token-not-available' -> ?RT_BER:encode_enumerated(9,TagIn);
'rt-token-not-possessed' -> ?RT_BER:encode_enumerated(10,TagIn);
'rt-too-many-channels' -> ?RT_BER:encode_enumerated(11,TagIn);
'rt-too-many-tokens' -> ?RT_BER:encode_enumerated(12,TagIn);
'rt-too-many-users' -> ?RT_BER:encode_enumerated(13,TagIn);
'rt-unspecified-failure' -> ?RT_BER:encode_enumerated(14,TagIn);
'rt-user-rejected' -> ?RT_BER:encode_enumerated(15,TagIn);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Result'(Tlv) ->
   'dec_Result'(Tlv, [10]).

'dec_Result'(Tlv, TagIn) ->
?RT_BER:decode_enumerated(Tlv,[],[{'rt-successful',0},{'rt-domain-merging',1},{'rt-domain-not-hierarchical',2},{'rt-no-such-channel',3},{'rt-no-such-domain',4},{'rt-no-such-user',5},{'rt-not-admitted',6},{'rt-other-user-id',7},{'rt-parameters-unacceptable',8},{'rt-token-not-available',9},{'rt-token-not-possessed',10},{'rt-too-many-channels',11},{'rt-too-many-tokens',12},{'rt-too-many-users',13},{'rt-unspecified-failure',14},{'rt-user-rejected',15}],TagIn).



%%================================
%%  Diagnostic
%%================================
'enc_Diagnostic'(Val) ->
    'enc_Diagnostic'(Val, [<<10>>]).


'enc_Diagnostic'({'Diagnostic',Val}, TagIn) ->
   'enc_Diagnostic'(Val, TagIn);

'enc_Diagnostic'(Val, TagIn) ->
case Val of
'dc-inconsistent-merge' -> ?RT_BER:encode_enumerated(0,TagIn);
'dc-forbidden-PDU-downward' -> ?RT_BER:encode_enumerated(1,TagIn);
'dc-forbidden-PDU-upward' -> ?RT_BER:encode_enumerated(2,TagIn);
'dc-invalid-BER-encoding' -> ?RT_BER:encode_enumerated(3,TagIn);
'dc-invalid-PER-encoding' -> ?RT_BER:encode_enumerated(4,TagIn);
'dc-misrouted-user' -> ?RT_BER:encode_enumerated(5,TagIn);
'dc-unrequested-confirm' -> ?RT_BER:encode_enumerated(6,TagIn);
'dc-wrong-transport-priority' -> ?RT_BER:encode_enumerated(7,TagIn);
'dc-channel-id-conflict' -> ?RT_BER:encode_enumerated(8,TagIn);
'dc-token-id-conflict' -> ?RT_BER:encode_enumerated(9,TagIn);
'dc-not-user-id-channel' -> ?RT_BER:encode_enumerated(10,TagIn);
'dc-too-many-channels' -> ?RT_BER:encode_enumerated(11,TagIn);
'dc-too-many-tokens' -> ?RT_BER:encode_enumerated(12,TagIn);
'dc-too-many-users' -> ?RT_BER:encode_enumerated(13,TagIn);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Diagnostic'(Tlv) ->
   'dec_Diagnostic'(Tlv, [10]).

'dec_Diagnostic'(Tlv, TagIn) ->
?RT_BER:decode_enumerated(Tlv,[],[{'dc-inconsistent-merge',0},{'dc-forbidden-PDU-downward',1},{'dc-forbidden-PDU-upward',2},{'dc-invalid-BER-encoding',3},{'dc-invalid-PER-encoding',4},{'dc-misrouted-user',5},{'dc-unrequested-confirm',6},{'dc-wrong-transport-priority',7},{'dc-channel-id-conflict',8},{'dc-token-id-conflict',9},{'dc-not-user-id-channel',10},{'dc-too-many-channels',11},{'dc-too-many-tokens',12},{'dc-too-many-users',13}],TagIn).



%%================================
%%  ConnectMCSPDU
%%================================
'enc_ConnectMCSPDU'(Val) ->
    'enc_ConnectMCSPDU'(Val, []).


'enc_ConnectMCSPDU'({'ConnectMCSPDU',Val}, TagIn) ->
   'enc_ConnectMCSPDU'(Val, TagIn);

'enc_ConnectMCSPDU'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      'connect-initial' ->
         'enc_Connect-Initial'(element(2,Val), [<<127,101>>]);
      'connect-response' ->
         'enc_Connect-Response'(element(2,Val), [<<127,102>>]);
      'connect-additional' ->
         'enc_Connect-Additional'(element(2,Val), [<<127,103>>]);
      'connect-result' ->
         'enc_Connect-Result'(element(2,Val), [<<127,104>>]);
      Else ->
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn, EncBytes, EncLen).




'dec_ConnectMCSPDU'(Tlv) ->
   'dec_ConnectMCSPDU'(Tlv, []).

'dec_ConnectMCSPDU'(Tlv, TagIn) ->
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'connect-initial'
    {65637, V1} ->
        {'connect-initial', 'dec_Connect-Initial'(V1, [])};


%% 'connect-response'
    {65638, V1} ->
        {'connect-response', 'dec_Connect-Response'(V1, [])};


%% 'connect-additional'
    {65639, V1} ->
        {'connect-additional', 'dec_Connect-Additional'(V1, [])};


%% 'connect-result'
    {65640, V1} ->
        {'connect-result', 'dec_Connect-Result'(V1, [])};

      Else ->
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  DomainMCSPDU
%%================================
'enc_DomainMCSPDU'(Val) ->
    'enc_DomainMCSPDU'(Val, []).


'enc_DomainMCSPDU'({'DomainMCSPDU',Val}, TagIn) ->
   'enc_DomainMCSPDU'(Val, TagIn);

'enc_DomainMCSPDU'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      plumbDomainIndication ->
         'enc_PlumbDomainIndication'(element(2,Val), [<<96>>]);
      erectDomainRequest ->
         'enc_ErectDomainRequest'(element(2,Val), [<<97>>]);
      mergeChannelsRequest ->
         'enc_MergeChannelsRequest'(element(2,Val), [<<98>>]);
      mergeChannelsConfirm ->
         'enc_MergeChannelsConfirm'(element(2,Val), [<<99>>]);
      purgeChannelsIndication ->
         'enc_PurgeChannelsIndication'(element(2,Val), [<<100>>]);
      mergeTokensRequest ->
         'enc_MergeTokensRequest'(element(2,Val), [<<101>>]);
      mergeTokensConfirm ->
         'enc_MergeTokensConfirm'(element(2,Val), [<<102>>]);
      purgeTokensIndication ->
         'enc_PurgeTokensIndication'(element(2,Val), [<<103>>]);
      disconnectProviderUltimatum ->
         'enc_DisconnectProviderUltimatum'(element(2,Val), [<<104>>]);
      rejectMCSPDUUltimatum ->
         'enc_RejectMCSPDUUltimatum'(element(2,Val), [<<105>>]);
      attachUserRequest ->
         'enc_AttachUserRequest'(element(2,Val), [<<106>>]);
      attachUserConfirm ->
         'enc_AttachUserConfirm'(element(2,Val), [<<107>>]);
      detachUserRequest ->
         'enc_DetachUserRequest'(element(2,Val), [<<108>>]);
      detachUserIndication ->
         'enc_DetachUserIndication'(element(2,Val), [<<109>>]);
      channelJoinRequest ->
         'enc_ChannelJoinRequest'(element(2,Val), [<<110>>]);
      channelJoinConfirm ->
         'enc_ChannelJoinConfirm'(element(2,Val), [<<111>>]);
      channelLeaveRequest ->
         'enc_ChannelLeaveRequest'(element(2,Val), [<<112>>]);
      channelConveneRequest ->
         'enc_ChannelConveneRequest'(element(2,Val), [<<113>>]);
      channelConveneConfirm ->
         'enc_ChannelConveneConfirm'(element(2,Val), [<<114>>]);
      channelDisbandRequest ->
         'enc_ChannelDisbandRequest'(element(2,Val), [<<115>>]);
      channelDisbandIndication ->
         'enc_ChannelDisbandIndication'(element(2,Val), [<<116>>]);
      channelAdmitRequest ->
         'enc_ChannelAdmitRequest'(element(2,Val), [<<117>>]);
      channelAdmitIndication ->
         'enc_ChannelAdmitIndication'(element(2,Val), [<<118>>]);
      channelExpelRequest ->
         'enc_ChannelExpelRequest'(element(2,Val), [<<119>>]);
      channelExpelIndication ->
         'enc_ChannelExpelIndication'(element(2,Val), [<<120>>]);
      sendDataRequest ->
         'enc_SendDataRequest'(element(2,Val), [<<121>>]);
      sendDataIndication ->
         'enc_SendDataIndication'(element(2,Val), [<<122>>]);
      uniformSendDataRequest ->
         'enc_UniformSendDataRequest'(element(2,Val), [<<123>>]);
      uniformSendDataIndication ->
         'enc_UniformSendDataIndication'(element(2,Val), [<<124>>]);
      tokenGrabRequest ->
         'enc_TokenGrabRequest'(element(2,Val), [<<125>>]);
      tokenGrabConfirm ->
         'enc_TokenGrabConfirm'(element(2,Val), [<<126>>]);
      tokenInhibitRequest ->
         'enc_TokenInhibitRequest'(element(2,Val), [<<127,31>>]);
      tokenInhibitConfirm ->
         'enc_TokenInhibitConfirm'(element(2,Val), [<<127,32>>]);
      tokenGiveRequest ->
         'enc_TokenGiveRequest'(element(2,Val), [<<127,33>>]);
      tokenGiveIndication ->
         'enc_TokenGiveIndication'(element(2,Val), [<<127,34>>]);
      tokenGiveResponse ->
         'enc_TokenGiveResponse'(element(2,Val), [<<127,35>>]);
      tokenGiveConfirm ->
         'enc_TokenGiveConfirm'(element(2,Val), [<<127,36>>]);
      tokenPleaseRequest ->
         'enc_TokenPleaseRequest'(element(2,Val), [<<127,37>>]);
      tokenPleaseIndication ->
         'enc_TokenPleaseIndication'(element(2,Val), [<<127,38>>]);
      tokenReleaseRequest ->
         'enc_TokenReleaseRequest'(element(2,Val), [<<127,39>>]);
      tokenReleaseConfirm ->
         'enc_TokenReleaseConfirm'(element(2,Val), [<<127,40>>]);
      tokenTestRequest ->
         'enc_TokenTestRequest'(element(2,Val), [<<127,41>>]);
      tokenTestConfirm ->
         'enc_TokenTestConfirm'(element(2,Val), [<<127,42>>]);
      Else ->
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn, EncBytes, EncLen).




'dec_DomainMCSPDU'(Tlv) ->
   'dec_DomainMCSPDU'(Tlv, []).

'dec_DomainMCSPDU'(Tlv, TagIn) ->
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'plumbDomainIndication'
    {65536, V1} ->
        {plumbDomainIndication, 'dec_PlumbDomainIndication'(V1, [])};


%% 'erectDomainRequest'
    {65537, V1} ->
        {erectDomainRequest, 'dec_ErectDomainRequest'(V1, [])};


%% 'mergeChannelsRequest'
    {65538, V1} ->
        {mergeChannelsRequest, 'dec_MergeChannelsRequest'(V1, [])};


%% 'mergeChannelsConfirm'
    {65539, V1} ->
        {mergeChannelsConfirm, 'dec_MergeChannelsConfirm'(V1, [])};


%% 'purgeChannelsIndication'
    {65540, V1} ->
        {purgeChannelsIndication, 'dec_PurgeChannelsIndication'(V1, [])};


%% 'mergeTokensRequest'
    {65541, V1} ->
        {mergeTokensRequest, 'dec_MergeTokensRequest'(V1, [])};


%% 'mergeTokensConfirm'
    {65542, V1} ->
        {mergeTokensConfirm, 'dec_MergeTokensConfirm'(V1, [])};


%% 'purgeTokensIndication'
    {65543, V1} ->
        {purgeTokensIndication, 'dec_PurgeTokensIndication'(V1, [])};


%% 'disconnectProviderUltimatum'
    {65544, V1} ->
        {disconnectProviderUltimatum, 'dec_DisconnectProviderUltimatum'(V1, [])};


%% 'rejectMCSPDUUltimatum'
    {65545, V1} ->
        {rejectMCSPDUUltimatum, 'dec_RejectMCSPDUUltimatum'(V1, [])};


%% 'attachUserRequest'
    {65546, V1} ->
        {attachUserRequest, 'dec_AttachUserRequest'(V1, [])};


%% 'attachUserConfirm'
    {65547, V1} ->
        {attachUserConfirm, 'dec_AttachUserConfirm'(V1, [])};


%% 'detachUserRequest'
    {65548, V1} ->
        {detachUserRequest, 'dec_DetachUserRequest'(V1, [])};


%% 'detachUserIndication'
    {65549, V1} ->
        {detachUserIndication, 'dec_DetachUserIndication'(V1, [])};


%% 'channelJoinRequest'
    {65550, V1} ->
        {channelJoinRequest, 'dec_ChannelJoinRequest'(V1, [])};


%% 'channelJoinConfirm'
    {65551, V1} ->
        {channelJoinConfirm, 'dec_ChannelJoinConfirm'(V1, [])};


%% 'channelLeaveRequest'
    {65552, V1} ->
        {channelLeaveRequest, 'dec_ChannelLeaveRequest'(V1, [])};


%% 'channelConveneRequest'
    {65553, V1} ->
        {channelConveneRequest, 'dec_ChannelConveneRequest'(V1, [])};


%% 'channelConveneConfirm'
    {65554, V1} ->
        {channelConveneConfirm, 'dec_ChannelConveneConfirm'(V1, [])};


%% 'channelDisbandRequest'
    {65555, V1} ->
        {channelDisbandRequest, 'dec_ChannelDisbandRequest'(V1, [])};


%% 'channelDisbandIndication'
    {65556, V1} ->
        {channelDisbandIndication, 'dec_ChannelDisbandIndication'(V1, [])};


%% 'channelAdmitRequest'
    {65557, V1} ->
        {channelAdmitRequest, 'dec_ChannelAdmitRequest'(V1, [])};


%% 'channelAdmitIndication'
    {65558, V1} ->
        {channelAdmitIndication, 'dec_ChannelAdmitIndication'(V1, [])};


%% 'channelExpelRequest'
    {65559, V1} ->
        {channelExpelRequest, 'dec_ChannelExpelRequest'(V1, [])};


%% 'channelExpelIndication'
    {65560, V1} ->
        {channelExpelIndication, 'dec_ChannelExpelIndication'(V1, [])};


%% 'sendDataRequest'
    {65561, V1} ->
        {sendDataRequest, 'dec_SendDataRequest'(V1, [])};


%% 'sendDataIndication'
    {65562, V1} ->
        {sendDataIndication, 'dec_SendDataIndication'(V1, [])};


%% 'uniformSendDataRequest'
    {65563, V1} ->
        {uniformSendDataRequest, 'dec_UniformSendDataRequest'(V1, [])};


%% 'uniformSendDataIndication'
    {65564, V1} ->
        {uniformSendDataIndication, 'dec_UniformSendDataIndication'(V1, [])};


%% 'tokenGrabRequest'
    {65565, V1} ->
        {tokenGrabRequest, 'dec_TokenGrabRequest'(V1, [])};


%% 'tokenGrabConfirm'
    {65566, V1} ->
        {tokenGrabConfirm, 'dec_TokenGrabConfirm'(V1, [])};


%% 'tokenInhibitRequest'
    {65567, V1} ->
        {tokenInhibitRequest, 'dec_TokenInhibitRequest'(V1, [])};


%% 'tokenInhibitConfirm'
    {65568, V1} ->
        {tokenInhibitConfirm, 'dec_TokenInhibitConfirm'(V1, [])};


%% 'tokenGiveRequest'
    {65569, V1} ->
        {tokenGiveRequest, 'dec_TokenGiveRequest'(V1, [])};


%% 'tokenGiveIndication'
    {65570, V1} ->
        {tokenGiveIndication, 'dec_TokenGiveIndication'(V1, [])};


%% 'tokenGiveResponse'
    {65571, V1} ->
        {tokenGiveResponse, 'dec_TokenGiveResponse'(V1, [])};


%% 'tokenGiveConfirm'
    {65572, V1} ->
        {tokenGiveConfirm, 'dec_TokenGiveConfirm'(V1, [])};


%% 'tokenPleaseRequest'
    {65573, V1} ->
        {tokenPleaseRequest, 'dec_TokenPleaseRequest'(V1, [])};


%% 'tokenPleaseIndication'
    {65574, V1} ->
        {tokenPleaseIndication, 'dec_TokenPleaseIndication'(V1, [])};


%% 'tokenReleaseRequest'
    {65575, V1} ->
        {tokenReleaseRequest, 'dec_TokenReleaseRequest'(V1, [])};


%% 'tokenReleaseConfirm'
    {65576, V1} ->
        {tokenReleaseConfirm, 'dec_TokenReleaseConfirm'(V1, [])};


%% 'tokenTestRequest'
    {65577, V1} ->
        {tokenTestRequest, 'dec_TokenTestRequest'(V1, [])};


%% 'tokenTestConfirm'
    {65578, V1} ->
        {tokenTestConfirm, 'dec_TokenTestConfirm'(V1, [])};

      Else ->
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
